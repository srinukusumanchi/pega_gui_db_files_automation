/* Copyright (C) Bank of Nova Scotia - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */
package com.quantum.steps;

import com.codoid.products.exception.FilloException;
import com.qmetry.qaf.automation.core.ConfigurationManager;
import com.qmetry.qaf.automation.step.QAFTestStepProvider;
import com.quantum.api.IhViaAPIbyCustomer;
import com.quantum.api.RestResponseGenerator;
import com.quantum.baseclass.BasePage;
import com.quantum.utility.LoggingUtils;
import com.quantum.utility.ReadTextFile;
import com.quantum.utlities.D2DChannelLogic;
import com.quantum.utlities.Database;
import com.quantum.webpages.*;
import cucumber.api.PendingException;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import org.apache.commons.lang.StringUtils;
import org.testng.Assert;

import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

import static com.quantum.webpages.APPStudio.*;
import static com.quantum.webpages.IHbyCustomer.getIhRecords;

/**
 * BranchLocator.java
 * <p>
 *
 * @author ScotiaBank
 * @version 2.0
 * @since 2019-12-31
 */
@QAFTestStepProvider
public class StepDefinition extends BasePage {


    private static Map<String, String> custDimInputTestDataInformation = new LinkedHashMap<>();
    private static Map<String, String> acctDimInputTestDataInformation = new LinkedHashMap<>();
    private static Map<String, String> clickStreamInputTestDataInformation = new LinkedHashMap<>();
    private static Map<String, String> custAcctRltnpDimInputTestDataInformation = new LinkedHashMap<>();
    private static Map<String, String> purlCustProfileInputTestDataInformation = new LinkedHashMap<>();
    private static Map<String, String> custInsightsInputTestDataInformation = new LinkedHashMap<>();
    private static Map<String, String> pacculcustomerInputTestDataInformation = new LinkedHashMap<>();
    private static String seedCustomer = null;
    private static String seedAccountNumber = null;
    private List<Map<String, String>> ddrRecords = null;

    private static String customer1ForMortRen = null;


    private static String customer2ForMortRen = null;
    private String projectPath = null;
    private static String testDataName = null;
    private static String testId = null;

    static List<Map<String, String>> ntcCustomerOfferDetails = null;
    static List<Map<String, String>> d2dCustomerOfferDetails = null;
    static List<Map<String, String>> d2dLatestCustomerOfferDetails = null;
    static List<Map<String, String>> emobCustomerOfferDetails = null;
    static List<Map<String, String>> rdcCustomerOfferDetails = null;
    static List<Map<String, String>> supplCardCustomerOfferDetails = null;
    static List<Map<String, String>> gicEmailCustomerOfferDetails = null;
    static List<Map<String, String>> latestCustomerOfferDetails = null;
    static List<Map<String, String>> creditorinsuranceCustomerOfferDetails = null;
    static List<Map<String, String>> spspCustomerOfferDetails = null;
    static List<Map<String, String>> cliCustomerOfferDetails = null;
    static List<Map<String, String>> mortgageAcqCustomerOfferDetails = null;
    static List<Map<String, String>> TravelInsuranceCustomerOfferDetails = null;

    static List<Map<String, String>> batchFileCustomerOfferDetails = null;

    private static String accountOdtValue = null;
    private static String eventDateValue = null;
    private static String mortFundingDateValue = null;

    private static String mlsAddedDtValue = null;
    private static String eventDtValue = null;
    private static String solLastLoginDate = null;
    private static String mobLastLoginDate = null;
    private static String BBDWSC_SC_EXPIRY_DATEValue = null;
    private static String vpos_timestamp = null;
    private static String opos_timestamp = null;


    private static String matValAmt = null;

    public StepDefinition() {
        super();
        projectPath = System.getProperty("user.dir");
    }

    public static String getCustomer1ForMortRen() {
        return customer1ForMortRen;
    }

    public static void setCustomer1ForMortRen(String customer1ForMortRen) {
        StepDefinition.customer1ForMortRen = customer1ForMortRen;
    }

    public static String getCustomer2ForMortRen() {
        return customer2ForMortRen;
    }

    public static void setCustomer2ForMortRen(String customer2ForMortRen) {
        StepDefinition.customer2ForMortRen = customer2ForMortRen;
    }

    public static String getTestDataName() {
        return testDataName;
    }

    public static void setTestDataName(String testDataName) {
        StepDefinition.testDataName = testDataName;
    }

    public static List<Map<String, String>> getD2dCustomerOfferDetails() {
        return d2dCustomerOfferDetails;
    }

    public static void setD2dCustomerOfferDetails(List<Map<String, String>> d2dCustomerOfferDetails) {
        StepDefinition.d2dCustomerOfferDetails = d2dCustomerOfferDetails;
    }


    public static List<Map<String, String>> getD2dLatestCustomerOfferDetails() {

        /* *** Debugging added temporarily by Pavani/Sujoy 2022-03-27 ***/
        //System.out.print("Checking d2dLatestCustomerOfferDetails: ");
        //System.out.print(d2dLatestCustomerOfferDetails);

        return d2dLatestCustomerOfferDetails;
    }

    public static void setD2dLatestCustomerOfferDetails(List<Map<String, String>> d2dLatestCustomerOfferDetails) {
        StepDefinition.d2dLatestCustomerOfferDetails = d2dLatestCustomerOfferDetails;
    }

    public static List<Map<String, String>> getLatestCustomerOfferDetails() {
        return latestCustomerOfferDetails;
    }

    public static void setLatestCustomerOfferDetails(List<Map<String, String>> latestCustomerOfferDetails) {
        StepDefinition.latestCustomerOfferDetails = latestCustomerOfferDetails;
    }

    public static List<Map<String, String>> getCreditorinsuranceCustomerOfferDetails() {
        return creditorinsuranceCustomerOfferDetails;
    }

    public static void setCreditorinsuranceCustomerOfferDetails(List<Map<String, String>> creditorinsuranceCustomerOfferDetails) {
        StepDefinition.creditorinsuranceCustomerOfferDetails = creditorinsuranceCustomerOfferDetails;
    }


    public static List<Map<String, String>> getRdcCustomerOfferDetails() {
        return rdcCustomerOfferDetails;
    }

    public static void setRdcCustomerOfferDetails(List<Map<String, String>> rdcCustomerOfferDetails) {
        StepDefinition.rdcCustomerOfferDetails = rdcCustomerOfferDetails;
    }


    public static List<Map<String, String>> getBatchFileCustomerOfferDetails() {
        return batchFileCustomerOfferDetails;
    }

    public static void setBatchFileCustomerOfferDetails(List<Map<String, String>> batchFileCustomerOfferDetails) {
        StepDefinition.batchFileCustomerOfferDetails = batchFileCustomerOfferDetails;
    }

    /**
     * Getter Method for TravelInsuranceCustomerOfferDetails Class Variable
     * Date Created: 2022-04-11
     *
     * @return
     */
    public static List<Map<String, String>> getTravelInsuranceCustomerOfferDetails() {
        return TravelInsuranceCustomerOfferDetails;
    }

    /**
     * Setter Method for TravelInsuranceCustomerOfferDetails Class Variable
     * Date Created: 2022-04-11
     *
     * @param TravelInsuranceCustomerOfferDetails
     */
    public static void setTravelInsuranceCustomerOfferDetails(List<Map<String, String>> TravelInsuranceCustomerOfferDetails) {
        StepDefinition.TravelInsuranceCustomerOfferDetails = TravelInsuranceCustomerOfferDetails;
    }


    public static List<Map<String, String>> getEmobCustomerOfferDetails() {
        return emobCustomerOfferDetails;
    }

    public static void setEmobCustomerOfferDetails(List<Map<String, String>> emobCustomerOfferDetails) {
        StepDefinition.emobCustomerOfferDetails = emobCustomerOfferDetails;
    }


    public static List<Map<String, String>> getSupplCardCustomerOfferDetails() {
        return supplCardCustomerOfferDetails;
    }

    public static void setSupplCardCustomerOfferDetails(List<Map<String, String>> supplCardCustomerOfferDetails) {
        StepDefinition.supplCardCustomerOfferDetails = supplCardCustomerOfferDetails;
    }

    public static List<Map<String, String>> getGicEmailCustomerOfferDetails() {
        return gicEmailCustomerOfferDetails;
    }

    public static void setGicEmailCustomerOfferDetails(List<Map<String, String>> gicEmailCustomerOfferDetails) {
        StepDefinition.gicEmailCustomerOfferDetails = gicEmailCustomerOfferDetails;
    }

    public static List<Map<String, String>> getSpspCustomerOfferDetails() {
        return spspCustomerOfferDetails;
    }

    public static void setSpspCustomerOfferDetails(List<Map<String, String>> rdcCustomerOfferDetails) {
        StepDefinition.spspCustomerOfferDetails = spspCustomerOfferDetails;
    }

    public static List<Map<String, String>> getCLICustomerOfferDetails() {
        return cliCustomerOfferDetails;
    }

    public static void setCLICustomerOfferDetails(List<Map<String, String>> cliCustomerOfferDetails) {
        StepDefinition.cliCustomerOfferDetails = cliCustomerOfferDetails;
    }

    public static List<Map<String, String>> getMortgageAcqCustomerOfferDetails() {
        return mortgageAcqCustomerOfferDetails;
    }

    public static void setMortgageAcqCustomerOfferDetails(List<Map<String, String>> mortgageAcqCustomerOfferDetails) {
        StepDefinition.mortgageAcqCustomerOfferDetails = mortgageAcqCustomerOfferDetails;
    }

    public static Map<String, String> getClickStreamInputTestDataInformation() {
        return clickStreamInputTestDataInformation;
    }

    public static void setClickStreamInputTestDataInformation(Map<String, String> clickStreamInputTestDataInformation) {
        StepDefinition.clickStreamInputTestDataInformation = clickStreamInputTestDataInformation;
    }


    private String getSchema() {
        return ConfigurationManager.getBundle().getPropertyValue("dbSchema");
    }

    public static String getTestId() {
        return testId;
    }

    public static void setTestId(String testId) {
        StepDefinition.testId = testId;
    }

    public static Map<String, String> getPaCculCustomerInputTestDataInformation() {
        return pacculcustomerInputTestDataInformation;
    }

    private static void setPaCculCustomerInputTestDataInformation(Map<String, String> pacculcustomerInputTestDataInformation) {
        StepDefinition.custDimInputTestDataInformation = pacculcustomerInputTestDataInformation;
    }

    public static Map<String, String> getCustDimInputTestDataInformation() {
        //Print statement added temporarily by Sujoy on 2022-03-27
        //System.out.println("Checking Values of custDimInputTestDataInformation: ");
        //System.out.println(custDimInputTestDataInformation);

        return custDimInputTestDataInformation;
    }

    private static void setCustDimInputTestDataInformation(Map<String, String> custDimInputTestDataInformation) {
        StepDefinition.custDimInputTestDataInformation = custDimInputTestDataInformation;
    }

    public static Map<String, String> getCustAcctRltnpDimInputTestDataInformation() {
        return custAcctRltnpDimInputTestDataInformation;
    }

    public static void setCustAcctRltnpDimInputTestDataInformation(Map<String, String> custAcctRltnpDimInputTestDataInformation) {
        StepDefinition.custAcctRltnpDimInputTestDataInformation = custAcctRltnpDimInputTestDataInformation;
    }

    public static Map<String, String> getPurlCustProfileInputTestDataInformation() {
        return purlCustProfileInputTestDataInformation;
    }

    public static Map<String, String> getCustInsightsInputTestDataInformation() {
        return custInsightsInputTestDataInformation;
    }

    public static void setCustInsightsInputTestDataInformation(Map<String, String> custInsightsInputTestDataInformation) {
        StepDefinition.custInsightsInputTestDataInformation = custInsightsInputTestDataInformation;
    }

    public static Map<String, String> getAcctDimInputTestDataInformation() {
        return acctDimInputTestDataInformation;
    }

    public static void setAcctDimInputTestDataInformation(Map<String, String> acctDimInputTestDataInformation) {
        StepDefinition.acctDimInputTestDataInformation = acctDimInputTestDataInformation;
    }

    public static void setPurlCustProfileInputTestDataInformation(Map<String, String> purlCustProfileInputTestDataInformation) {
        StepDefinition.purlCustProfileInputTestDataInformation = purlCustProfileInputTestDataInformation;
    }

    public static String getEventDateValue() {
        return eventDateValue;
    }

    public static String getMortFundingDateValue() {
        return mortFundingDateValue;
    }

    public static void setMortFundingDateValue(String mortFundingDateValue) {
        StepDefinition.mortFundingDateValue = mortFundingDateValue;
    }

    public static String getAccountOdtValue() {
        return accountOdtValue;
    }

    public static String getMlsAddedDtValue() {
        return mlsAddedDtValue;
    }

    public static void setEventDateValue(String eventDateValue) {
        StepDefinition.eventDateValue = eventDateValue;
    }

    public static void setAccountOdtValue(String accountOdtValue) {
        StepDefinition.accountOdtValue = accountOdtValue;
    }

    public static String getVposTxnTimestampValue() {
        return vpos_timestamp;
    }

    public static void setVposTxnTimestampValue(String vpos_txn) {
        StepDefinition.vpos_timestamp = vpos_txn;
    }


    public static String getOposTxnTimestampValue() {
        return opos_timestamp;
    }

    public static void setOposTxnTimestampValue(String opos_txn) {
        StepDefinition.opos_timestamp = opos_txn;
    }

    public static void setMlsAddedDtValue(String mlsAddedDtValue) {
        StepDefinition.mlsAddedDtValue = mlsAddedDtValue;
    }

    public static String getEventDtValue() {
        return eventDtValue;
    }


    public static void setEventDtValue(String eventDtValue) {
        StepDefinition.eventDtValue = eventDtValue;
    }


    public static String getSolLastLoginDate() {
        return solLastLoginDate;
    }

    public static void setSolLastLoginDate(String solLastLoginDate) {
        StepDefinition.solLastLoginDate = solLastLoginDate;
    }

    public static String getMobLastLoginDate() {
        return mobLastLoginDate;
    }

    public static void setMobLastLoginDate(String mobLastLoginDate) {
        StepDefinition.mobLastLoginDate = mobLastLoginDate;
    }

    public static String getBBDWSC_SC_EXPIRY_DATEValue() {
        return BBDWSC_SC_EXPIRY_DATEValue;
    }

    public static void setBBDWSC_SC_EXPIRY_DATEValue(String BBDWSC_SC_EXPIRY_DATEValue) {
        StepDefinition.BBDWSC_SC_EXPIRY_DATEValue = BBDWSC_SC_EXPIRY_DATEValue;
    }

    public static List<Map<String, String>> getNtcCustomerOfferDetails() {
        return ntcCustomerOfferDetails;
    }

    public static void setNtcCustomerOfferDetails(List<Map<String, String>> ntcCustomerOfferDetails) {
        StepDefinition.ntcCustomerOfferDetails = ntcCustomerOfferDetails;
    }

    public static String getMatValAmt() {
        return matValAmt;
    }

    public static void setMatValAmt(String matValAmt) {
        StepDefinition.matValAmt = matValAmt;
    }


    public static String getSeedCustomer() {
        return seedCustomer;
    }

    public static void setSeedCustomer(String seedCustomer) {
        StepDefinition.seedCustomer = seedCustomer;
    }

    public static String getSeedAccountNumber() {
        return seedAccountNumber;
    }

    public static void setSeedAccountNumber(String seedAccountNumber) {
        StepDefinition.seedAccountNumber = seedAccountNumber;
    }

    private String getTestDataExcelPath() {
        return ConfigurationManager.getBundle().getPropertyValue("testdata.input.excelPath");
    }


    private String getBatchFileName() {
        return ConfigurationManager.getBundle().getProperty("batchfile.d2d.fileName").toString();
    }

    @Given("^load data from \"([^\"]*)\" excel sheet$")
    public void loadDataFromExcelSheet(String testDataFileName) throws Throwable {
        String excelName = properties.getProperty("email.input." + testDataFileName);
        setTestDataName(excelName);
    }

    /**
     * This function writes MAT_DT
     * @param matValAmt
     * @param sheetName
     * @param testId
     * @throws Throwable
     */
    @And("^write Mat Value Amt \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeMatValueAmtValueIntoSheetFor(String matValAmt, String sheetName, String testId) throws Throwable {

        if (!matValAmt.equalsIgnoreCase("NULL")) {

            setMatValAmt(matValAmt);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MAT_VAL_AMT", matValAmt);
        } else if (matValAmt.equalsIgnoreCase("NULL")) {
            setAccountOdtValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MAT_VAL_AMT", "NULL");
        }

    }

    /**
     * This function writes account odt date n days from current day (includes current day also) for a specified field into the specified datasheet
     * positive value represents past date and Negative represents future Date
     *

     * @param accountODT   - Duration in Days where Positive value represents past date and Negative represents future Date
     * @param sheetName    - Name of the Datasheet or the Table in the Datasheet
     * @param testId       - Value of the Test ID
     * @throws Throwable
     */
    @Given("^write account odt \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeAccountOdtValueIntoSheetFor(String accountODT, String sheetName, String testId) throws Throwable {

        if (!accountODT.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(accountODT) - 1);
            String accountOdtValue = returnvalue.toString();
            setAccountOdtValue(accountOdtValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "ACCT_ODT", accountOdtValue);
        } else if (accountODT.equalsIgnoreCase("NULL")) {
            setAccountOdtValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "ACCT_ODT", "NULL");
        }

    }


    /**
     * This function calculates different acct odt days from current day(includes current day also) for different accounts
     * @param accountODT   - i number of days that needs to be calculated for first account
     * @param DualAcctODT  - j number of days that needs to be calculated for second account
     * @param sheetName    - Name of the Datasheet or the Table in the Datasheet
     * @param testId       - Value of test ID
     * @param noOfAccounts - n number of accounts for the testid
     * @throws Throwable
     */
    @And("^write Different account odt \"([^\"]*)\"\"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeDifferentAccountOdtValueIntoSheetForHavingAccounts(String accountODT, String DualAcctODT, String
            sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                readAccountInformationDetailsFromExcelSheetFor(sheetName, testId);
                writeAccountOdtExcludingTodayValueIntoSheetFor(accountODT, sheetName, testId);
            } else {
                readAccountInformationDetailsFromExcelSheetFor(sheetName, testId + "_Account_" + i);
                writeAccountOdtExcludingTodayValueIntoSheetFor(DualAcctODT, sheetName, testId + "_Account_" + i);
            }
        }

    }


    /**
     * This function writes account odt date n days from current day (excluding today date) for a specified field into the specified datasheet positive value represents past date and Negative represents future Date
     * @param accountODT   - Duration in Days where Positive value represents past date and Negative represents future Date
     * @param sheetName    - Name of the Datasheet or the Table in the Datasheet
     * @param testId       - Value of the Test ID
     * @throws Throwable
     */
    @And("^write account odt excluding today \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeAccountOdtExcludingTodayValueIntoSheetFor(String accountODT, String sheetName, String testId) throws Throwable {
        if (!accountODT.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(accountODT));
            String accountOdtValue = returnvalue.toString();
            setAccountOdtValue(accountOdtValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "ACCT_ODT", accountOdtValue);
        } else if (accountODT.equalsIgnoreCase("NULL")) {
            setAccountOdtValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "ACCT_ODT", "NULL");
        }

    }


    /**
     * This function calculates same acct odt days from current day (excluded current day) for different accounts and writes into respective data sheet
     * @param accountODT   - number of days to calculate
     * @param sheetName    - Name of the Datasheet or the Table in the Datasheet
     * @param testId       - Value of the test case
     * @param noOfAccounts - number of accounts required for the test ID
     * @throws Throwable
     */
    @And("^write Dual accounts odt excluding today \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeDualAccountsOdtExcludingTodayValueIntoSheetForHavingAccounts(String accountODT, String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                if (!accountODT.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(accountODT));
                    String accountOdtValue = returnvalue.toString();
                    setAccountOdtValue(accountOdtValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "ACCT_ODT", accountOdtValue);
                } else if (accountODT.equalsIgnoreCase("NULL")) {
                    setAccountOdtValue("NULL");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "ACCT_ODT", "NULL");
                }

            } else {
                if (!accountODT.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(accountODT));
                    String accountOdtValue = returnvalue.toString();
                    setAccountOdtValue(accountOdtValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_ODT", accountOdtValue);
                } else if (accountODT.equalsIgnoreCase("NULL")) {
                    setAccountOdtValue("NULL");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_ODT", "NULL");
                }

            }
        }
    }

    @And("^write account odt \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeAccountOdtValueIntoSheetForHavingAccounts(String accountODT, String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                readAccountInformationDetailsFromExcelSheetFor(sheetName, testId);
                writeAccountOdtValueIntoSheetFor(accountODT, sheetName, testId);
            } else {
                readAccountInformationDetailsFromExcelSheetFor(sheetName, testId + "_Account_" + i);
                writeAccountOdtValueIntoSheetFor(accountODT, sheetName, testId + "_Account_" + i);
            }
        }
    }


    @And("^write MLS Added Date \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeMLSAddedDateValueIntoSheetFor(String mlsAddedDt, String sheetName, String testId) throws Throwable {
        if (!mlsAddedDt.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(mlsAddedDt) - 1);
            String mlsAddedDtValue = returnvalue.toString();
            setMlsAddedDtValue(mlsAddedDtValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MLS_ADDED_AT_DT", mlsAddedDtValue);
        } else if (mlsAddedDt.equalsIgnoreCase("NULL")) {
            setMlsAddedDtValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MLS_ADDED_AT_DT", "NULL");
        }

    }

    @And("^write MOB_LAST_LOGIN_DT \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeMOB_LAST_LOGIN_DTValueIntoSheetFor(String mobLastLoginDate, String sheetName, String testId) throws Throwable {
        if (!mobLastLoginDate.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(mobLastLoginDate) - 1);
            mobLastLoginDate = returnvalue.toString();
            setMobLastLoginDate(mobLastLoginDate);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MOB_LAST_LOGIN_DT", mobLastLoginDate);
        } else if (mobLastLoginDate.equalsIgnoreCase("NULL")) {
            setMobLastLoginDate("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MOB_LAST_LOGIN_DT", "NULL");
        }
    }

    @And("^write SOL_LAST_LOGIN_DT \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeSOL_LAST_LOGIN_DTValueIntoSheetFor(String solLastLoginDate, String sheetName, String testId) throws Throwable {
        if (!solLastLoginDate.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(solLastLoginDate) - 1);
            solLastLoginDate = returnvalue.toString();
            setSolLastLoginDate(solLastLoginDate);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "SOL_LAST_LOGIN_DT", solLastLoginDate);
        } else if (solLastLoginDate.equalsIgnoreCase("NULL")) {
            setSolLastLoginDate("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "SOL_LAST_LOGIN_DT", "NULL");
        }
    }

    @And("^write AC account odt \"([^\"]*)\" value into sheet \"([^\"]*)\"  for \"([^\"]*)\"$")
    public void writeACAccountOdtValueIntoSheetFor(String accountODT, String sheetName, String testId) throws Throwable {

        String ACAccountNum = testId + "_ACAcc";
        if (!accountODT.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(accountODT) - 1);
            String accountOdtValue = returnvalue.toString();
            setAccountOdtValue(accountOdtValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, ACAccountNum,
                    "ACCT_ODT", accountOdtValue);
        } else if (accountODT.equalsIgnoreCase("NULL")) {
            setAccountOdtValue(accountOdtValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, ACAccountNum,
                    "ACCT_ODT", "NULL");
        }
    }

    @Given("^write customer open date \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCustomerOpenDateIntoSheetFor(String custOpenDt, String sheetName, String testId) throws Throwable {
        if (!custOpenDt.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(custOpenDt) - 1);
            String custOpenDate = returnvalue.toString();
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "CUST_OPND_DT", custOpenDate);
        } else if (custOpenDt.equalsIgnoreCase("NULL")) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "CUST_OPND_DT", "NULL");
        }
    }

    @And("^write mobile last login date \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeMobileLastLoginDateIntoSheetFor(String mobLastLoginDt, String sheetName, String testId) throws Throwable {
        if (!mobLastLoginDt.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(mobLastLoginDt));
            String mobLastLoginDate = returnvalue.toString();
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MOB_LAST_LOGIN_DT", mobLastLoginDate);
        } else if (mobLastLoginDt.equalsIgnoreCase("NULL")) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MOB_LAST_LOGIN_DT", "NULL");
        }
    }

    @Given("^write different cid into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" Customers$")
    public void writeDifferentCidIntoSheetForHavingCustomers(String sheetName, String testId, String noOfCustomers) throws Throwable {
        int customers = Integer.parseInt(noOfCustomers);
        setTestId(testId);
        for (int i = 1; i <= customers; i++) {

            if (i == 1) {
                String cid = randomNumber(15);
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
            } else {
                String cid = randomNumber(15);
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "CIS_CUST_ID", cid);
            }
        }
    }

    @Given("^write cid into \"([^\"]*)\" sheet for one supp and primary cards \"([^\"]*)\" having \"([^\"]*)\" Customers$")
    public void writeCidIntoSheetForOneSuppAndPrimaryCardsHavingCustomers(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int noOfCid = Integer.parseInt(noOfAccounts);
        setTestId(testId);
        for (int i = 1; i <= noOfCid; i++) {

            if (i == 1) {
                String cid = randomNumber(15);
                setSeedCustomer(cid);
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_ACCT_RLTNP_DIM", "Header_TestID", testId + "_Account_" + i);
                if (custAcctRltnpDimInputTestDataInformation.get("PRIMARY_ACCT_HOLDER_FLAG").equals("N")) {
                    String cid = randomNumber(15);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CIS_CUST_ID", cid);
                } else {
                    String cid = getSeedCustomer();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CIS_CUST_ID", cid);
                }

            }
        }
    }

    @Given("^write cid into \"([^\"]*)\" sheet for negative one supp and primary cards \"([^\"]*)\" having \"([^\"]*)\" Customers$")
    public void writeCidIntoSheetForNegativeOneSuppAndPrimaryCardsHavingCustomers(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int noOfCid = Integer.parseInt(noOfAccounts);
        setTestId(testId);
        for (int i = 1; i <= noOfCid; i++) {

            if (i == 1) {
                String cid = randomNumber(15);
                setSeedCustomer(cid);
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_ACCT_RLTNP_DIM", "Header_TestID", testId + "_Account_" + i);
                if (custAcctRltnpDimInputTestDataInformation.get("PRIMARY_ACCT_HOLDER_FLAG").equals("Y")) {
                    String cid = randomNumber(15);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CIS_CUST_ID", cid);
                } else {
                    String cid = getSeedCustomer();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CIS_CUST_ID", cid);
                }

            }
        }
    }

    /**
     * Original Method to Generate and Write Account Numbers for Multiple Accounts
     *
     * @param sheetName
     * @param testId
     * @param noOfAccounts
     * @throws Throwable
     */
    @And("^write account number into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeAccountNumberIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            String accountNumber = null;
            if (i == 1) {
                accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                accountNumber = StringUtils.leftPad(randomNumber(15), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "ACCT_NUM", accountNumber);
            }
        }
    }


    /**
     * Method to Generate and Write Account Numbers for Multiple Accounts
     * having specific characters in the Accounts Except the First Account
     * Date Created: 2022-04-05
     *
     * @param sheetName
     * @param testId
     * @param noOfAccounts
     * @throws Throwable
     */
    @And("^write account number into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts containing \"([^\"]*)\" chars$")
    public void writeAccountNumberIntoSheetForHavingAccountsContainingChars(String sheetName, String testId, String noOfAccounts, String embeddedChars) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            String accountNumber = null;
            if (i == 1) {
                accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                accountNumber = StringUtils.leftPad(randomNumber(2), 10, "0") + embeddedChars + randomNumber(10);
                //accountNumber = StringUtils.leftPad(randomNumber(15), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "ACCT_NUM", accountNumber);
            }
        }
    }


    @When("^write same account number into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeSameAccountNumberIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            String accountNumber = null;
            if (i == 1) {
                accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "ACCT_NUM", accountNumber);
            }
        }
    }

    @When("^write account number for one supp and primary cards into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeAccountNumberForOneSuppAndPrimaryCardsIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        for (int i = 1; i <= accounts; i++) {
            String accountNumber = null;
            if (i == 1) {
                custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
                accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_ACCT_RLTNP_DIM", "Header_TestID", testId + "_Account_" + i);
                if (custAcctRltnpDimInputTestDataInformation.get("PRIMARY_ACCT_HOLDER_FLAG").equals("N")) {
                    accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                } else {
                    custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId + "_Account_" + i);
                    accountNumber = StringUtils.leftPad(randomNumber(15), 23, "0");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                }

            }
        }
    }

    @When("^write account number for Negative one supp and primary cards into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeAccountNumberForNegativeOneSuppAndPrimaryCardsIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        for (int i = 1; i <= accounts; i++) {
            String accountNumber = null;
            if (i == 1) {
                custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
                accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_ACCT_RLTNP_DIM", "Header_TestID", testId + "_Account_" + i);
                if (custAcctRltnpDimInputTestDataInformation.get("PRIMARY_ACCT_HOLDER_FLAG").equals("Y")) {
                    accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                } else {
                    custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId + "_Account_" + i);
                    accountNumber = StringUtils.leftPad(randomNumber(15), 23, "0");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                }

            }
        }
    }

    @And("^write cid into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCidIntoSheetFor(String sheetName, String testId) throws FilloException {
        String cid = randomNumber(15);
        System.out.println("CID is:- " + cid);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CIS_CUST_ID", cid);
        setSeedCustomer(cid);
    }

    @Given("^write account number into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeAccountNumberIntoSheetFor(String sheetName, String testId) throws Throwable {
        String accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "ACCT_NUM", accountNumber);
    }

    //Write Last N Digits of Account Number
    @Given("^write account number last \"([^\"]*)\" digits into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeNDigitsOfAccountNumberIntoSheetFor(String digits, String sheetName, String testId) throws Throwable {
        int iDigits = Integer.parseInt(digits);

        String strCis_Cust_Id = custDimInputTestDataInformation.get("CIS_CUST_ID");
        String accountNumber = null;


        if (strCis_Cust_Id.length() > iDigits) {
            accountNumber = StringUtils.right(custDimInputTestDataInformation.get("CIS_CUST_ID"), iDigits);
        } else {
            accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), iDigits, "0");
        }

        accountNumber = StringUtils.leftPad(accountNumber, 23, "0");

        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "ACCT_NUM", accountNumber);
    }


    @And("^read customer information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readCustomerInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws IOException {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setCustDimInputTestDataInformation(custDimInputTestDataInformation);
        System.out.println("CID is:- " + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        setTestId(testId);
    }


    @Given("^read account information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readAccountInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
    }

    @When("^read cust Insights information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readCustInsightsInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custInsightsInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setCustInsightsInputTestDataInformation(custInsightsInputTestDataInformation);
    }

    @When("^read AC account information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readACAccountInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws Throwable {
        String ACAccountTestID = testId + "_ACAcc";
        String accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, ACAccountTestID,
                "ACCT_NUM", accountNumber);
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", ACAccountTestID);
        setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
    }

    @Given("^read customer purl profile information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readCustomerPurlProfileInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        purlCustProfileInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setPurlCustProfileInputTestDataInformation(purlCustProfileInputTestDataInformation);
    }


    @When("^read purl cust information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readPurlCustInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        purlCustProfileInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setPurlCustProfileInputTestDataInformation(purlCustProfileInputTestDataInformation);
    }

    @When("^insert customer information details in \"([^\"]*)\" table$")
    public void insertCustomerIdDetailsInTable(String databaseTable) {
        Database database = new Database();
        String insertQuery = database.queryBuilder(getCustDimInputTestDataInformation(), databaseTable);
        database.insertData(insertQuery);
    }

    @When("^insert customer account details in \"([^\"]*)\" table$")
    public void insertCustomerAccountDetailsInTable(String databaseTable) throws Throwable {
        Database database = new Database();
        String insertQuery = database.queryBuilder(getAcctDimInputTestDataInformation(), databaseTable);
        database.insertData(insertQuery);
    }

    @Then("^insert customer account details in \"([^\"]*)\" table having \"([^\"]*)\" accounts$")
    public void insertCustomerAccountDetailsInTableHavingAccounts(String sheetName, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        String testId = getTestId();
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                insertCustomerAccountDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                insertCustomerAccountDetailsInTable(sheetName);
            }
        }
    }


    @Then("^insert Generic account details in \"([^\"]*)\" table having \"([^\"]*)\" accounts for \"([^\"]*)\"$")
    public void insertGenericAccountDetailsInTableHavingAccounts(String sheetName, String noOfAccounts, String testId) throws Throwable {

       //New Logic
        String ACCT_Query = getAcctDimInputTestDataInformation().get("Query").trim();

        Database database = new Database();
        database.insertData(ACCT_Query);



/* Original Logic
        int accounts = Integer.parseInt(noOfAccounts);
//        String testId = getTestId();
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                insertCustomerAccountDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                insertCustomerAccountDetailsInTable(sheetName);
            }
        }
    */



    }




    /**
     * Method to insert Multiple insights in Database
     * Currently commented as duplicate with insertCustomerDetailsInTableHavingAccounts() method
     * Date Created: 2022-04-07
     */
/*
    @Then("^insert customer insight details in \"([^\"]*)\" table having \"([^\"]*)\" insights$")
    public void insertCustomerInsightDetailsInTableHavingInsights(String sheetName, String noOfInsights) throws Throwable {
        int insights = Integer.parseInt(noOfInsights);
        String testId = getTestId();
        for (int i = 1; i <= insights; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                insertCustomerAccountDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                insertCustomerAccountDetailsInTable(sheetName);
            }
        }
    }
*/
    @Then("^insert Multiple customer information details in \"([^\"]*)\" table \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void insertMultipleCustomerInformationDetailsInTableHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setCustDimInputTestDataInformation(custDimInputTestDataInformation);
                insertCustomerIdDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setCustDimInputTestDataInformation(custDimInputTestDataInformation);
                insertCustomerIdDetailsInTable(sheetName);
            }
        }

    }

    @When("^insert customer and account details in \"([^\"]*)\" table$")
    public void insertCustomerAndAccountDetailsInTable(String databaseTable) throws Throwable {
        Database database = new Database();
        String insertQuery = database.queryBuilder(getCustAcctRltnpDimInputTestDataInformation(), databaseTable);
        database.insertData(insertQuery);
    }

    @Then("^insert customer and account details in \"([^\"]*)\" table having \"([^\"]*)\" accounts$")
    public void insertCustomerAndAccountDetailsInTableHavingAccounts(String sheetName, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setCustAcctRltnpDimInputTestDataInformation(custAcctRltnpDimInputTestDataInformation);
                insertCustomerAndAccountDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setCustAcctRltnpDimInputTestDataInformation(custAcctRltnpDimInputTestDataInformation);
                insertCustomerAndAccountDetailsInTable(sheetName);
            }
        }

    }




    @Then("^insert details in \"([^\"]*)\" table without TimeStamp having \"([^\"]*)\" records$")
    public void insertDetailsInTableWithoutTimeStampHavingAccounts(String sheetName, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();

                custInsightsInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setCustInsightsInputTestDataInformation(custInsightsInputTestDataInformation);
                insertCustomerDetailsInTable(sheetName);

//                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
//                setCustAcctRltnpDimInputTestDataInformation(custAcctRltnpDimInputTestDataInformation);
//                insertCustomerAndAccountDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();

                custInsightsInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setCustInsightsInputTestDataInformation(custInsightsInputTestDataInformation);
                insertCustomerDetailsInTable(sheetName);


//                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
//                setCustAcctRltnpDimInputTestDataInformation(custAcctRltnpDimInputTestDataInformation);
//                insertCustomerAndAccountDetailsInTable(sheetName);
            }
        }

    }


    @When("^insert customer in \"([^\"]*)\" table$")
    public void insertCustomerInTable(String databaseTable) {
        Database database = new Database();
        String insertQuery = database.queryBuilder_NoTimestmap(getPurlCustProfileInputTestDataInformation(), databaseTable);
        database.insertData(insertQuery);
    }

    @Then("^insert customer in \"([^\"]*)\" table having \"([^\"]*)\" accounts$")
    public void insertCustomerInTableHavingAccounts(String sheetName, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                Database database = new Database();
                String lastSeqUsed = database.customizeQueryResult("select max(LAST_SEQ_USED+1) from " + getSchema() + ".PURL_CUST_PROFILE");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "LAST_SEQ_USED", lastSeqUsed);

                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                purlCustProfileInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setPurlCustProfileInputTestDataInformation(purlCustProfileInputTestDataInformation);
                insertCustomerInTable(sheetName);
            } else {
                Database database = new Database();
                String lastSeqUsed = database.customizeQueryResult("select max(LAST_SEQ_USED+1) from " + getSchema() + ".PURL_CUST_PROFILE");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "LAST_SEQ_USED", lastSeqUsed);

                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                purlCustProfileInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setPurlCustProfileInputTestDataInformation(purlCustProfileInputTestDataInformation);
                insertCustomerInTable(sheetName);
            }
        }

    }

    @Given("^the user navigates to pega url$")
    public void theUserNavigatesToPegaUrl() {
//        Open Browser
        getBrowser();
//        Maximize window
        maximizeWindow();
        String url = ConfigurationManager.getBundle().getPropertyValue("pega.url");
        launchBaseURL(url);
    }

    @When("^the user enters user name, password and click on login in pega Login screen$")
    public void theUserEntersUserNamePasswordAndClickOnLoginInPegaLoginScreen() throws InterruptedException, IOException {
        //        Logging in  to Page
        Pega7LoginPage pega7LoginPage = new Pega7LoginPage();
        String userName = ConfigurationManager.getBundle().getPropertyValue("pega.username");
        pega7LoginPage.enterUserName(userName);
        String password = ConfigurationManager.getBundle().getPropertyValue("pega.password");
        pega7LoginPage.enterPassword(password);
        pega7LoginPage.clickOnLoginButton();
    }

    @And("^click on D(\\d+)D_EMAIL_Batch link$")
    public void clickOnDD_EMAIL_BatchLink() throws IOException {
        PegaDesignerStudio pegaDesignerStudio = new PegaDesignerStudio();
        pegaDesignerStudio.clickOnD2DEmailBatchLink();
    }

    @And("^click on actions and run in D(\\d+)D_EMAIL_Batch screen$")
    public void clickOnActionsAndRunInDD_EMAIL_BatchScreen() throws IOException {
        D2DEmailBatch d2DEmailBatch = new D2DEmailBatch();
        d2DEmailBatch.clickOnActions();
        d2DEmailBatch.clickOnRunButton();
    }

    @And("^click on run in RunActivity:D(\\d+)D_EMAIL_Batch screen$")
    public void clickOnRunInRunActivityDD_EMAIL_BatchScreen() throws IOException {
        RunActivityD2DEmailBatch runActivityD2DEmailBatch = new RunActivityD2DEmailBatch();
        runActivityD2DEmailBatch.clickOnRunButton();
    }

    @Then("^verify D(\\d+)D_EMAIL_Batch activity ran successful$")
    public void verifyDD_EMAIL_BatchActivityRanSuccessful() {
    }


    @And("^click on interaction History by customer link$")
    public void clickOnInteractionHistoryByCustomerLink() throws IOException {
        PegaDesignerStudio pegaDesignerStudio = new PegaDesignerStudio();
        pegaDesignerStudio.clickOnInteractionByCustomerLink();
    }

    @And("^click on delete interaction History by customer link$")
    public void clickOnDeleteInteractionHistoryByCustomerLink() throws IOException {
        PegaDesignerStudio pegaDesignerStudio = new PegaDesignerStudio();
        pegaDesignerStudio.clickOnFavorites();
        pegaDesignerStudio.clickOnDeleteInteractionByCustomerLink();
    }

    @And("^click on actions and run in delete interactions history By customer screen$")
    public void clickOnActionsAndRunInDeleteInteractionsHistoryByCustomerScreen() throws IOException, InterruptedException {
        PegaDesignerStudio pegaDesignerStudio = new PegaDesignerStudio();
        pegaDesignerStudio.clickOnActionsDeleteInteractionHistory();
        pegaDesignerStudio.clickOnDeleteInteractionHistory();
    }

    @When("^enter seed customer id in run activity delete Interaction history$")
    public void enterSeedCustomerIdInRunActivityDeleteInteractionHistory() throws IOException, InterruptedException {
        // customer id from excel sheet
        String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        DeleteInteractionHistoryByCustomer deleteInteractionHistoryByCustomer = new DeleteInteractionHistoryByCustomer();
        deleteInteractionHistoryByCustomer.enterSubjectId(seedCustomerExcel);
        deleteInteractionHistoryByCustomer.clickOnRunButton();
    }

    @And("^click on actions and run in interactions history By customer screen$")
    public void clickOnActionsAndRunInInteractionsHistoryByCustomerScreen() throws IOException {
        PegaDesignerStudio pegaDesignerStudio = new PegaDesignerStudio();
        pegaDesignerStudio.clickOnActionsInteractionHistory();
        pegaDesignerStudio.clickOnRunInteractionHistory();
    }

    @And("^click on period link and clear today value$")
    public void clickOnPeriodLinkAndClearTodayValue() throws IOException, InterruptedException {
        IHbyCustomer iHbyCustomer = new IHbyCustomer();
        iHbyCustomer.clickOnPeriod();
        iHbyCustomer.clearPeriodValue();
        iHbyCustomer.clickOnApplyChanges();
    }

    @And("^enter customer id in ih by customer screen and get IH table data$")
    public void enterCustomerIdInIhByCustomerScreenAndGetIHTableData() throws IOException, InterruptedException {
        IHbyCustomer iHbyCustomer = new IHbyCustomer();
        iHbyCustomer.clickOnSubjectId();
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        iHbyCustomer.enterSubjectIdField(cid);
        iHbyCustomer.clickOnApplyChanges();
        iHbyCustomer.getIHTableData();

    }

    @Given("^validate offer details against IH$")
    public void validateOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List externalInputFile_LayoutRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".EXTERNAL_INPUT_FILE_LAYOUT where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******EXTERNAL_INPUT_FILE_LAYOUT Database table data******" + convertToJson(externalInputFile_LayoutRowsData));


/*  *** Sujoy/Pavani: Commenting PURL as is it not part of scope any more
        List purlCustRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******PURL CUST PROFILE Database table data******" + convertToJson(purlCustRowsData));
*/
        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }

            // Validating reference Number from Casl Consent Flag sheet against IH
            // Casl consent from cust_dim sheet
            String caslConsntFlag = custDimRowData.get("CASL_CONSENT_F").toString().trim();
            if (caslConsntFlag.equalsIgnoreCase("Y")) {
                caslConsntFlag = "CASL_CONSENT_Y";
            } else if (caslConsntFlag.equalsIgnoreCase("N")) {
                caslConsntFlag = "CASL_CONSENT_N";
                ;
            } else if (!caslConsntFlag.equalsIgnoreCase("Y") || !caslConsntFlag.equalsIgnoreCase("N")) {
                caslConsntFlag = "";
            }
            //  ReferenceNumber from IH
            String caslConsntIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  reference number with Casl Consent flag and IH
            if (caslConsntIh.equals(caslConsntFlag)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + caslConsntIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + caslConsntIh
                                + " and Expected Reference Number:- " + caslConsntFlag);
            }

            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }


    }


    @Then("^verify delete activity ran successfully$")
    public void verifyDeleteActivityRanSuccessfully() throws IOException, InterruptedException {
        delay(8000);
        // customer id from excel sheet
        String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        ActivityStatusSuccess activityStatusSuccess = new ActivityStatusSuccess();
        activityStatusSuccess.verifyStatus(seedCustomerExcel);
    }

    @Then("^verify offer should not display$")
    public void verifyOfferShouldNotDisplay() {

        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

//        List purlCustRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
//        LoggingUtils.log("******PURL CUST PROFILE Database table data******" + convertToJson(purlCustRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        if (ihRecords != null) {
            if (ihRecords.get(0).get("pySubjectID").equals(getCustDimInputTestDataInformation().get("CIS_CUST_ID"))
                    && ihRecords.get(0).get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes"))) {
                LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer should not generate but it showing up in IH - Actual IH Records:- " + ihRecords);
            } else {
                LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
                Assert.assertTrue(true, "Pass--> Offer is not displaying as expected");
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement***** Offer is not generated as expected");
            }

        } else {
            Assert.assertTrue(true, "Pass--> Offer is not displaying as expected");
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement***** Offer is not generated as expected");
        }
    }


    @Then("^verify using IH API that offer is not returned$")
    public void verifyOfferNotReturnedUsingIhAPI() {

        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        if (ihRecords != null) {
            if (ihRecords.get(0).get("pySubjectID").equals(getCustDimInputTestDataInformation().get("CIS_CUST_ID"))
                    && ihRecords.get(0).get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes"))) {
                LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer should not generate but it showing up in IH - Actual IH Records:- " + ihRecords);
            } else {
                LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
                Assert.assertTrue(true, "Pass--> Offer is not displaying as expected");
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement***** Offer is not generated as expected");
            }

        } else {
            Assert.assertTrue(true, "Pass--> Offer is not displaying as expected");
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement***** Offer is not generated as expected");
        }
    }


    //Generic Code for Neg IH Validation with Channel Parameter
    @Then("^verify using IH API that offer is not returned for \"([^\"]*)\" channel$")
    public void verifyOfferNotReturnedForChannelUsingIhAPI(String strChannel) {

        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));

        if (ihRecords != null) {
            if (ihRecords.get(0).get("pySubjectID").equals(getCustDimInputTestDataInformation().get("CIS_CUST_ID"))
                    && ihRecords.get(0).get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes"))
                    && ihRecords.get(0).get("Channel").equalsIgnoreCase(strChannel)) {
                LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer should not generate but it showing up in IH - Actual IH Records:- " + ihRecords);
            } else {
                LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
                Assert.assertTrue(true, "Pass--> Offer is not displaying as expected");
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement***** Offer is not generated as expected");
            }

        } else {
            Assert.assertTrue(true, "Pass--> Offer is not displaying as expected");
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement***** Offer is not generated as expected");
        }
    }


    @And("^write cid and account number into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeCidAndAccountNumberIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String cid = getSeedCustomer();
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                String cid = getSeedCustomer();
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "CIS_CUST_ID", cid);
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "ACCT_NUM", accountNumber);
            }

        }
    }



    @When("^write cid and account number for EMOB into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeCidAndAccountNumberForEMOBIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
                String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);

                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId + "_Account_" + i);
                String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "CIS_CUST_ID", cid);

                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "ACCT_NUM", accountNumber);
            }

        }
    }

    @When("^write cid into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeCidIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String cid = getSeedCustomer();
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
            } else {
                String cid = getSeedCustomer();
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "CIS_CUST_ID", cid);
            }

        }
    }

    @And("^write Event Date \"([^\"]*)\" value into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeEventDateValueIntoSheetForHavingAccounts(String eventDate, String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);

        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                if (!eventDate.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(eventDate));
                    String eventDateValue = returnvalue.toString();
                    setEventDateValue(eventDateValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "EVENT_DATE", getEventDateValue());
                } else if (eventDate.equalsIgnoreCase("NULL")) {
                    setEventDateValue("NULL");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "EVENT_DATE", "NULL");
                }
            } else {
                if (!eventDate.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(eventDate));
                    String eventDateValue = returnvalue.toString();
                    setEventDateValue(eventDateValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "EVENT_DATE", getEventDateValue());
                } else if (eventDate.equalsIgnoreCase("NULL")) {
                    setEventDateValue("NULL");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "EVENT_DATE", "NULL");
                }
            }
        }


    }

    //Multiple Event Dates for Multiple Insights

    /**
     * This function writes different event dates for different insights for same customer into CUST_INSIGHTS SHEET
     * @param eventDate       -  number of days for the first inight
     * @param eventDate2      -  number of days for the second insights
     * @param sheetName       -  Name of the Datasheet or the Table in the Datasheet
     * @param testId          -  Value of the Test ID
     * @param noOfAccounts    - No of insights for the customers
     * @throws Throwable
     */
    @And("^write Different Event Dates \"([^\"]*)\" and \"([^\"]*)\" values into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeDifferentEventDateValuesIntoSheetForHavingAccounts(String eventDate, String eventDate2, String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);

        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                if (!eventDate.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(eventDate));
                    String eventDateValue = returnvalue.toString();
                    setEventDateValue(eventDateValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "EVENT_DATE", getEventDateValue());
                } else if (eventDate.equalsIgnoreCase("NULL")) {
                    setEventDateValue("NULL");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "EVENT_DATE", "NULL");
                }
            } else {
                if (!eventDate2.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(eventDate2));
                    String eventDateValue = returnvalue.toString();
                    setEventDateValue(eventDateValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "EVENT_DATE", getEventDateValue());
                } else if (eventDate2.equalsIgnoreCase("NULL")) {
                    setEventDateValue("NULL");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "EVENT_DATE", "NULL");
                }
            }
        }


    }


    @And("^write Mortgage Funding Date \"([^\"]*)\" value into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeMortgageFundingDateValueIntoSheetForHavingAccounts(String mortFundingDt, String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);

        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                if (!mortFundingDt.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(mortFundingDt));
                    String mortFundingDateValue = returnvalue.toString();
                    setMortFundingDateValue(mortFundingDateValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "MORT_FNDNG_DT", getMortFundingDateValue());
                } else if (mortFundingDt.equalsIgnoreCase("NULL")) {
                    setMortFundingDateValue(mortFundingDateValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "MORT_FNDNG_DT", "NULL");
                }
            } else {
                if (!mortFundingDt.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(mortFundingDt));
                    String mortFundingDateValue = returnvalue.toString();
                    setMortFundingDateValue(mortFundingDateValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "MORT_FNDNG_DT", getMortFundingDateValue());
                } else if (mortFundingDt.equalsIgnoreCase("NULL")) {
                    setMortFundingDateValue(mortFundingDateValue);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "MORT_FNDNG_DT", "NULL");
                }
            }
        }
    }

    /**
     * This function writes CURR_VAL_UPDT_TMSTMP to current system time for any number of insights in CUST_INSIGHTS sheet
     * @param sheetName       - Name of the Datasheet or the Table in the Datasheet
     * @param testId          - Value of Test ID
     * @param noOfAccounts    - number od insights for the test id
     * @throws Throwable
     */
    @Then("^write Current Val Update Timestamp into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeCurrentValUpdateTimestampIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        SimpleDateFormat sdf3 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        System.out.println("TimeStamp is : " + timestamp);
        String currValUpdTmstp = sdf3.format(timestamp);


        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CURR_VAL_UPDT_TMSTMP", currValUpdTmstp);
            } else {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "CURR_VAL_UPDT_TMSTMP", currValUpdTmstp);
            }
        }
    }

    @Then("^write Timestamp in \"([^\"]*)\" field into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeTimestampIntoSheetForHavingAccounts(String strFieldName, String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        SimpleDateFormat sdf3 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        System.out.println("TimeStamp is : " + timestamp);
        String currValUpdTmstp = sdf3.format(timestamp);


        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        strFieldName, currValUpdTmstp);
            } else {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        strFieldName, currValUpdTmstp);
            }
        }
    }


    @When("^write Mortgage twoOneTwo cid and account number into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeMortgageTwoOneTwoCidAndAccountNumberIntoSheetForHavingAccounts(String sheetName, String
            testId, String noOfAccounts) throws Throwable {

        int accounts = Integer.parseInt(noOfAccounts);
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);

                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                if (custAcctRltnpDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UO")) {
                    custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId + "_Account_" + i);
                    String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CIS_CUST_ID", cid);
                    acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                    setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                    String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                } else {
                    String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CIS_CUST_ID", cid);

                    acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
                    setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                    String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                }


            }
        }

    }

    @When("^write Mortgage cid and account number into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeMortgageCidAndAccountNumberIntoSheetForHavingAccounts(String sheetName, String testId, String
            noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);

                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                if (custAcctRltnpDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UO")) {
                    custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId + "_Account_" + (i - 1));
                    String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CIS_CUST_ID", cid);
                    acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                    setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                    String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                } else {
                    String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CIS_CUST_ID", cid);

                    acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
                    setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                    String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                }
            }

        }
    }

    @And("^write purl key into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writePurlKeyIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws
            Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String purl = getAlphaNumericString(12);
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "PURL", purl);
            } else {
                String purl = getAlphaNumericString(12);
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "PURL", purl);
            }
        }
    }


    @And("^write hash key into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeHashKeyIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws
            Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String hashKey = generateHashKey();
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "HASH_KEY", hashKey);
            } else {
                String hashKey = generateHashKey();
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "HASH_KEY", hashKey);
            }
        }
    }

    @When("^read batch file customer information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readBatchFileCustomerInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setCustDimInputTestDataInformation(custDimInputTestDataInformation);
        setTestId(testId);
        System.out.println("CID :-" + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
    }

    @And("^read D(\\d+)D \"([^\"]*)\" extract file customer offer details$")
    public void readDDExtractFileCustomerOfferDetails(int arg0, String arg1) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.d2d.fileName");

        d2dCustomerOfferDetails = new ReadTextFile().readD2DTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setD2dCustomerOfferDetails(d2dCustomerOfferDetails);

        /* **** Debugging by Pavani/Sujoy 2022-03-27 ***/
        //System.out.println("Checking CID: " + cid);
        //System.out.println("Checking FileName: " + batchFileName);
        //System.out.println("Checking d2dCustomerOfferDetails: ");
        //System.out.println(d2dCustomerOfferDetails);

        /* ***** */


        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                d2dCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);

    }

    @And("^read RDC \"([^\"]*)\" extract file customer offer details$")
    public void readRDCExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.rdc.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read EMOB \"([^\"]*)\" extract file customer offer details$")
    public void readEMOBExtractFileCustomerOfferDetails() throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.emob.fileName");
        emobCustomerOfferDetails = new ReadTextFile().readEMOBTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setEmobCustomerOfferDetails(emobCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                emobCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }


    @Then("^validate D(\\d+)D offer details in batch file against database and pega$")
    public void validateDDOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();

        //Updated from d2dRewardLogic to d2dLatestLogic by Sujoy on 2022-03-27
        //d2DChannelLogic.d2dLatestLogic();
        d2DChannelLogic.d2dRewardLogic();

    }

    @Then("^validate RDC offer details in batch file against database and pega$")
    public void validateRDCOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.rdcLogic();
    }

    @Then("^validate NTC offer details in batch file against database and pega$")
    public void validateNTCOfferDetailsInBatchFileAgainstDatabaseAndPega() throws Throwable {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.ntcLogic();
    }

    @Then("^validate D(\\d+)D offer details should not display in batch file$")
    public void validateDDOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.d2dOfferDetailsNotDisplayedInExtract();
    }

    @Then("^validate RDC offer details should not display in batch file$")
    public void validateRDCOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.rdcOfferDetailsNotDisplayedInExtract();
    }

    @Then("^validate EMOB offer details should not display in batch file$")
    public void validateEMOBOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.emobOfferDetailsNotDisplayedInExtract();
    }

    @Given("^write cid into the \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCidIntoTheSheetFor(String sheetName, String testId) throws Throwable {
        String cid = randomNumber(15);
        System.out.println("CID is:- " + cid);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CIS_CUST_ID", cid);
        setSeedCustomer(cid);
    }

    @When("^write cid in the \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCidInTheSheetFor(String sheetName, String testId) throws Throwable {
        String seedCustomer = custDimInputTestDataInformation.get("CIS_CUST_ID");
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CIS_CUST_ID", seedCustomer);

    }

    @Then("^insert clickstream information details in \"([^\"]*)\" table$")
    public void insertClickstreamInformationDetailsInTable(String databaseTable) throws Throwable {
        Database database = new Database();
        String insertQuery = database.queryBuilder_NoTimestmap(getClickStreamInputTestDataInformation(), databaseTable);
        database.insertData(insertQuery);
    }

    @When("^read clickstrem information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readClickstremInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        clickStreamInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setClickStreamInputTestDataInformation(clickStreamInputTestDataInformation);
        setTestId(testId);
    }


    @And("^read customer and account information details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readCustomerAndAccountInformationDetailsFromExcelSheetFor(String sheetName, String testId) throws
            Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setCustAcctRltnpDimInputTestDataInformation(custAcctRltnpDimInputTestDataInformation);
    }


    @When("^write customer id into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCustomerIdIntoSheetFor(String sheetName, String testId) throws Throwable {
        String seedCustomer = custDimInputTestDataInformation.get("CIS_CUST_ID");
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CIS_CUST_ID", seedCustomer);
    }


    @When("^write current CID into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" records$")
    public void writeCurrentCustomerIdIntoSheetForMultipleRecords(String sheetName, String testId, String noOfInsights) throws Throwable {
        int insightCnt = Integer.parseInt(noOfInsights);
        String cid = getSeedCustomer();

        for (int i = 1; i <= insightCnt; i++) {
            if (i == 1) {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
            } else {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "CIS_CUST_ID", cid);
            }

        }
    }




    /**
     * Method to Write Customer Id in Multiple Insights
     * Currently commented as duplicate with writeCidIntoSheetForHavingAccounts() method
     * <p>
     * Date Created: 2022-04-06
     *
     * @param sheetName
     * @param testId
     * @throws Throwable
     */

    @When("^write cid into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" insights$")
    public void writeCustomerIdIntoSheetForMultipleInsights(String sheetName, String testId, String noOfInsights) throws Throwable {
        int insightCnt = Integer.parseInt(noOfInsights);
        String cid = getSeedCustomer();

        for (int i = 1; i <= insightCnt; i++) {
            if (i == 1) {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
            } else {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Insight_" + i,
                        "CIS_CUST_ID", cid);
            }

        }
    }


    @When("^write  Current Val Update Timestamp into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCurrentValUpdateTimestampIntoSheetFor(String sheetName, String testId) throws Throwable {

        SimpleDateFormat sdf3 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        System.out.println("TimeStamp is : " + timestamp);
        String currValUpdTmstp = sdf3.format(timestamp);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CURR_VAL_UPDT_TMSTMP", currValUpdTmstp);

    }


    @And("^write Event Date \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeEventDateValueIntoSheetFor(String eventDate, String sheetName, String testId) throws Throwable {
        if (!eventDate.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(eventDate));
            String eventDateValue = returnvalue.toString();
            setEventDateValue(eventDateValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "EVENT_DATE", getEventDateValue());
        } else if (eventDate.equalsIgnoreCase("NULL")) {
            setEventDateValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "EVENT_DATE", "NULL");
        }

    }


    /**
     * Method to write Event Date into Datasheet for Customer having Multiple Insights
     * Date Created: 2022-04-07
     *
     * @param eventDate
     * @param sheetName
     * @param testId
     * @param noOfInsights
     * @throws Throwable
     */

    @And("^write Event Date \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" insights$")
    public void writeEventDateValueIntoSheetForMultipleInsights(String eventDate, String sheetName, String testId, String noOfInsights) throws Throwable {

        if (eventDate.equalsIgnoreCase("NULL")) {
            setEventDateValue("NULL");
        } else {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(eventDate));
            String eventDateValue = returnvalue.toString();
            setEventDateValue(eventDateValue);
        }

        int insightCnt = Integer.parseInt(noOfInsights);

        for (int i = 1; i <= insightCnt; i++) {
            if (i == 1) {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "EVENT_DATE", getEventDateValue());
            } else {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "EVENT_DATE", getEventDateValue());
            }
        }
    }


    @And("^write Mortgage Funding Date \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeMortgageFundingDateValueIntoSheetFor(String mortFundingDt, String sheetName, String testId) throws Throwable {
        if (!mortFundingDt.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(mortFundingDt));
            String mortFundingDateValue = returnvalue.toString();
            setMortFundingDateValue(mortFundingDateValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MORT_FNDNG_DT", getMortFundingDateValue());
        } else if (mortFundingDt.equalsIgnoreCase("NULL")) {
            setMortFundingDateValue(mortFundingDateValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MORT_FNDNG_DT", "NULL");
        }

    }


    @And("^write account odt into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeAccountOdtIntoSheetFor(String sheetName, String testId) throws Throwable {
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "ACCT_ODT", getAccountOdtValue().replaceAll("-", ""));
    }

    @And("^write account odt into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeAccountOdtIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_ODT", getAccountOdtValue().replaceAll("-", ""));
            } else {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "ACCT_ODT", getAccountOdtValue().replaceAll("-", ""));
            }
        }
    }

    @And("^write BBDWSC_SC_EXPIRY_DATE into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeBBDWSC_SC_EXPIRY_DATEIntoSheetFor(String sheetName, String testId) throws Throwable {
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "BBDWSC_SC_EXPIRY_DATE", getBBDWSC_SC_EXPIRY_DATEValue().replaceAll("-", ""));
    }

    @And("^write purl key into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writePurlKeyIntoSheetFor(String sheetName, String testId) throws Throwable {
        String purl = getAlphaNumericString(12);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "PURL", purl);
    }

    @And("^write hash key into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeHashKeyIntoSheetFor(String sheetName, String testId) throws Throwable {
        String hashKey = generateHashKey();
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "HASH_KEY", hashKey);
    }

    @And("^write last sequence id into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeLastSequenceIdIntoSheetFor(String sheetName, String testId) throws Throwable {
        Database database = new Database();
        String lastSeqUsed = database.customizeQueryResult("select max(LAST_SEQ_USED+1) from " + getSchema() + ".PURL_CUST_PROFILE");
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "LAST_SEQ_USED", lastSeqUsed);
    }

    @And("^write last sequence id into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeLastSequenceIdIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws
            Throwable {

        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                Database database = new Database();
                String lastSeqUsed = database.customizeQueryResult("select max(LAST_SEQ_USED+1) from " + getSchema() + ".PURL_CUST_PROFILE");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "LAST_SEQ_USED", lastSeqUsed);
            } else {
                Database database = new Database();
                String lastSeqUsed = database.customizeQueryResult("select max(LAST_SEQ_USED+1) from " + getSchema() + ".PURL_CUST_PROFILE");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "LAST_SEQ_USED", lastSeqUsed);
            }
        }
    }

    @Then("^validate EMOB offer details in batch file against database and pega$")
    public void validateEMOBOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.emobLogic();
    }


    @Then("^validate Latest EMOB offer details in batch file against database and pega$")
    public void validateLatestEMOBOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.emobTouch21Logic();
    }

    @When("^read customer details from excel sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void readCustomerDetailsFromExcelSheetFor(String sheetName, String testId) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custInsightsInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
        setCustInsightsInputTestDataInformation(custInsightsInputTestDataInformation);
    }

    @Then("^insert customer details in \"([^\"]*)\" table$")
    public void insertCustomerDetailsInTable(String databaseTable) throws Throwable {
        Database database = new Database();
        String insertQuery = database.queryBuilder_NoTimestmap(getCustInsightsInputTestDataInformation(), databaseTable);
        database.insertData(insertQuery);
    }

    @Given("^write BBDWSC_SC_EXPIRY_DATE \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeBBDWSC_SC_EXPIRY_DATEValueIntoSheetFor(String BBDWSC_SC_EXPIRY_DATE, String sheetName, String
            testId) throws Throwable {

        if (!BBDWSC_SC_EXPIRY_DATE.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.plusDays(Integer.parseInt(BBDWSC_SC_EXPIRY_DATE) - 1);
            String BBDWSC_SC_EXPIRY_DATEValue = returnvalue.toString();
            setAccountOdtValue(BBDWSC_SC_EXPIRY_DATEValue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "BBDWSC_SC_EXPIRY_DATE", BBDWSC_SC_EXPIRY_DATEValue);
        } else if (BBDWSC_SC_EXPIRY_DATE.equalsIgnoreCase("NULL")) {
            setBBDWSC_SC_EXPIRY_DATEValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "BBDWSC_SC_EXPIRY_DATE", "NULL");
        }

    }

    @And("^read NTC \"([^\"]*)\" extract file customer offer details$")
    public void readNTCExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.ntc.fileName");
        ntcCustomerOfferDetails = new ReadTextFile().readNTCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setNtcCustomerOfferDetails(ntcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                ntcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @Then("^validate NTC offer details should not display in batch file$")
    public void validateNTCOfferDetailsShouldNotDisplayInBatchFile() throws Throwable {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.ntcOfferDetailsNotDisplayedInExtract();
    }

    @When("^write account number into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts with gics$")
    public void writeAccountNumberIntoSheetForHavingAccountsWithGics(String sheetName, String testId, String
            noOfAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            String accountNumber = null;
            if (i == 1) {
                accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
                if (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UF")) {
                    accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                } else {
                    accountNumber = StringUtils.leftPad(randomNumber(15), 23, "0");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "ACCT_NUM", accountNumber);
                }

            }
        }

    }

    @And("^write \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeIntoSheetFor(String currentValueUpdateTimeStamp, String sheetName, String testId) throws
            Throwable {
        if (!currentValueUpdateTimeStamp.equalsIgnoreCase("NULL")) {
            int increment = Integer.parseInt(currentValueUpdateTimeStamp);
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String date = dateFormat.format(new Date()).toString();
            String timeStamp = new BasePage().incrementDate("yyyy-MM-dd HH:mm:ss", date, increment);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "CURR_VAL_UPDT_TMSTMP", timeStamp);
        } else {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "CURR_VAL_UPDT_TMSTMP", "NULL");
        }


    }

    @And("^write \"([^\"]*)\" for dual accounts into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeForDualAccountsIntoSheetFor(String currentValueUpdateTimeStamp, String sheetName, String
            testId) throws Throwable {
        int increment = Integer.parseInt(currentValueUpdateTimeStamp);
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date = dateFormat.format(new Date()).toString();
        String timeStamp = new BasePage().incrementDate("yyyy-MM-dd HH:mm:ss", date, increment);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_2",
                "CURR_VAL_UPDT_TMSTMP", timeStamp);
    }


    @Then("^insert customer details in \"([^\"]*)\" table having \"([^\"]*)\" accounts$")
    public void insertCustomerDetailsInTableHavingAccounts(String sheetName, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custInsightsInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setCustInsightsInputTestDataInformation(custInsightsInputTestDataInformation);
                Database database = new Database();
                String insertQuery = database.queryBuilder_NoTimestmap(getCustInsightsInputTestDataInformation(), sheetName);
                database.insertData(insertQuery);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custInsightsInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setCustInsightsInputTestDataInformation(custInsightsInputTestDataInformation);
                Database database = new Database();
                String insertQuery = database.queryBuilder_NoTimestmap(getCustInsightsInputTestDataInformation(), sheetName);
                database.insertData(insertQuery);
            }
        }
    }

    @Given("^write same cid into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeSameCidIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws
            Throwable {
        int customers = Integer.parseInt(noOfAccounts);
        setTestId(testId);
        String cid = randomNumber(15);
        for (int i = 1; i <= customers; i++) {

            if (i == 1) {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
            } else {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "CIS_CUST_ID", cid);
            }
        }
    }

    @Then("^validate RDC offer details against IH$")
    public void validateRDCOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List purlCustRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******PURL CUST PROFILE Database table data******" + convertToJson(purlCustRowsData));
        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }


    @And("^set cust account relation cid for cust dim cid$")
    public void setCustAccountRelationCidForCustDimCid() {
        String custRelationShipDimCID = getCustAcctRltnpDimInputTestDataInformation().get("CIS_CUST_ID");
        getCustDimInputTestDataInformation().put("CIS_CUST_ID", custRelationShipDimCID);
        setCustDimInputTestDataInformation(getCustDimInputTestDataInformation());
    }


    @And("^write MATURITY_DATE \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeMATURITY_DATEValueIntoSheetFor(String MAT_DT, String sheetName, String testId) throws
            Throwable {

        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        System.out.print(currentdate);
        String matdate = incrementMonth("yyyy-MM-dd", currentdate, 2);
        System.out.println(matdate);
        String dd_matdate = matdate.substring(8, 10);
        System.out.println(dd_matdate);
        if (dd_matdate.equals(MAT_DT)) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MAT_DT", matdate);
        } else {
            dd_matdate = MAT_DT;
            String maturitydate = matdate.substring(0, 8) + dd_matdate;
            System.out.println(maturitydate);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MAT_DT", maturitydate);
        }


    }

    @When("^write certificate number into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCertificateNumberIntoSheetFor(String sheetName, String testId) throws Throwable {
        // Write code here that turns the phrase above into concrete actions
        String crfc_number = StringUtils.leftPad(getAlphaNumericString(10), 15, "0");
        System.out.println(crfc_number);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "acct_crfc_num", crfc_number);
    }

    @When("^write certificate number into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts with gics$")
    public void writeCertificateNumberIntoSheetForHavingAccountsWithGics(String sheetName, String testId, String
            noOfAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                String crfc_number = StringUtils.leftPad(getAlphaNumericString(10), 15, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "acct_crfc_num", crfc_number);
            } else {
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
                if (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UF")) {
                    String crfc_number = StringUtils.leftPad(getAlphaNumericString(10), 15, "0");
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "acct_crfc_num", crfc_number);
                }

            }
        }

    }


    @And("^write maturity date \"([^\"]*)\" into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts with gics$")
    public void writeMaturityDateIntoSheetForHavingAccountsWithGics(String MAT_DT, String sheetName, String
            testId, String noOfAccounts) throws Throwable {
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        System.out.print(currentdate);
        String matdate = incrementMonth("yyyy-MM-dd", currentdate, 2);
        System.out.println(matdate);
        String dd_matdate = matdate.substring(8, 10);
        System.out.println(dd_matdate);
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);

        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                if (dd_matdate.equals(MAT_DT)) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "MAT_DT", matdate);
                } else {
                    dd_matdate = MAT_DT;
                    String maturitydate = matdate.substring(0, 8) + dd_matdate;
                    System.out.println(maturitydate);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "MAT_DT", maturitydate);
                }
            } else {
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
                if (dd_matdate.equals(MAT_DT)) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "MAT_DT", matdate);
                } else {
                    dd_matdate = MAT_DT;
                    String maturitydate = matdate.substring(0, 8) + dd_matdate;
                    System.out.println(maturitydate);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "MAT_DT", maturitydate);
                }
            }
        }
    }

    @And("^write maturity date \"([^\"]*)\" for dual accounts into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeMaturityDateForDualAccountsIntoSheetFor(String MAT_DT, String sheetName, String testId) throws
            Throwable {
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        System.out.print(currentdate);
        String matdate = incrementMonth("yyyy-MM-dd", currentdate, 2);
        System.out.println(matdate);
        String dd_matdate = matdate.substring(8, 10);
        System.out.println(dd_matdate);
        if (dd_matdate.equals(MAT_DT)) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_2",
                    "MAT_DT", matdate);
        } else {
            dd_matdate = MAT_DT;
            String maturitydate = matdate.substring(0, 8) + dd_matdate;
            System.out.println(maturitydate);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_2",
                    "MAT_DT", maturitydate);
        }

    }


    @And("^write negative MATURITY_DATE \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeNegativeMATURITY_DATEValueIntoSheetFor(String MAT_DT, String sheetName, String testId) throws
            Throwable {
        String maturitydate = " ";
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        System.out.print(currentdate);
        if (maturitydate.equals(MAT_DT)) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MAT_DT", maturitydate);

        } else {
            String matdate = incrementDate("yyyy-MM-dd", currentdate, 25);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "MAT_DT", matdate);

        }
    }

    @And("^write maturity date \"([^\"]*)\" for dual accounts into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" accounts with gics$")
    public void writeMaturityDateForDualAccountsIntoSheetForHavingAccountsWithGics(String MAT_DT, String
            sheetName, String testId, int accounts) throws Throwable {
        // Write code here that turns the phrase above into concrete actions
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        System.out.print(currentdate);
        String matdate = incrementMonth("yyyy-MM-dd", currentdate, 2);
        System.out.println(matdate);
        String dd_matdate = matdate.substring(8, 10);
        System.out.println(dd_matdate);
        for (int i = 2; i <= accounts; i++) {
            acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
            if (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UF")) {
                if (dd_matdate.equals(MAT_DT)) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "MAT_DT", matdate);
                } else {
                    dd_matdate = MAT_DT;
                    String maturitydate = matdate.substring(0, 8) + dd_matdate;
                    System.out.println(maturitydate);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "MAT_DT", maturitydate);

                }

            }


        }

    }

    /**
     * This function writes scotia card number for an AC account with 13 digit in SCD_NUM field in ACCT_DIM sheet for a customer have multiple accounts single AC account
     * @param sheetName   - Name of the Datasheet or the Table in the Datasheet
     * @param testId      - Value of testID
     * @param noOfAccounts  - number of accounts present for the testID
     * @throws Throwable
     */
    @And("^write Scotia card Number into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeScotiaCardNumberIntoSheetForHavingAccounts(String sheetName, String testId, String
            noOfAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        int accounts = Integer.parseInt(noOfAccounts);
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
        for (int i = 2; i <= accounts; i++) {
            acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
            if (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("AC")) {
//                String scd_num =  randomNumber(13);
                String scd_num = "600" + randomNumber(10);
                System.out.println("Scotia Card Number is :- " + scd_num);
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "SCD_NUM", scd_num);

            }

        }

    }

    /**
     * Write Credit Card Number
     *
     * @param sheetName
     * @param testId
     * @param noOfAccounts
     * @throws Throwable
     */

    @And("^write Credit Card Number into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeCreditCardNumberIntoSheetForHavingAccounts(String sheetName, String testId, String
            noOfAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        int accounts = Integer.parseInt(noOfAccounts);
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                if (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("KS")) {
                    String cc_num = randomNumber(16);
                    System.out.println("Credit Card Number is :- " + cc_num);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "CR_CRD_NUM", cc_num);
                }
            } else {
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i);
                if (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("KS")) {
                    String cc_num = randomNumber(16);
                    System.out.println("Credit Card Number is :- " + cc_num);
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            "CR_CRD_NUM", cc_num);
                }


            }

        }

    }


    @And("^read gic email \"([^\"]*)\" extract file customer offer details$")
    public void readGicEmailExtractFileCustomerOfferDetails() throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = getFileDeliveryDate() + ConfigurationManager.getBundle().getPropertyValue("batchfile.email.gic.fileName");
        gicEmailCustomerOfferDetails = new ReadTextFile().readGicEmailTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setGicEmailCustomerOfferDetails(gicEmailCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                gicEmailCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @Then("^validate gic offer details in batch file against database and pega$")
    public void validateGicOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.gicEmailLogic();
    }

    @Then("^validate GIC email offer details should not display in batch file$")
    public void validateGICEmailOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.gicOfferDetailsNotDisplayedInExtract();
    }

    @And("^get ddr records data from ddr table$")
    public void getDdrRecordsDataFromDdrTable() throws IOException, InterruptedException {
        if (getDdrRecords() == null) {
//                Click on APP Studio
            PegaDesignerStudio pegaDesignerStudio = new PegaDesignerStudio();
            pegaDesignerStudio.clickOnAPPStudio();

            APPStudio appStudio = new APPStudio();
            appStudio.clickOnDataButton();
            appStudio.clickOnDataModel();
            appStudio.clickOnOutBoundScheduler();
            appStudio.clickOnOpenLink();
            appStudio.clickOnRecordsTab();
            ddrRecords = appStudio.getDDRRecords();
            setDdrRecords(ddrRecords);
            pegaDesignerStudio.clickOnDevStudio();
        }
    }

    @And("^get mail Id from ddr records$")
    public void getMailIdFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String crfcNumber = getAcctDimInputTestDataInformation().get("ACCT_CRFC_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(0, 4);
        new APPStudio().getMailId(ddrRecords, month, year, campaignCode, "inbox_file");

    }

    @And("^get gic wave expiry date from ddr records$")
    public void getGicWaveExpiryDateFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String crfcNumber = getAcctDimInputTestDataInformation().get("ACCT_CRFC_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(0, 4);
        new APPStudio().getWaveExpiryDate(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @And("^get gic file delivery date from ddr records$")
    public void getGicFileDeliveryDateFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String crfcNumber = getAcctDimInputTestDataInformation().get("ACCT_CRFC_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(0, 4);
        new APPStudio().getFileDeliveryDate(ddrRecords, month, year, campaignCode, "inbox_file");

    }

    @And("^get gic wave start date from ddr records$")
    public void getGicWaveStartDateFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String crfcNumber = getAcctDimInputTestDataInformation().get("ACCT_CRFC_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(0, 4);
        new APPStudio().getWaveStartDate(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @And("^get gic campaign wave number from ddr records$")
    public void getGicCampaignWaveNumberFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String crfcNumber = getAcctDimInputTestDataInformation().get("ACCT_CRFC_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(0, 4);
        new APPStudio().getCampaignNumber(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @Then("^validate gic email offer details against IH$")
    public void validateGicEmailOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        List<Map<String, Object>> dataBaseTablesData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM A INNER JOIN EDPPEGAT.CUST_ACCT_RLTNP_DIM B ON A.CIS_CUST_ID = B.CIS_CUST_ID"
                + " INNER JOIN EDPPEGAT.ACCT_DIM C ON B.ACCT_NUM = C.ACCT_NUM where A.CIS_CUST_ID IN('" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "')");


        LoggingUtils.log("******Database table data******" + dataBaseTablesData);
        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead start date from DDR-Wave Start date against IH
            String waveStartDateDDR = getWaveStartDate().replace("-", "");
            //  Offer Start date from IH
            String waveStartDateIh = ihRecords.get(0).get("Lead Start Date");
            //  Verifying Wave start date with DDR and IH
            if (waveStartDateIh.equals(waveStartDateDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead start date is displayed as expected - Lead start date:-" + waveStartDateDDR);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead start date is not displayed as expected - Actual Lead Start date:- " + waveStartDateDDR
                                + " and Expected Lead start date:- " + waveStartDateIh);
            }

            // Validating Lead end date from DDR-Wave end date against IH
            String waveExpiryDateDDR = getWaveExpiryDate().replace("-", "");
            //  Offer Start date from IH
            String waveEndDateIh = ihRecords.get(0).get("Lead End Date");
            //  Verifying Wave start date with DDR and IH
            if (waveEndDateIh.equals(waveExpiryDateDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead end date is displayed as expected - Lead end date:-" + waveExpiryDateDDR);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead end date is not displayed as expected - Actual Lead end date:- " + waveExpiryDateDDR
                                + " and Expected Lead end date:- " + waveStartDateIh);
            }

            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_CRFC_NUM");
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }

          /*  // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }*/

            // Validating Reference number against DDR(Offer Expiry date) and IH
//            Reference Number from DDR table.
            String referenceNumberDDR = getWaveExpiryDate().replace("-", "");
            //  Reference Number from IH
            String referenceNumberIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  Reference Number with hard coded and IH
            if (referenceNumberIh.equals(referenceNumberDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + referenceNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + referenceNumberIh
                                + " and Expected Reference Number:- " + referenceNumberDDR);
            }


            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "N");
            }

            // Validating Offer Instance id from segmentation against IH
            //Offer Instance id from segmentation
            String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String crfcNumber = getAcctDimInputTestDataInformation().get("ACCT_CRFC_NUM");
            String maturityDate_Database = new Database().readRow("SELECT MAT_DT FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_CRFC_NUM='" + crfcNumber + "'").get("MAT_DT").toString().substring(8, 10);
            String offerInstanceId = new D2DChannelLogic().getGICOIILogic(maturityDate_Database);
            String campaignWaveNumber = getCampaignWaveNumber();
            String oiiSegmentation = offerInstanceId + campaignWaveNumber;

            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(oiiSegmentation)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + oiiSegmentation);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }


    }


    @Then("^insert Multiple customer information details in \"([^\"]*)\" table having \"([^\"]*)\" accounts$")
    public void insertMultipleCustomerInformationDetailsInTableHavingAccounts(String sheetName, String noOfCustomers) throws Throwable {
        int accounts = Integer.parseInt(noOfCustomers);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setCustDimInputTestDataInformation(custDimInputTestDataInformation);
                insertCustomerIdDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Account_" + i);
                setCustDimInputTestDataInformation(custDimInputTestDataInformation);
                insertCustomerIdDetailsInTable(sheetName);
            }
        }

    }


    @And("^write CHILD_TAX_BENEFIT_START_DATE \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCHILD_TAX_BENEFIT_START_DATEIntoSheetFor(String taxStartDate, String sheetName, String testId) throws
            Throwable {
        // Write code here that turns the phrase above into concrete actions
        String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
        LocalDate date = LocalDate.parse(todayDate);
        LocalDate returnvalue = date.minusDays(Integer.parseInt(taxStartDate) - 1);
        String taxDate = returnvalue.toString();
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CHILD_TAX_BENEFIT_START_DATE", taxDate);

    }

    @Then("^validate CrossSell offer details in batch file against database and pega$")
    public void validateCrossSellOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.mpsaCrossSellLogic();
    }

    @Then("^validate Travel Insurance offer details in batch file against database and pega$")
    public void validateTravelInsuranceOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.TravelInsuranceLogic();
    }


    @Then("^validate D2D Payment Methods details in batch file against database and pega$")
    public void validateD2DPaymentMethodsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.D2DPaymentMethodsLogic();
    }

    @Then("^validate Early Tenure Indirect Mtg Leads Email offer details in batch File against database and pega$")
    public void validateEarlyTenureIndirectMtgLeadsEmailOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.earlyTenureIndirectMtgEmailLogic();

    }

    @Then("^validate  NTC Mortgage Acquisition offer details in batch file against database and pega$")
    public void validateNTCMortgageAcquisitionOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.NTCMortgageAcquisitionLogic();
    }


    @Then("^validate SupplementaryCard offer details in batch file against database and pega$")
    public void validateSupplementaryCardOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.supplementaryCardcrossSellLogic();
    }

    @And("^read RRSP CrossSell \"([^\"]*)\" extract file customer offer details$")
    public void readRRSPCrossSellExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.rrspcrosssell.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @Then("^validate CrossSell offer details should not display in batch file$")
    public void validateCrossSellOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.crossSellOfferDetailsNotDisplayedInExtract();
    }

    @Then("^validate Supplementary CrossSell offer details should not display in batch file$")
    public void validateSupplementaryCrossSellOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.supplementaryCrossSellOfferDetailsNotDisplayedInExtract();
    }

    @Then("^validate SuppCard Offer Details Against IH$")
    public void validateSuppCardOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("EML")).collect(Collectors.toList());
        }

        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating seed customer Cell Group against IH
            // Cell Group from excel sheet
            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  seed customer from excel sheet
            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
            //  Verifying seed customer with Excel and IH
            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }

    @Then("^validate Indirect Mtg Email offer details against IH$")
    public void validateIndirectMtgEmailOfferDetailsAgainstIH() {
        String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


// Zone code check is not required for Scheduled Campaigns, Since der is no value populated in the IH for these campaigns. CLI, PA, MA and this campaign
            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
//            String zoneCodeHardCoded = "REB";
//            //  Zone code from IH
//            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
//            //  Verifying  Zone code with hard coded and IH
//            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
//            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            //  Account Number from IH
//            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
//            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
//                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
//            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String IHAccNum = "";

            if (accountNumberAcctDimSheet.length() > 13) {
                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);

            }
//            Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
//            Verifying Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(IHAccNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + IHAccNum);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^validate Mpsa CrossSell offer details against IH$")
    public void validateMpsaCrossSellOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }


            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }


    /**
     * Validate IH Records for Travel Insurance Offer
     * Date Created: 2022-04-06
     */
    @Then("^validate Travel Insurance offer details against IH$")
    public void validateTravelInsuranceOfferDetailsAgainstIH() {

        //Fetching Test Case Related Data From onPrem Database
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
        String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
        // Fetching IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Proposition name").equals(offerCode)).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from IH Record
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //  Validating Issue from propsition against IH
            //  Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from Proposition Sheet against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating pyName from Proposition against IH
            //pyName from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from CUST_DIM Datasheet
            //Sujoy: Change the variable name from creativeIdProposition to creativeIdDatasheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Operator is hard coded
            String operatorProposition = "";
            //  Fetching Operator from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Operator with hard coded and IH
            //  Verifying that Operator field in IH has some value
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Code from Proposition against Offer Instance id of IH
            //Offer Code from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }


            // Validating cellGroup  from Datasheet against IH
            //cell Group from CUST_DIM Datasheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with Datasheet and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CellGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }

    /**
     * Validate IH Records for D2D Payment methods Offer
     * Date Created: 2022-04-06
     */

    @Then("^validate D2D Payment Methods offer details against IH$")
    public void validateD2DPaymentMethodsOfferDetailsAgainstIH() {

        //Fetching Test Case Related Data From onPrem Database
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // Fetching IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from IH Record
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from proposition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from Proposition Sheet against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating pyName from Proposition against IH
            //pyName from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from CUST_DIM Datasheet
            //Sujoy: Change the variable name from creativeIdProposition to creativeIdDatasheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Operator is hard coded
            String operatorProposition = "";
            //  Fetching Operator from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Operator with hard coded and IH
            //  Verifying that Operator field in IH has some value
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Code from Proposition against Offer Instance id of IH
            //Offer Code from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }


            // Validating cellGroup  from Datasheet against IH
            //cell Group from CUST_DIM Datasheet
//            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();
//
//            //  Cell Group from IH
//            String cellGroupIh = ihRecords.get(0).get("Cell Group");
//            //  Verifying  cell Group with Datasheet and IH
//            if (cellGroupIh.equals(cellGroupProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Cell Group is displayed as expected - CellGroup:-" + cellGroupIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
//                                + " and Expected Cell Group:- " + cellGroupProposition);
//            }
            // Validating reference Number from Casl Consent Flag from DB against IH
            // Casl consent from Database Cust_Dim
            String caslConsntFlag = custDimRowData.get("CASL_CONSENT_F").toString().trim();
            if (caslConsntFlag.equalsIgnoreCase("Y")) {
                caslConsntFlag = "CASL_CONSENT_Y";
            } else if (caslConsntFlag.equalsIgnoreCase("N")) {
                caslConsntFlag = "CASL_CONSENT_N";
                ;
            } else {
                caslConsntFlag = "";
            }
            //  ReferenceNumber from IH
            String caslConsntIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  reference number with Casl Consent flag and IH
            if (caslConsntIh.equals(caslConsntFlag)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + caslConsntIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + caslConsntIh
                                + " and Expected Reference Number:- " + caslConsntFlag);
            }
            // Validating Account Number from cust Dim sheet against IH
            // Account number from cust_Dim sheet
//            String accountNumberCustDimSheet = getCustDimInputTestDataInformation().get("AccountNumber").trim();
            String accountNumberCustDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM").trim();
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number").trim();

            //  Verifying  Account number with CUST_Dim sheet and IH
            if (accountNumberIh.length() == 23 && accountNumberCustDimSheet.contains(accountNumberIh)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberCustDimSheet);
            }
            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }

    @Then("^validate CrossSell offer details against IH$")
    public void validateCrossSellOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }

    @And("^read RESP Contribution Fund \"([^\"]*)\" extract file customer offer details$")
    public void readRESPContributionFundExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.respcontributionfunds.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read RESP CrossSell \"([^\"]*)\" extract file customer offer details$")
    public void readRESPCrossSellExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.respcrosssell.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read TFSA CrossSell \"([^\"]*)\" extract file customer offer details$")
    public void readTFSACrossSellExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.tfsacrosssell.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read MPSA Contribution Funds \"([^\"]*)\" extract file customer offer details$")
    public void readMPSAContributionFundsExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.mpsacontributionfunds.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read MPSA CrossSell \"([^\"]*)\" extract file customer offer details$")
    public void readMPSACrossSellExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.mpsacrosssell.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    /**
     * Method to Read the Batch File for Travel Insurance
     *
     * @param arg0
     * @throws Throwable
     */

    @And("^read Travel Insurance \"([^\"]*)\" extract file customer offer details$")
    public void readTravelInsuranceExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.TravelInsurance.fileName");
        TravelInsuranceCustomerOfferDetails = new ReadTextFile().readTravelInsuranceTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setTravelInsuranceCustomerOfferDetails(TravelInsuranceCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                TravelInsuranceCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    public String getBatchFileName(String fileName) {
        String fileValue = null;
        List<String> fileNames = new LinkedList<>();
        File fileFolder = new File(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles");
        File[] listOfFiles = fileFolder.listFiles();

        for (File file : listOfFiles) {
            if (file.getName().contains(fileName)) {
                fileValue = file.getName();
                break;
            }
        }
        return fileValue;
    }

    @And("^read \"([^\"]*)\" extract file with batch \"([^\"]*)\" Email Specific Text Header$")
    public void readExtractFile(String fileName, String EmailSpecificTextHeader) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Properties batchFileProperties = loadPropertiesFile(System.getProperty("user.dir") + "/resources/batchFile.properties");
        String file = (String) batchFileProperties.get("batchfile." + fileName + ".fileName");
        String batchFileName = getBatchFileName(file);
        String standardHeader = "CustomerID;EmailAddress;IndividualTitle;IndividualFirstName;IndividualLastName;LanguageCode;OfferExpirydate;OfferID;CampaignCode;CreativeID;PegaInteractionID;PegaResponsetrackingCode;MailID;";
        String headerValues = standardHeader + EmailSpecificTextHeader + "PrefColumn";
        batchFileCustomerOfferDetails = new ReadTextFile().readGenericTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid, headerValues);
        setBatchFileCustomerOfferDetails(batchFileCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                batchFileCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }


    @And("^read Early Tenure Indirect Mtg Leads \"([^\"]*)\" extract file customer offer details$")
    public void readEarlyTenureIndirectMtgLeadsExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.IndirectMtgEmail.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read SupplementaryCard CrossSell \"([^\"]*)\" extract file customer offer details$")
    public void readSupplementaryCardCrossSellExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.supplementaryCard.fileName");
        supplCardCustomerOfferDetails = new ReadTextFile().readSupplemenatryCardTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setSupplCardCustomerOfferDetails(supplCardCustomerOfferDetails);

        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                supplCardCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);


    }

    @And("^read RRSP Fund \"([^\"]*)\" extract file customer offer details$")
    public void readRRSPFundExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.rrspfund.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read TFSA Fund \"([^\"]*)\" extract file customer offer details$")
    public void readTFSAFundExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.tfsafund.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read D(\\d+)D \"([^\"]*)\" extract file with Preference customer offer details$")
    public void readDDExtractFileWithPreferenceCustomerOfferDetails(int arg0, String arg1) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.d2d.fileName");

        d2dLatestCustomerOfferDetails = new ReadTextFile().readD2DLatestFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setD2dLatestCustomerOfferDetails(d2dLatestCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                d2dLatestCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read D(\\d+)D \"([^\"]*)\" Latest extract file customer offer details$")
    public void readDDLatestExtractFileCustomerOfferDetails(int arg0, String arg1) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.d2d.fileName");
        d2dLatestCustomerOfferDetails = new ReadTextFile().readD2DLatestFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setD2dLatestCustomerOfferDetails(d2dLatestCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                d2dLatestCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @Then("^validate D(\\d+)D Latest offer details in batch file against database and pega$")
    public void validateDDLatestOfferDetailsInBatchFileAgainstDatabaseAndPega(int arg0) {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.d2dLatestLogic();
    }

    @Then("^validate D(\\d+)D Latest offer details should not display in batch file$")
    public void validateDDLatestOfferDetailsShouldNotDisplayInBatchFile(int arg0) {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.d2dLatestOfferDetailsNotDisplayedInExtract();
    }

    /**
     * This function writes scotia card number with 13 digit in SCD_NUM field in ACCT_DIM sheet for a customer having single AC account
     * @param sheetName - Name of the Datasheet or the Table in the Datasheet
     * @param testId   - Value of testID
     * @throws Throwable
     */
    @When("^write Scotia Card number into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeScotiaCardNumberIntoSheetFor(String sheetName, String testId) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
        if (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("AC")) {

            String scd_num = randomNumber(13);
            System.out.println("Scotia Card Number is :- " + scd_num);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "SCD_NUM", scd_num);

        }

    }

    @Then("^validate D(\\d+)D reward offer details in batch file against database and pega$")
    public void validateDDRewardOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.d2dRewardLogic();

    }

    /**
     * This function writes value of PRIMARY_PREAPPROVED_START_DATE in given datasheeet as current month (mm) and date (dd) as given
     * @param preapprovedstdate - dd value required for the pre approved start date
     * @param sheetName     - Name of the Datasheet or the Table in the Datasheet
     * @param testId       - Value of testID
     * @throws Throwable
     */
    @When("^write startdate\"([^\"]*)\" into \"([^\"]*)\" PACC sheet for \"([^\"]*)\"$")
    public void writeStartdateIntoPACCSheetFor(String preapprovedstdate, String sheetName, String testId) throws
            Throwable {
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        String preapprovedstartdate = currentdate.substring(0, 8).concat(preapprovedstdate);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "PRIMARY_PREAPPROVED_START_DATE", preapprovedstartdate);
    }

    /**
     *This function writes value of PRIMARY_PREAPPROVED_END_DATE in given datasheet with increment of current month (mm) with 1 month and value of date (dd) as given
     * @param preapprovededdate - dd value required for the pre approved start date
     * @param sheetName     - Name of the Datasheet or the Table in the Datasheet
     * @param testId        - Value of testID
     * @throws Throwable
     */
    @When("^write enddate\"([^\"]*)\" into \"([^\"]*)\" PACC sheet for \"([^\"]*)\"$")
    public void writeEnddateIntoPACCSheetFor(String preapprovededdate, String sheetName, String testId) throws
            Throwable {
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        String preapprovedenddate = incrementMonth("yyyy-MM-dd", currentdate, 1);
        String paccenddate = preapprovedenddate.substring(0, 8).concat(preapprovededdate);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "PRIMARY_PREAPPROVED_END_DATE", paccenddate);


    }

    @When("^write startdate greaterthan\"([^\"]*)\" into \"([^\"]*)\" PACC sheet for \"([^\"]*)\"$")
    public void writeStartdateGreaterthanIntoPACCSheetFor(int preapprovedstdate, String sheetName, String testId) throws
            Throwable {
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        String preapprovedstartdate = incrementDate("yyyy-MM-dd", currentdate, preapprovedstdate);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "PRIMARY_PREAPPROVED_START_DATE", preapprovedstartdate);

    }

    @When("^write enddate lessthan\"([^\"]*)\" into \"([^\"]*)\" PACC sheet for \"([^\"]*)\"$")
    public void writeEnddateLessthanIntoPACCSheetFor(int preapprovededdate, String sheetName, String testId) throws
            Throwable {
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        String preapprovedenddate = incrementDate("yyyy-MM-dd", currentdate, preapprovededdate);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "PRIMARY_PREAPPROVED_END_DATE", preapprovedenddate);

    }

    /**
     * This function writes value of CLI_OFR_ST_DT in given datasheet as current month (mm) and date (dd) as given
     *
     * @param clistdate - dd value required for the given
     * @param sheetName - Name of the Datasheet or the Table in the Datasheet
     * @param testId    - Value of Test ID
     * @throws Throwable
     */
    @When("^write startdate\"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeStartdateIntoSheetFor(String clistdate, String sheetName, String testId) throws Throwable {
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        String clistartdate = currentdate.substring(0, 8).concat(clistdate);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CLI_OFR_ST_DT", clistartdate);
    }

    /**
     * This function writes value of CLI_OFR_END_DT in given datasheet with increment of current month (mm) with 2 months and date (dd) as given
     * @param clienddate - dd value required for the given
     * @param sheetName - Name of the Datasheet or the Table in the Datasheet
     * @param testId    - Value of Test ID
     * @throws Throwable
     */
    @When("^write enddate\"([^\"]*)\" into \"([^\"]*)\"  sheet for \"([^\"]*)\"$")
    public void writeEnddateIntoSheetFor(String clienddate, String sheetName, String testId) throws Throwable {
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        String cliofrenddate = incrementMonth("yyyy-MM-dd", currentdate, 2);
        String cliofrexpdate = cliofrenddate.substring(0, 8).concat(clienddate);
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CLI_OFR_EXP_DT", cliofrexpdate);
    }

    @When("^write CLI account number into \"([^\"]*)\" sheet for \"([^\"]*)\" having (\\d+) accounts$")
    public void writeCLIAccountNumberIntoSheetForHavingAccounts(String sheetName, String testId, String
            noOfAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            String accountNumber = null;
            if (i == 1) {
                accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                accountNumber = StringUtils.leftPad(randomNumber(15), 23, "0");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_AC",
                        "ACCT_NUM", accountNumber);
            }
        }

    }

    @Then("^insert CLI customer account details in \"([^\"]*)\" table having \"([^\"]*)\" accounts$")
    public void insertCLICustomerAccountDetailsInTableHavingAccounts(String sheetName, String noOfAccounts) throws
            Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        String testId = getTestId();
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                insertCustomerAccountDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_AC");
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                insertCustomerAccountDetailsInTable(sheetName);
            }
        }
    }

    @When("^write CLI cid and account number into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeCLICidAndAccountNumberIntoSheetForHavingAccounts(String sheetName, String testId, String
            noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String cid = getSeedCustomer();
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                String cid = getSeedCustomer();
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_AC",
                        "CIS_CUST_ID", cid);
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_AC");
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_AC",
                        "ACCT_NUM", accountNumber);
            }

        }

    }

    @Then("^insert CLI customer and account details in \"([^\"]*)\" table having \"([^\"]*)\" accounts$")
    public void insertCLICustomerAndAccountDetailsInTableHavingAccounts(String sheetName, String noOfAccounts) throws
            Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setCustAcctRltnpDimInputTestDataInformation(custAcctRltnpDimInputTestDataInformation);
                insertCustomerAndAccountDetailsInTable(sheetName);
            } else {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custAcctRltnpDimInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_AC");
                setCustAcctRltnpDimInputTestDataInformation(custAcctRltnpDimInputTestDataInformation);
                insertCustomerAndAccountDetailsInTable(sheetName);
            }
        }

    }

    @And("^write Event data \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeEventDataIntoSheetFor(String eventDt, String sheetName, String testId) throws Throwable {
        if (!eventDt.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.plusDays(Integer.parseInt(eventDt));
            String eventdtvalue = returnvalue.toString();
            setEventDtValue(eventdtvalue);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "EVENT_DATE", eventdtvalue);
        } else if (eventDt.equalsIgnoreCase("NULL")) {
            setAccountOdtValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "EVENT_DATE", "NULL");
        }
    }

    @And("^read NTCMortgageAcquisition \"([^\"]*)\" extract file with Preference customer offer details$")
    public void readNTCMortgageAcquisitionExtractFileWithPreferenceCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.NTCMA.fileName");
        latestCustomerOfferDetails = new ReadTextFile().readLatestBatchFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setLatestCustomerOfferDetails(latestCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                latestCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read Bill Payment Txn \"([^\"]*)\" extract file with Preference customer offer details$")
    public void readBillPaymentTxnExtractFileWithPreferenceCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.BPTXN.fileName");
        latestCustomerOfferDetails = new ReadTextFile().readLatestBatchFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setLatestCustomerOfferDetails(latestCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                latestCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^read NTC Credit History \"([^\"]*)\" extract file with Preference customer offer details$")
    public void readNTCCreditHistoryExtractFileWithPreferenceCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.NTCCreditHist.fileName");
        latestCustomerOfferDetails = new ReadTextFile().readLatestBatchFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setLatestCustomerOfferDetails(latestCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                latestCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);

    }


    @And("^read ODP Right Sizing \"([^\"]*)\" extract file with Preference customer offer details$")
    public void readODPRightSizingExtractFileWithPreferenceCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.ODPRightSize.fileName");
        latestCustomerOfferDetails = new ReadTextFile().readODPRightSizingBatchFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setLatestCustomerOfferDetails(latestCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                latestCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }


    @Then("^validate the latest campaign offer details in batch file against database and pega$")
    public void validateTheLatestCampaignOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.bpTxnMigrationLogic();
    }


    @Then("^validate the ODP Right Sizing offer details in batch file against database and pega$")
    public void validateTheODPRightSizingOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.odpRightSizingLogic();
    }

    @Then("^validate the latest offer details should not display in batch file$")
    public void validateTheLatestOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.latestOfferDetailsNotDisplayedInExtract();

    }

    @Then("^validate latest offer details against IH$")
    public void validateLatestOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));
        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

//            // Validating Account Number from Account Dim sheet against IH
//            // Account number from Acct_Dim sheet
//            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
//            //  Account Number from IH
//            String accountNumberIh = ihRecords.get(0).get("Account Number");
//            //  Verifying  Account number with Acct_Dim sheet and IH
//            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
//                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
//            }

            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @And("^read Visa Debit Acq \"([^\"]*)\" extract file with Preference customer offer details$")
    public void readVisaDebitAcqExtractFileWithPreferenceCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.VisaDebitAcq.fileName");
        latestCustomerOfferDetails = new ReadTextFile().readLatestBatchFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setLatestCustomerOfferDetails(latestCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                latestCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }


    @When("^write dual same account number into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" insights$")
    public void writeDualSameAccountNumberIntoSheetForHavingInsights(String sheetName, String testId, String
            noOfAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            String accountNumber = StringUtils.leftPad(custDimInputTestDataInformation.get("CIS_CUST_ID"), 23, "0");
            if (i == 1) {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "ACCT_NUM", accountNumber);
            }
        }
    }


    @And("^write Dual account odt \"([^\"]*)\"\"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeDualAccountOdtValueIntoSheetForHavingAccounts(String accountODT, String DualAcctODT, String
            sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                readAccountInformationDetailsFromExcelSheetFor(sheetName, testId);
                writeAccountOdtExcludingTodayValueIntoSheetFor(accountODT, sheetName, testId);
            } else {
                readAccountInformationDetailsFromExcelSheetFor(sheetName, testId + "_Account_" + i);
                writeAccountOdtExcludingTodayValueIntoSheetFor(DualAcctODT, sheetName, testId + "_Account_" + i);
            }
        }

    }

    @And("^read Creditor Insurance \"([^\"]*)\" extract file with Preference customer offer details$")
    public void readCreditorInsuranceExtractFileWithPreferenceCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.CIEmail.fileName");
        creditorinsuranceCustomerOfferDetails = new ReadTextFile().readCreditorInsuranceBatchFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setCreditorinsuranceCustomerOfferDetails(creditorinsuranceCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                creditorinsuranceCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);

    }

    @Then("^validate the creditor insurance offer details in batch file against database and pega$")
    public void validateTheCreditorInsuranceOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.creditorInsuranceLogic();

    }

    @Then("^validate the Creditor Insurance offer details should not display in batch file$")
    public void validateTheCreditorInsuranceOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.creditorInsuranceOfferDetailsNotDisplayedInExtract();
    }

    @Then("^validate Creditor Insurance Retargeting offer details against IH$")
    public void validateCreditorInsuranceRetargetingOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List purlCustRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******PURL CUST PROFILE Database table data******" + convertToJson(purlCustRowsData));
        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String IHAccNum = "";

            if (accountNumberAcctDimSheet.length() > 13) {
                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);

            }
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(IHAccNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + IHAccNum);
            }

            // Validating Reference_num (YYYYMMDD)
            // Reference_num (YYYYMMDD):log cell start date ( current date+2_ for optima channel ; log lead start date for other channel

            //Retrieving the Lead Start Date from the IH
            String leadStartDateIh = ihRecords.get(0).get("Lead Start Date");
            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Lead Start Date
            if (referenceNumIh.equals(leadStartDateIh)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + leadStartDateIh);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
//            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
//            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
//            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
//            String operatorProposition = "";
            //  Treatment Id from IH
//            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
//            if (!operatorIh.equals(operatorProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Operator is empty/Null - Operator:- " + operatorIh);
//            }

            // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "Arbitration";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }

            // Validating CellGroup (Cell Group) from Proposition against IH
            //CellGroup from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  Cell Group with hard coded and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - Cell Group:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Cell Group is not displayed as expected - Actual Cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }
//Added by Pavani for creditor insurance release MAy 11th 2023 for Tenured segment
@Then("^validate Creditor Insurance offer details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateCreditorInsuranceInitialOfferDetailsAgainstIH(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        // IH Records from PEGA
//        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Outcome").equals(strOutcome)).collect(Collectors.toList());
    List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
    if(ihRecords != null){
        ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
    }

        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());


//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is passed as a parameter to the function
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from parameter against IH
            // Channel is passed as a parameter to the function
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Outcome from parameter against IH
            // Outcome is passed as a parameter to the function
            String outComeHardCoded = strOutcome;
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

			  // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String IHAccNum = "";

            if (accountNumberAcctDimSheet.length() > 13) {
                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);

            }
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(IHAccNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + IHAccNum);
            }

            // Validating Reference_num (YYYYMMDD)
            // Reference_num (YYYYMMDD):log cell start date ( current date+2_ for optima channel ; log lead start date for other channel

            String strExpectedRefNum = null;

            if(strChannelCode.equals("OPM")){
                String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                LocalDate date = LocalDate.parse(todayDate);
                LocalDate returnvalue = date.plusDays(2);

                strExpectedRefNum = returnvalue.format(DateTimeFormatter.ofPattern("yyyyMMdd"));
            }else {

                //Retrieving the Lead Start Date from the IH
                strExpectedRefNum = ihRecords.get(0).get("Lead Start Date");
            }

            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Lead Start Date
            if (referenceNumIh.equals(strExpectedRefNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + strExpectedRefNum);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
//           String zoneCodeHardCoded = "REB";
//            //  Zone code from IH
//            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
//            //  Verifying  Zone code with hard coded and IH
//            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating CellGroup (Cell Group) from Proposition against IH
            //CellGroup from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  Cell Group with hard coded and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - Cell Group:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Cell Group is not displayed as expected - Actual Cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
//              Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
//              Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating Category from Hard coded against IH
            //Category from proposition sheet
//            String categoryHardCoded = startsw("BatchOutPR"%);
//            String category_Hard_Coded = "Random";
            //  Category Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Category with hard coded and IH
            if (categoryIh.startsWith("Data-BatchOutPR")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + "Data-BatchOutPR");
            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }

///End of the additon for May 11th 2023 release - Pavani




//    @Then("^validate Creditor Insurance Initial offer details against IH$")
//    public void validateCreditorInsuranceInitialOfferDetailsAgainstIH() {
//        Database database = new Database();
//        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
//        Map<String, String> custDimMapObject = (Map) custDimRowData;
//        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
//        custDimListMapObject.add(custDimMapObject);
//        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//
//        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
//        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));
//
//        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
//        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//
//        List purlCustRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
//        LoggingUtils.log("******PURL CUST PROFILE Database table data******" + convertToJson(purlCustRowsData));
//        // IH Records from PEGA
//        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
//                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
//        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
//        if (ihRecords != null && ihRecords.size() == 1) {
//
//            Assert.assertTrue(true, "IH Record:- " + ihRecords);
//            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
//            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
//            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
//
////        Validating seed customer against IH
//            // customer id from excel sheet
//            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
//            //  seed customer from excel sheet
//            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
//            //  Verifying seed customer with Excel and IH
//            if (seedCustomerIH.equals(seedCustomerExcel)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
//                                + " and Expected Seed Customer:- " + seedCustomerExcel);
//            }
//
//
//            //        Validating Issue from propsition against IH
//            //Issue from proposition sheet
//            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
//            //  Issue from IH
//            String issueIh = ihRecords.get(0).get("Issue");
//            //  Verifying Issue with proposition and IH
//            if (issueIh.equals(issuePropsition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
//                                + " and Expected Issue:- " + issuePropsition);
//            }
//
//
//            //        Validating Group from propsition against IH
//            //Group from proposition sheet
//            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
//            //  Group from IH
//            String groupIh = ihRecords.get(0).get("Group");
//            //  Verifying Group with proposition and IH
//            if (groupIh.equals(groupPropsition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Group is not displayed as expected - Actual Group:- " + groupIh
//                                + " and Expected Group:- " + groupPropsition);
//            }
//
//            //        Validating Proposition Name from propsition against IH
//            //py Name from proposition sheet
//            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
//            //  Proposition Name from IH
//            String propositionNameIh = ihRecords.get(0).get("Proposition name");
//            //  Verifying Proposition Name with proposition and IH
//            if (propositionNameIh.equals(pyNamePropsition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
//                                + " and Expected Proposition Name:- " + pyNamePropsition);
//            }
//
//            // Validating Direction from Hard coded against IH
//            // Direction 'Outbound' is hardcoded
//            String directionHardCoded = "Outbound";
//            //  Direction from IH
//            String directionIh = ihRecords.get(0).get("Direction");
//            //  Verifying Direction with Hardcoded and IH
//            if (directionIh.equals(directionHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
//                                + " and Expected Direction:- " + directionHardCoded);
//            }
//
//            // Validating Channel from Hard coded against IH
//            // Channel 'EML' is hardcoded
//            String channelHardCoded = "EML";
//            //  Channel from IH
//            String channelIh = ihRecords.get(0).get("Channel");
//            //  Verifying Channel with Hardcoded and IH
//            if (channelIh.equals(channelHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
//                                + " and Expected Channel:- " + channelHardCoded);
//            }
//
//            // Validating Outcome from Hard coded against IH
//            // Outcome 'IPT' is hardcoded
//            String outComeHardCoded = "IPT";
//            //  Out come from IH
//            String outComeIh = ihRecords.get(0).get("Outcome");
//            //  Verifying  Out come with Hardcoded and IH
//            if (outComeIh.equals(outComeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
//                                + " and Expected Outcome:- " + outComeHardCoded);
//            }
//
//            // Validating Account Number from Account Dim sheet against IH
//            // Account number from Acct_Dim sheet
//            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
//            String IHAccNum = "";
//
//            if (accountNumberAcctDimSheet.length() > 13) {
//                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);
//
//            }
//            //  Account Number from IH
//            String accountNumberIh = ihRecords.get(0).get("Account Number");
//            //  Verifying  Account number with Acct_Dim sheet and IH
//            if (accountNumberIh.equals(IHAccNum)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
//                                + " and Expected Account Number:- " + IHAccNum);
//            }
//
//            // Validating Reference_num (YYYYMMDD)
//            // Reference_num (YYYYMMDD):log cell start date ( current date+2_ for optima channel ; log lead start date for other channel
//
//            //Retrieving the Lead Start Date from the IH
//            String leadStartDateIh = ihRecords.get(0).get("Lead Start Date");
//            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");
//
//            //  Verifying  REFERENCE_NUM with Lead Start Date
//            if (referenceNumIh.equals(leadStartDateIh)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
//                                + " and Expected REFERENCE NUMBER:- " + leadStartDateIh);
//            }
//
//
//            // Validating Zone code from Hard coded against IH
//            // Zone code 'REB' is hardcoded
////            String zoneCodeHardCoded = "REB";
//            //  Zone code from IH
////            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
//            //  Verifying  Zone code with hard coded and IH
////            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
////                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
////                                getScreenshot("Screenshot")))),
////                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
////            } else {
////                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
////                                getScreenshot("Screenshot")))),
////                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
////                                + " and Expected Zone code:- " + zoneCodeHardCoded);
////            }
//
//            // Validating Treatment (Creative Id) from Proposition against IH
//            //CreativeID from proposition sheet
//            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();
//
//            //  Treatment Id from IH
//            String treatmentIh = ihRecords.get(0).get("pyTreatment");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (treatmentIh.equals(creativeIdProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
//                                + " and Expected Treatment:- " + creativeIdProposition);
//            }
//
//            // Validating CellGroup (Cell Group) from Proposition against IH
//            //CellGroup from proposition sheet
//            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();
//
//            //  Cell Group from IH
//            String cellGroupIh = ihRecords.get(0).get("Cell Group");
//            //  Verifying  Cell Group with hard coded and IH
//            if (cellGroupIh.equals(cellGroupProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Cell Group is displayed as expected - Cell Group:-" + cellGroupIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Cell Group is not displayed as expected - Actual Cell Group:- " + cellGroupIh
//                                + " and Expected Cell Group:- " + cellGroupProposition);
//            }
//
//
//            // Validating Operator from Hard coded against IH
//            //Opertor is hard codeded
////            String operatorProposition = "";
//            //  Treatment Id from IH
////            String operatorIh = ihRecords.get(0).get("Operator");
//            //  Verifying  Treatment ID with hard coded and IH
////            if (!operatorIh.equals(operatorProposition)) {
////                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
////                                getScreenshot("Screenshot")))),
////                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
////            } else {
////                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
////                                getScreenshot("Screenshot")))),
////                        "Operator is empty/Null - Operator:- " + operatorIh);
////            }
//
//            // Validating Category from Hard coded against IH
//            //Category from proposition sheet
//            String categoryHardCoded = "Arbitration";
//            String category_Hard_Coded = "Random";
//            //  Category Id from IH
//            String categoryIh = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Category with hard coded and IH
//            if (categoryIh.equals(categoryHardCoded) || categoryIh.equals(category_Hard_Coded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + categoryIh
//                                + " and Expected Category:- " + categoryHardCoded);
//            }
//
//            // Validating Control Group from Hardcoded against IH
//            // Control group 'Y or N' is hardcoded
//            //  Control group from IH
//            String controlGoupIh = ihRecords.get(0).get("Control");
//            //  Verifying  Control group with hard coded and IH
//            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
//                                + " and Expected Control group:- " + "Y (OR) N");
//            }
//
//            // Validating Offer Instance id from Proposition against IH
//            //Offer Instance id from proposition sheet
//            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
//            //  Offer Instance id from IH
//            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(offerCodeProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
//            }
//
//            // Validating Persistence days from Proposition against IH
//            //Persistence days from proposition sheet
//            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
//            //  Persistence days from IH
//            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
//            //  Verifying persistence with proposition sheet and IH
//            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
//                                + " and Expected Persistence days:- " + persistenceDaysProposition);
//            }
//
//            // Validating Rest period days from Proposition against IH
//            //Rest period days from proposition sheet
//            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
//            //  Rest period days from IH
//            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
//            //  Verifying Rest period days with proposition sheet and IH
//            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
//                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
//            }
//
//            // Validating Campaign Code from Proposition against IH
//            //Campaign Code from proposition sheet
//            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
//            //  Campaign Code from IH
//            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
//            //  Verifying Campaign Code with proposition sheet and IH
//            if (campaignCodeIh.equals(campaignCodeProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
//                                + " and  Expected Campaign code:- " + campaignCodeProposition);
//            }
//        } else {
//            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                            getScreenshot("Screenshot")))),
//                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
//                            "is not displayed for the Seed customer "
//                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//        }
//
//    }

    @And("^write account odt excluding today \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeAccountOdtExcludingTodayValueIntoSheetForHavingAccounts(String accountODT, String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                readAccountInformationDetailsFromExcelSheetFor(sheetName, testId);
                writeAccountOdtExcludingTodayValueIntoSheetFor(accountODT, sheetName, testId);
            } else {
                readAccountInformationDetailsFromExcelSheetFor(sheetName, testId + "_Account_" + i);
                writeAccountOdtExcludingTodayValueIntoSheetFor(accountODT, sheetName, testId + "_Account_" + i);
            }
        }
    }

    @And("^write customer open date excluding today \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeCustomerOpenDateExcludingTodayIntoSheetFor(String custOpenDt, String sheetName, String testId) throws Throwable {
        if (!custOpenDt.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(custOpenDt));
            String custOpenDate = returnvalue.toString();
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "CUST_OPND_DT", custOpenDate);
        } else if (custOpenDt.equalsIgnoreCase("NULL")) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "CUST_OPND_DT", "NULL");
        }
    }

    @And("^write study end date \"([^\"]*)\" value into sheet \"([^\"]*)\" for \"([^\"]*)\"$")
    public void writeStudyEndDateValueIntoSheetFor(String std_end_dt, String sheetName, String testId) throws Throwable {
        if (!std_end_dt.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(std_end_dt));
            String studyEndDate = returnvalue.toString();
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "STUDY_END_DT", studyEndDate);
        } else if (std_end_dt.equalsIgnoreCase("NULL")) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "STUDY_END_DT", "NULL");
        }
    }

    @And("^read SPSP Loan Repayment Details \"([^\"]*)\" extract file customer offer details$")
    public void readSPSPLoanRepaymentDetailsExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.spsploanrepayment.fileName");
        spspCustomerOfferDetails = new ReadTextFile().readSPSPTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setSpspCustomerOfferDetails(spspCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                spspCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @Then("^validate SPSP Loan Repayment offer details in batch file against database and pega$")
    public void validateSPSPLoanRepaymentOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.spspLoanRepaymentLogic();

    }

    @Then("^validate SPSP Loan offer details should not display in batch file$")
    public void validateSPSPLoanOfferDetailsShouldNotDisplayInBatchFile() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.spspOfferDetailsNotDisplayedInExtract();

    }

    @Then("^validate SPSP offer details against IH$")
    public void validateSPSPOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String IHAccNum = "";
            if (accountNumberAcctDimSheet.length() > 13) {
                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);

            }
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(IHAccNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + IHAccNum);
            }


            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^validate the offer details against IH$")
    public void validateTheOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

//        List purlCustRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
//        LoggingUtils.log("******PURL CUST PROFILE Database table data******" + convertToJson(purlCustRowsData));
        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }

    @Then("^validate D(\\d+)D offer details without casl update in batch file against database and pega$")
    public void validateDDOfferDetailsWithoutCaslUpdateInBatchFileAgainstDatabaseAndPega(int arg0) {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.d2dLogicWithoutCaslUpdate();
    }

    @Then("^validate CLI offer details against IH$")
    public void validateCLIOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'" + " AND  ACCT_SUBSYS_ID = 'KS' ");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("EML")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead start date from DDR-Wave Start date against IH
            String waveStartDateDDR = getWaveStartDate().replace("-", "");
            //  Offer Start date from IH
            String waveStartDateIh = ihRecords.get(0).get("Lead Start Date");
            //  Verifying Wave start date with DDR and IH
            if (waveStartDateIh.equals(waveStartDateDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead start date is displayed as expected - Lead start date:-" + waveStartDateDDR);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead start date is not displayed as expected - Actual Lead Start date:- " + waveStartDateDDR
                                + " and Expected Lead start date:- " + waveStartDateIh);
            }

            // Validating Lead end date from DDR-Wave end date against IH
            String waveExpiryDateDDR = getWaveExpiryDate().replace("-", "");
            //  Offer Start date from IH
            String waveEndDateIh = ihRecords.get(0).get("Lead End Date");
            //  Verifying Wave start date with DDR and IH
            if (waveEndDateIh.equals(waveExpiryDateDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead end date is displayed as expected - Lead end date:-" + waveExpiryDateDDR);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead end date is not displayed as expected - Actual Lead end date:- " + waveExpiryDateDDR
                                + " and Expected Lead end date:- " + waveStartDateIh);
            }

            // Validating Reference number against DDR(Offer Expiry date) and IH
//            Reference Number from DDR table.
            String referenceNumberDDR = getWaveExpiryDate().replace("-", "");
            //  Reference Number from IH
            String referenceNumberIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  Reference Number with hard coded and IH
            if (referenceNumberIh.equals(referenceNumberDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + referenceNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + referenceNumberIh
                                + " and Expected Reference Number:- " + referenceNumberDDR);
            }
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String IHAccNum = "";
            if (accountNumberAcctDimSheet.length() > 13) {
                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);

            }
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(IHAccNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + IHAccNum);
            }


            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Cell Group from excel sheet
            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  seed customer from excel sheet
            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
            //  Verifying seed customer with Excel and IH
            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
                                + " and Expected Cell Group :- " + cellGroupFromExcel);
            }

            // Validate Transit from Database
            String transitDatabase = custDimRowData.get("ASSIGNED_FA_TRANSIT").toString().trim();
            //  seed customer from excel sheet
            String transitIH = ihRecords.get(0).get("Transit");
            //  Verifying transit with DB and IH
            if (transitIH.equals(transitDatabase)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****   Customer Transit is displayed as expected - Transit ID:-" + transitIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Customer Transitp is not displayed as expected - Actual Transit:- " + transitIH
                                + " and Expected TransitID :- " + transitDatabase);
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerInstanceId = getCustDimInputTestDataInformation().get("OII").trim();
            String campaignWaveNumber = getCampaignWaveNumber();
            String oiiSegmentation = offerInstanceId + campaignWaveNumber;

            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(oiiSegmentation)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + oiiSegmentation);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }


    }

    @And("^get cli wave start date from ddr records$")
    public void getCliWaveStartDateFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT * FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_SUBSYS_ID ='KS'").get("CLI_OFR_EXP_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT * FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_SUBSYS_ID ='KS'").get("CLI_OFR_EXP_DT").toString().substring(0, 4);
        new APPStudio().getWaveStartDate(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @And("^get cli wave expiry date from ddr records$")
    public void getCliWaveExpiryDateFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT * FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_SUBSYS_ID ='KS'").get("CLI_OFR_EXP_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT * FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_SUBSYS_ID ='KS'").get("CLI_OFR_EXP_DT").toString().substring(0, 4);
        new APPStudio().getWaveExpiryDate(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @And("^get cli mailID from ddr records$")
    public void getCliMailIDFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT * FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_SUBSYS_ID ='KS'").get("CLI_OFR_EXP_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT * FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_SUBSYS_ID ='KS'").get("CLI_OFR_EXP_DT").toString().substring(0, 4);
        new APPStudio().getMailId(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @And("^get cli campaign wave number from ddr records$")
    public void getCliCampaignWaveNumberFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT * FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_SUBSYS_ID ='KS'").get("CLI_OFR_EXP_DT").toString().substring(5, 7);
        String year = new Database().readRow("SELECT * FROM " + getSchema() + ".ACCT_DIM WHERE ACCT_NUM ='" + accountNumber + "' AND ACCT_SUBSYS_ID ='KS'").get("CLI_OFR_EXP_DT").toString().substring(0, 4);
        new APPStudio().getCampaignNumber(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @And("^read CreditLimitIncrease \"([^\"]*)\" extract file customer offer details$")
    public void readCreditLimitIncreaseExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.cli.fileName");
        cliCustomerOfferDetails = new ReadTextFile().readCLITextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setCLICustomerOfferDetails(cliCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                cliCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @Then("^validate CLI offer details in batch file against database and pega$")
    public void validateCLIOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.cliLogic();

    }

    @And("^read Mortgage Acquisition \"([^\"]*)\" extract file customer offer details$")
    public void readMortgageAcquisitionExtractFileCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.MA.fileName");
        mortgageAcqCustomerOfferDetails = new ReadTextFile().readMATextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setMortgageAcqCustomerOfferDetails(mortgageAcqCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                mortgageAcqCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @And("^get MA mailID from ddr records$")
    public void getMAMailIDFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        new APPStudio().getDailyFileMailId(ddrRecords, campaignCode, "inbox_file");
    }

    @And("^get Mortgage Acq campaign wave number from ddr records$")
    public void getMortgageAcqCampaignWaveNumberFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        new APPStudio().getDailyFileCampaignNumber(ddrRecords, campaignCode, "inbox_file");
    }


    @Then("^validate Mortgage Acquisition offer details in batch file against database and pega$")
    public void validateMortgageAcquisitionOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.mortgageAcqLogic();

    }

    @Then("^validate Mortgage Acquisition offer details against IH$")
    public void validateMortgageAcquisitionOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'" + " AND  ACCT_SUBSYS_ID = 'KS' ");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes"))).filter(x -> x.get("Channel").equals("EML")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }




            // Validating Reference number against Lead Start Date datasheet and IH
//            String referenceNumberDDR = getCustDimInputTestDataInformation().get("CellGroup").trim();
            String referenceNumberDDR = ihRecords.get(0).get("Lead Start Date");
            //  Reference Number from IH
            String referenceNumberIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  Reference Number with hard coded and IH
            if (referenceNumberIh.equals(referenceNumberDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + referenceNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + referenceNumberIh
                                + " and Expected Reference Number:- " + referenceNumberDDR);
            }

            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from Cust_dim sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();
            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Cell Group from excel sheet
            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();
            //  seed customer from excel sheet
            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
            //  Verifying seed customer with Excel and IH
            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerInstanceId = getCustDimInputTestDataInformation().get("OII").trim();
            String campaignWaveNumber = getCampaignWaveNumber();
            String oiiSegmentation = offerInstanceId + campaignWaveNumber;

            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(oiiSegmentation)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + oiiSegmentation);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }

    @And("^read NTC Engagement Mapping Tomorrow \"([^\"]*)\" extract file with Preference customer offer details$")
    public void readNTCEngagementMappingTomorrowExtractFileWithPreferenceCustomerOfferDetails(String arg0) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String batchFileName = ConfigurationManager.getBundle().getPropertyValue("batchfile.ntcmappingtomorrow.fileName");
        rdcCustomerOfferDetails = new ReadTextFile().readRDCTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid);
        setRdcCustomerOfferDetails(rdcCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                rdcCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @Then("^validate Mapping Tomorrow offer details in batch file against database and pega$")
    public void validateMappingTomorrowOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.ntcMappingTmrwLogic();
    }


    @When("^write \"([^\"]*)\" for \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeForIntoSheetForHavingAccounts(String txn_timestamp, String posdt, String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                if (getAcctDimInputTestDataInformation().get("ACCT_SUBSYS_ID").equals("AC")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(posdt));
                    String posTxnDt = returnvalue.toString();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            txn_timestamp, posTxnDt);
                }
            } else {
                if (getAcctDimInputTestDataInformation().get("ACCT_SUBSYS_ID").equals("AC")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(posdt));
                    String posTxnDt = returnvalue.toString();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                            txn_timestamp, posTxnDt);
                }
            }

        }
    }

    /**
     * This is a generic function which writes a date n days forward from current date for a specified field into the specified datasheet for single test case
     * @param date_column -  DB column which needs to be updated
     * @param noofdays    -  no of days to be calculated that needs to be increased from currentdays
     * @param sheetName   -  Name of the Datasheet or the Table in the Datasheet
     * @param testId      -  Value of test ID
     * @throws Throwable
     */
    @When("^write \"([^\"]*)\" for \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\" for increment in days$")
    public void writeForIntoSheetForForIncrementInDays(String date_column, String noofdays, String sheetName, String testId) throws Throwable {
        setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
        if (!noofdays.equalsIgnoreCase("NULL")) {
            setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.plusDays(Integer.parseInt(noofdays));
            String calculatedDt = returnvalue.toString();
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, calculatedDt);
        } else if (noofdays.equalsIgnoreCase("NULL")) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, "NULL");
        }
    }

    /**
     * This is a generic function which writes a date n days backward from current date for a specified field into the specified datasheet for single test case
     * @param date_column -  DB column which needs to be updated
     * @param noofdays    -  no of days to be calculated that needs to be reduced from currentdays
     * @param sheetName   -  Name of the Datasheet or the Table in the Datasheet
     * @param testId      -  Value of test ID
     * @throws Throwable
     */
    @When("^write \"([^\"]*)\" for \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\" for decrement in days$")
    public void writeForIntoSheetForForDecrementInDays(String date_column, String noofdays, String sheetName, String testId) throws Throwable {
        // Write code here that turns the phrase above into concrete actions
        setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
        if (!noofdays.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusDays(Integer.parseInt(noofdays));
            String calculatedDt = returnvalue.toString();
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, calculatedDt);
        } else if (noofdays.equalsIgnoreCase("NULL")) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, "NULL");
        }

    }


    /**
     * This function writes a date n days from current date for a specified field into the specified datasheet for a customer having single or multiple accounts
     * Positive value represents past date and Negative represents future Date
     *
     * @param date_column : Name of the DB Column to write
     * @param noofdays    : Duration in Days where Positive value represents past date and Negative represents future Date
     * @param sheetName   : Name of the Datasheet or the Table in the Datasheet
     * @param testId      : Value of the Test ID
     * @throws Throwable
     */

    @When("^write Generic Date in \"([^\"]*)\" field with \"([^\"]*)\" duration from current date into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" records$")
    public void writeGenericDateInDaysFromCurrDateIntoSheet(String date_column, String noofdays, String sheetName, String testId, String noOfRecords) throws Throwable {

        int records = Integer.parseInt(noOfRecords);
        for (int i = 1; i <= records; i++) {
            if (i == 1) {

                if (!noofdays.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(noofdays));
                    String calculatedDt = returnvalue.toString();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, calculatedDt);
                } else if (noofdays.equalsIgnoreCase("NULL")) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, "NULL");
                }


            } else {


                if (!noofdays.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(noofdays));
                    String calculatedDt = returnvalue.toString();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i, date_column, calculatedDt);
                } else if (noofdays.equalsIgnoreCase("NULL")) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i, date_column, "NULL");
                }

            }
        }

    }


    /**
     * This function writes different dates passed as a list of n days from current date for a specified field into the specified datasheet
     * Positive value represents past date and Negative represents future Date
     * 	If i > array length after split, then insert NULL for the corresponding record
     *
     * @param date_column
     * @param noofdaysList
     * @param sheetName
     * @param testId
     * @param noOfRecords
     * @throws Throwable
     */

    @When("^write Different Generic Dates in \"([^\"]*)\" field with \"([^\"]*)\" duration from current date into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" records$")
    public void writeDifferentGenericDatesInDaysFromCurrDateIntoSheet(String date_column, String noofdaysList, String sheetName, String testId, String noOfRecords) throws Throwable {

        int records = Integer.parseInt(noOfRecords);
        String[] daysList = noofdaysList.split(",");
        String noofdays = "NULL";

        for (int i = 1; i <= records; i++) {
            noofdays = (i <= daysList.length)?daysList[i-1]:"NULL";

            if (i == 1) {

                if (!noofdays.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(noofdays));
                    String calculatedDt = returnvalue.toString();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, calculatedDt);
                } else if (noofdays.equalsIgnoreCase("NULL")) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, "NULL");
                }

            } else {

                if (!noofdays.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(noofdays));
                    String calculatedDt = returnvalue.toString();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i, date_column, calculatedDt);
                } else if (noofdays.equalsIgnoreCase("NULL")) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i, date_column, "NULL");
                }

            }
        }

    }








    @Then("^Validate D(\\d+)D Acquisition offer details in batch file against database and pega$")
    public void validateDDAcquisitionOfferDetailsInBatchFileAgainstDatabaseAndPega(int arg0) throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.d2dAcquisitionLogic();

    }

// D2D Acquisition Cross Sell IH Validation for EML Channel
    @Then("^validate D(\\d+)D Acquisition offer details against IH$")
    public void validateDDAcquisitionOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (creativeIdProposition.contains(treatmentIh)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }


            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    // D2D Acquisition Cross Sell IH Validation for Different Channels Channel
    @Then("^validate D2D Acquisition offer details against IH for \"([^\"]*)\" Channel$")
    public void validateDDAcquisitionOfferDetailsAgainstIH_for_Different_Channels(String strChannelCode) {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Proposition name").equals("CIE5747")).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (creativeIdProposition.contains(treatmentIh)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }


            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }



    //Insurance Claim Reminder Offer
//IH Validation
    @Then("^validate Insurance Claim Reminder offer details against IH$")
    public void validateInsuranceClaimReminderOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }


            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String IHAccNum = "";
            if (accountNumberAcctDimSheet.length() > 13) {
                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);

            }
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(IHAccNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + IHAccNum);
            }


            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }


            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    //SSM Always On
//IH Validation
    @Then("^validate SSM Always On offer details against IH$")
    public void validateSSMAlwaysOnOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group HardCoded as Blank
            String cellGroupProposition = "";

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

/*
        // Validating Lead Start Date for IPT
        String strOfferedOn = ihRecords.get(0).get("Offered on");
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dateVal = null;
        try{
            dateVal = format.parse(strOfferedOn);
        }catch(Exception e){e.printStackTrace();}

        SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadStartDate = sfOutput.format(dateVal);

        String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

        //  Verifying Actual Lead Start Date with Expected Lead Start Date
        if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                            + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
        }
*/

        /*
        // Validating Lead End Date for IPT
        //Fetching Offered On from IH
        String strOfferedOnIH = ihRecords.get(0).get("Offered on");
        SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dtOfferedOn = null;
        try{
            dtOfferedOn = format.parse(strOfferedOnIH);
        }catch(Exception e){e.printStackTrace();}

        Calendar calVal = Calendar.getInstance();
        calVal.setTime(dtOfferedOn);

        //Persistence days from proposition sheet
        String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
        int iPersistanceDays = 0;

        try{
            iPersistanceDays = Integer.parseInt(strPersistenceDays);

        }catch(Exception e){e.printStackTrace();}

        calVal.add(Calendar.DAY_OF_MONTH,iPersistanceDays);

        SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

        String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

        //  Verifying Actual Lead End Date with Expected Lead End Date
        if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                            + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
        }

*/


            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    //NTB_AdvicePlus_5822
//IH Validation
    @Then("^validate NTB_AdvicePlus offer details against IH$")
    public void validateNTB_AdvicePlus_5822OfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from Datasheet sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group HardCoded as Blank
            String cellGroupProposition = "";

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

/*
        // Validating Lead Start Date for IPT
        String strOfferedOn = ihRecords.get(0).get("Offered on");
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dateVal = null;
        try{
            dateVal = format.parse(strOfferedOn);
        }catch(Exception e){e.printStackTrace();}

        SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadStartDate = sfOutput.format(dateVal);

        String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

        //  Verifying Actual Lead Start Date with Expected Lead Start Date
        if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                            + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
        }
*/

        /*
        // Validating Lead End Date for IPT
        //Fetching Offered On from IH
        String strOfferedOnIH = ihRecords.get(0).get("Offered on");
        SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dtOfferedOn = null;
        try{
            dtOfferedOn = format.parse(strOfferedOnIH);
        }catch(Exception e){e.printStackTrace();}

        Calendar calVal = Calendar.getInstance();
        calVal.setTime(dtOfferedOn);

        //Persistence days from proposition sheet
        String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
        int iPersistanceDays = 0;

        try{
            iPersistanceDays = Integer.parseInt(strPersistenceDays);

        }catch(Exception e){e.printStackTrace();}

        calVal.add(Calendar.DAY_OF_MONTH,iPersistanceDays);

        SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

        String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

        //  Verifying Actual Lead End Date with Expected Lead End Date
        if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                            + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
        }

*/

            // Validating reference Number from Casl Consent Flag from DB against IH
            // Casl consent from Database Cust_Dim
            String caslConsntFlag = custDimRowData.get("CASL_CONSENT_F").toString().trim();
            if (caslConsntFlag.equalsIgnoreCase("Y")) {
                caslConsntFlag = "CASL_CONSENT_Y";
            } else if (caslConsntFlag.equalsIgnoreCase("N")) {
                caslConsntFlag = "CASL_CONSENT_N";
                ;
            } else {
                caslConsntFlag = "";
            }
            //  ReferenceNumber from IH
            String caslConsntIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  reference number with Casl Consent flag and IH
            if (caslConsntIh.equals(caslConsntFlag)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + caslConsntIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + caslConsntIh
                                + " and Expected Reference Number:- " + caslConsntFlag);
            }
            // Validating Account Number from cust Dim sheet against IH
            // Account number from cust_Dim sheet
            String accountNumberCustDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM").trim();
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number").trim();

            //  Verifying  Account number with CUST_Dim sheet and IH
//            if (accountNumberIh.length() == 23 && accountNumberCustDimSheet.contains(accountNumberIh)) {  Updated for Aug 31st Release
            if (accountNumberIh.length() == 23) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberCustDimSheet);
            }


            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    //CIE5504 MPSA Contribution Fund Initial Offer - Oct. 27th 2022 Release
//IH Validation
    @Then("^validate MPSA Contribution Fund Oct 27 2022 Release Initial offer details against IH$")
    public void validateMPSA_Contribution_Oct27th2022_5822OfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));


        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from Datasheet sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group from Datasheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

/*
        // Validating Lead Start Date for IPT
        String strOfferedOn = ihRecords.get(0).get("Offered on");
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dateVal = null;
        try{
            dateVal = format.parse(strOfferedOn);
        }catch(Exception e){e.printStackTrace();}

        SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadStartDate = sfOutput.format(dateVal);

        String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

        //  Verifying Actual Lead Start Date with Expected Lead Start Date
        if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                            + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
        }
*/

        /*
        // Validating Lead End Date for IPT
        //Fetching Offered On from IH
        String strOfferedOnIH = ihRecords.get(0).get("Offered on");
        SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dtOfferedOn = null;
        try{
            dtOfferedOn = format.parse(strOfferedOnIH);
        }catch(Exception e){e.printStackTrace();}

        Calendar calVal = Calendar.getInstance();
        calVal.setTime(dtOfferedOn);

        //Persistence days from proposition sheet
        String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
        int iPersistanceDays = 0;

        try{
            iPersistanceDays = Integer.parseInt(strPersistenceDays);

        }catch(Exception e){e.printStackTrace();}

        calVal.add(Calendar.DAY_OF_MONTH,iPersistanceDays);

        SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

        String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

        //  Verifying Actual Lead End Date with Expected Lead End Date
        if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                            + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
        }

*/

/* ** Reference Number Validation is Not Required **************
            // Validating reference Number from Casl Consent Flag from DB against IH
            // Casl consent from Database Cust_Dim
            String caslConsntFlag = custDimRowData.get("CASL_CONSENT_F").toString().trim();
            if (caslConsntFlag.equalsIgnoreCase("Y")) {
                caslConsntFlag = "CASL_CONSENT_Y";
            } else if (caslConsntFlag.equalsIgnoreCase("N")) {
                caslConsntFlag = "CASL_CONSENT_N";
                ;
            } else {
                caslConsntFlag = "";
            }
            //  ReferenceNumber from IH
            String caslConsntIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  reference number with Casl Consent flag and IH
            if (caslConsntIh.equals(caslConsntFlag)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + caslConsntIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + caslConsntIh
                                + " and Expected Reference Number:- " + caslConsntFlag);
            }
****** */


            // Validating Account Number from cust Dim sheet against IH
            // Account number from cust_Dim sheet
            String accountNumberCustDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM").trim();
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number").trim();

            //  Verifying  Account number with CUST_Dim sheet and IH
            if (accountNumberIh.length() == 23 && accountNumberCustDimSheet.contains(accountNumberIh)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberCustDimSheet);
            }


            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }





    //Proactive Dormancy
//IH Validation for FFT Channel
    @Then("^validate Proactive Dormancy offer details against IH$")
    public void validateProactiveDormancyOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;

        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));


        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'FFT' is hardcoded
            String channelHardCoded = "FFT";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

       /* // Validating Offered on from Current date against IH
        // Offered on from  current date
        String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
        //  Offered on from IH
        String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
        //  Verifying Channel with Hardcoded and IH
        if (offeredOnIh.equals(offeredOnCurrentDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                            + " and Expected Offered On:- " + offeredOnCurrentDate);
        }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code Blank is hardcoded
            String zoneCodeHardCoded = "";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Datasheet against IH
            //CreativeID from Datasheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group HardCoded as Blank
            String cellGroupProposition = "";

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
//        String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            String offerCodeProposition = "PUA01";
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }


//        Validating Account Number from CUST_INSIGHTS Datasheet against IH
            // ACCT_NUM from excel sheet
            String strACCT_NUM = getCustInsightsInputTestDataInformation().get("ACCT_NUM");
            //  Account Number from IH
            String strACCT_NUM_IH = ihRecords.get(0).get("Account Number");
            //  Verifying Account with Excel and IH
            if (strACCT_NUM.equals(strACCT_NUM_IH)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + strACCT_NUM_IH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + strACCT_NUM_IH
                                + " and Expected Account Number:- " + strACCT_NUM);
            }


/*
    // Validating Lead Start Date for IPT
    String strOfferedOn = ihRecords.get(0).get("Offered on");
    SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

    Date dateVal = null;
    try{
        dateVal = format.parse(strOfferedOn);
    }catch(Exception e){e.printStackTrace();}

    SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
    String strExpectedLeadStartDate = sfOutput.format(dateVal);

    String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

    //  Verifying Actual Lead Start Date with Expected Lead Start Date
    if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                        getScreenshot("Screenshot")))),
                "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
    } else {
        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                        getScreenshot("Screenshot")))),
                "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                        + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
    }
*/

    /*
    // Validating Lead End Date for IPT
    //Fetching Offered On from IH
    String strOfferedOnIH = ihRecords.get(0).get("Offered on");
    SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

    Date dtOfferedOn = null;
    try{
        dtOfferedOn = format.parse(strOfferedOnIH);
    }catch(Exception e){e.printStackTrace();}

    Calendar calVal = Calendar.getInstance();
    calVal.setTime(dtOfferedOn);

    //Persistence days from proposition sheet
    String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
    int iPersistanceDays = 0;

    try{
        iPersistanceDays = Integer.parseInt(strPersistenceDays);

    }catch(Exception e){e.printStackTrace();}

    calVal.add(Calendar.DAY_OF_MONTH,iPersistanceDays);

    SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
    String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

    String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

    //  Verifying Actual Lead End Date with Expected Lead End Date
    if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                        getScreenshot("Screenshot")))),
                "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
    } else {
        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                        getScreenshot("Screenshot")))),
                "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                        + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
    }

*/


            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    //Batch File Validation
    @Then("^Validate Insurance Claim Reminder offer details in batch file against database and pega$")
    public void validateInsuranceClaimReminderOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.InsuranceClaimReminderLogic();

    }


    //Batch File Validation for SSM Always On
    @Then("^Validate SSM Always On offer details in batch file against database and pega$")
    public void validateSSMAlwaysOnOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.SSMAlwaysOnLogic();

    }

    //Batch File Validation for Visa Debit Interac
    @Then("^Validate Visa Debit Interac offer details in batch file against database and pega$")
    public void validateVisaDebitInteracOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.VisaDebitInteracLogic();

    }

    //Batch File Validation for ULOC CLI
    @Then("^Validate ULOC CLI offer details in batch file against database and pega$")
    public void validateULOC_CLI_OfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.ULOC_CLI_Logic();

    }

    //Batch File Validation for International Money Transfer
    @Then("^Validate International Money Transfer offer details in batch file against database and pega$")
    public void validateInternational_Money_OfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.International_Money_Transfer_Logic();

    }

    //Batch File Validation for Accidental Death Insurance for EML and OPM
    @Then("^Validate Accidental Death Insurance offer details in batch file against database and pega$")
    public void validateAccidental_DeathInsurance_OfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.Accidental_Death_Insurance_Logic();

    }

    //Batch File Validation for Itrade Xsell Always on for EML

    @Then("^Validate Itrade Xsell Always on offer details in batch file against database and pega$")
    public void validateItradeXsellAlwaysOnOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.Itrade_Xsell_Always_on_Logic();
    }

//    //Batch File Validation for Accidental Death Insurance for OPM
//    @Then("^Validate Accidental Death Insurance offer details in batch file for OPM against database and pega$")
//    public void validateAccidental_DeathInsurance_OPM_OfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
//        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
//        d2DChannelLogic.Accidental_Death_InsuranceOPM_Logic();
//
//    }



    //Batch File Validation for Visa Debit Interac
    @Then("^Validate D2D Early Engagement iTrade Cross Sell offer details in batch file against database and pega$")
    public void validateD2DEarlyEngagementiTradeCrossSellOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.D2DEarlyEngagementiTradeCrossSellLogic();

    }



    //Batch File Validation for NTB_AdvicePlus
    @Then("^Validate NTB_AdvicePlus offer details in batch file against database and pega$")
    public void validateNTB_AdvicePlusOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.NTB_AdvicePlusLogic();

    }


    /**
     * This function writes INDV_BRTH_DT field in cust_dim with value as formula given below(This logic is used in RIF RSP since it needs a customer having date in next month and previous years)
     * years(yyyy) - decrement of years from current year using cust_age
     * months(mm) - increment of required months
     * date(dd)  -  any random date
     * @param noofmonths - number of months required to increment from current month
     * @param days       - any random date required
     * @param sheetName  - Name of the Datasheet or the Table in the Datasheet
     * @param testId     - Value of Test ID
     * @throws FilloException
     * @throws IOException
     */
    @When("^write birth date \"([^\"]*)\" and \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\"$")
    public void writeBirthDateIntoSheetFor(String noofmonths, String days, String sheetName, String testId) throws FilloException, IOException {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        if (!noofmonths.equalsIgnoreCase("NULL")) {
            String noofyears = custDimInputTestDataInformation.get("CUST_AGE").trim().equalsIgnoreCase("NULL") ? "20" : custDimInputTestDataInformation.get("CUST_AGE").trim();
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusYears(Integer.parseInt(noofyears));
            String birthdate = returnvalue.plusMonths(Integer.parseInt(noofmonths)).toString();
            String indvbirthdate = birthdate.substring(0, 8).concat(days);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "INDV_BRTH_DT", indvbirthdate);

        } else {
            setAccountOdtValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "INDV_BRTH_DT", "NULL");
        }
    }

    @Then("^validate PA CC offer details in batch file against database and pega$")
    public void validatePACCOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.paccLogic();
    }

    @And("^get PACC mailID from ddr records$")
    public void getPACCMailIDFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String customer = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String month = new Database().readRow("SELECT * FROM " + getSchema() + ".PA_CCUL_CUSTOMER WHERE CIS_CUST_ID ='" + customer + "'").get("PRIMARY_PREAPPROVED_START_DATE").toString().substring(5, 7);
        String year = new Database().readRow("SELECT * FROM " + getSchema() + ".PA_CCUL_CUSTOMER WHERE CIS_CUST_ID ='" + customer + "'").get("PRIMARY_PREAPPROVED_END_DATE").toString().substring(0, 4);
        new APPStudio().getMailId(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @Then("^validate ULOC Insurance offer details in batch file against database and pega$")
    public void validateULOCInsOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.paULOCRetargetingLogic();
    }

    @Then("^validate ULOC Insurance Insurance offer details against IH$")
    public void validateULOCInsuranceInsuranceOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
//        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
//                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());

        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());

        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String IHAccNum = "";
            if (accountNumberAcctDimSheet.length() > 13) {
                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);

            }
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(IHAccNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + IHAccNum);
            }

            // Validating Reference_num (YYYYMMDD)
            // Reference_num (YYYYMMDD):log cell start date ( current date+2_ for optima channel ; log lead start date for other channel

            //Retrieving the Lead Start Date from the IH
            String leadStartDateIh = ihRecords.get(0).get("Lead Start Date");
            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Lead Start Date
            if (referenceNumIh.equals(leadStartDateIh)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + leadStartDateIh);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();
            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }


    @When("^write secondary customer id in \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeSecondaryCustomerIdInForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId + "_Account_2");
        String secondarycustid = custDimInputTestDataInformation.get("CIS_CUST_ID");
        saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                "CC_SCNRY_CUST_ID", secondarycustid);
    }

    @When("^write cid , secondary customer id and account number into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" accounts$")
    public void writeCidSecondaryCustomerIdAndAccountNumberIntoSheetForHavingAccounts(String sheetName, String testId, String noOfAccounts) throws Throwable {
        int accounts = Integer.parseInt(noOfAccounts);
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
                String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "CIS_CUST_ID", cid);
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                        "ACCT_NUM", accountNumber);
            } else {
                custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId + "_Account_" + i);
                String cid = custDimInputTestDataInformation.get("CIS_CUST_ID");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "CIS_CUST_ID", cid);
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
                setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
                String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
                saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i,
                        "ACCT_NUM", accountNumber);
            }

        }
    }

    @Then("^Validate ODP Acquisition details in batch file against database and pega$")
    public void validateODPAcquisitionDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.ODPAcquisitionLogic();
    }

    @And("^get ODP Acq wave start date from ddr records$")
    public void getODPAcqWaveStartDateFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
        LocalDate date = LocalDate.parse(todayDate);
        LocalDate returnvalue = date.plusMonths(1);
        String expdt = returnvalue.toString();
        String month = expdt.substring(5, 7);
        String year = expdt.substring(0, 4);
        new APPStudio().getWaveStartDate(ddrRecords, month, year, campaignCode, "inbox_file");
    }


    @And("^get ODP Acq wave expiry date from ddr records$")
    public void getODPAcqWaveExpiryDateFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
        LocalDate date = LocalDate.parse(todayDate);
        LocalDate returnvalue = date.plusMonths(1);
        String expdt = returnvalue.toString();
        String month = expdt.substring(5, 7);
        String year = expdt.substring(0, 4);
        new APPStudio().getWaveExpiryDate(ddrRecords, month, year, campaignCode, "inbox_file");
    }


    @And("^get ODP Acq campaign wave number from ddr records$")
    public void getODPAcqCampaignWaveNumberFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
        LocalDate date = LocalDate.parse(todayDate);
        LocalDate returnvalue = date.plusMonths(1);
        String expdt = returnvalue.toString();
        String month = expdt.substring(5, 7);
        String year = expdt.substring(0, 4);
        new APPStudio().getCampaignNumber(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @And("^get ODP Acq MailID from ddr records$")
    public void getODPAcqMailIDFromDdrRecords() {
        List<Map<String, String>> ddrRecords = getDdrRecords();
        String campaignCode = getCustDimInputTestDataInformation().get("Campaign");
        String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
        LocalDate date = LocalDate.parse(todayDate);
        LocalDate returnvalue = date.plusMonths(1);
        String expdt = returnvalue.toString();
        String month = expdt.substring(5, 7);
        String year = expdt.substring(0, 4);
        new APPStudio().getMailId(ddrRecords, month, year, campaignCode, "inbox_file");
    }

    @Then("^validate ODP Acquisition offer details against IH$")
    public void validateODPAcquisitionOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'" + " AND  ACCT_SUBSYS_ID = 'BB' ");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("EML")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead start date from DDR-Wave Start date against IH
            String waveStartDateDDR = getWaveStartDate().replace("-", "");
            //  Offer Start date from IH
            String waveStartDateIh = ihRecords.get(0).get("Lead Start Date");
            //  Verifying Wave start date with DDR and IH
            if (waveStartDateIh.equals(waveStartDateDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead start date is displayed as expected - Lead start date:-" + waveStartDateDDR);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead start date is not displayed as expected - Actual Lead Start date:- " + waveStartDateDDR
                                + " and Expected Lead start date:- " + waveStartDateIh);
            }

            // Validating Lead end date from DDR-Wave end date against IH
            String waveExpiryDateDDR = getWaveExpiryDate().replace("-", "");
            //  Offer Start date from IH
            String waveEndDateIh = ihRecords.get(0).get("Lead End Date");
            //  Verifying Wave start date with DDR and IH
            if (waveEndDateIh.equals(waveExpiryDateDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead end date is displayed as expected - Lead end date:-" + waveExpiryDateDDR);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead end date is not displayed as expected - Actual Lead end date:- " + waveExpiryDateDDR
                                + " and Expected Lead end date:- " + waveStartDateIh);
            }

            // Validating Reference number against DDR(Offer Expiry date) and IH
//            Reference Number from DDR table.
            String referenceNumberDDR = getWaveExpiryDate().replace("-", "");
            //  Reference Number from IH
            String referenceNumberIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  Reference Number with hard coded and IH
            if (referenceNumberIh.equals(referenceNumberDDR)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + referenceNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + referenceNumberIh
                                + " and Expected Reference Number:- " + referenceNumberDDR);
            }
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String IHAccNum = "";
            if (accountNumberAcctDimSheet.length() > 13) {
                IHAccNum = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 12);

            }
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(IHAccNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + IHAccNum);
            }


            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Cell Group from excel sheet
            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  seed customer from excel sheet
            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
            //  Verifying seed customer with Excel and IH
            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
                                + " and Expected Cell Group :- " + cellGroupFromExcel);
            }

            // Validate Transit from Database
            //  seed customer from excel sheet
            String sasTreatmentIH = ihRecords.get(0).get("SAS_TREATMNT_TRCK_CD");
            String sasTreatmentDatabase = ihRecords.get(0).get("Cell Group").trim();
            if (sasTreatmentDatabase.equals("PAL")) {
                sasTreatmentDatabase = custDimRowData.get("PA_ODP_LIMIT").toString().trim();
            } else {
                sasTreatmentDatabase = custDimRowData.get("CR_RSK_IND").toString().trim();
                switch (sasTreatmentDatabase) {
                    case "A":
                        sasTreatmentDatabase = "1000";
                        break;
                    case "B":
                        sasTreatmentDatabase = "750";
                        break;
                    case "C":
                        sasTreatmentDatabase = "500";
                        break;
                }
            }
            //  Verifying transit with DB and IH
            if (sasTreatmentIH.equals(sasTreatmentDatabase)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****   SAS Treatment Track Code is displayed as expected - Transit ID:-" + sasTreatmentIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "SAS Treatment Track Code is not displayed as expected - Actual Code:- " + sasTreatmentIH
                                + " and Expected Code :- " + sasTreatmentDatabase);
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerInstanceId = getCustDimInputTestDataInformation().get("OII").trim();
            String campaignWaveNumber = getCampaignWaveNumber();
            String oiiSegmentation = offerInstanceId + campaignWaveNumber;

            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(oiiSegmentation)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + oiiSegmentation);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }


    }

    /**
     * This function writes date value as month with previous month and date with given dd (Since it a pre requisite for PA_TU_FILE_DT file for ODP Acq preapproved offer)
     * @param date_column - DB column which needs date update
     * @param dd_date     - required value of dd field
     * @param sheetName   - Name of the Datasheet or the Table in the Datasheet
     * @param testId      - Value of the Test ID
     * @throws Throwable
     */
    @When("^write \"([^\"]*)\" for \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\" for previous month$")
    public void writeForIntoSheetForForPreviousMonth(String date_column, String dd_date, String sheetName, String testId) throws Throwable {
        // Write code here that turns the phrase above into concrete actions
        setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
        if (!dd_date.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.minusMonths(1);
            String calculatedDt = returnvalue.toString();
            String patuFile_Date = calculatedDt.substring(0, 8).concat(dd_date);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, patuFile_Date);
        } else if (dd_date.equalsIgnoreCase("NULL")) {
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, "NULL");
        }
    }

    @When("^write \"([^\"]*)\" and \"([^\"]*)\" into \"([^\"]*)\" sheet for \"([^\"]*)\" in \"([^\"]*)\" column$")
    public void writeAndIntoSheetForIncolumn(String noofmonths, String days, String sheetName, String testId, String column_name) throws FilloException, IOException {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        if (!noofmonths.equalsIgnoreCase("NULL")) {
            String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
            LocalDate date = LocalDate.parse(todayDate);
            LocalDate returnvalue = date.plusMonths(Integer.parseInt(noofmonths));
            String calculated_Dt = returnvalue.toString();
            String exp_calculated_Dt = calculated_Dt.substring(0, 8).concat(days);
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    column_name, exp_calculated_Dt);

        } else if (noofmonths.equalsIgnoreCase("NULL")) {
            setAccountOdtValue("NULL");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    column_name, "NULL");
        }
    }

    @Then("^validate MPSA Welcome Bonus offer details in batch file against database and pega$")
    public void validateMPSAWelcomeBonusOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.mpsaWelcomeBonusLogic();
    }



    @Then("^validate MPSA Welcome Bonus offer details against IH$")
    public void validateMPSAWelcomeBonusOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));
        // IH Records from PEGA
        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }

            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating reference Number from Casl Consent Flag sheet against IH
            // Casl consent from cust_dim sheet
            String caslConsntFlag = custDimRowData.get("CASL_CONSENT_F").toString().trim();
            if (caslConsntFlag.equalsIgnoreCase("Y")) {
                caslConsntFlag = "CASL_CONSENT_Y";
            } else if (caslConsntFlag.equalsIgnoreCase("N")) {
                caslConsntFlag = "CASL_CONSENT_N";
                ;
            } else if (!caslConsntFlag.equalsIgnoreCase("Y") || !caslConsntFlag.equalsIgnoreCase("N")) {
                caslConsntFlag = "";
            }
            //  ReferenceNumber from IH
            String caslConsntIh = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  reference number with Casl Consent flag and IH
            if (caslConsntIh.equals(caslConsntFlag)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + caslConsntIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + caslConsntIh
                                + " and Expected Reference Number:- " + caslConsntFlag);
            }


            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    @Then("^validate Missing or Invalid Email offer details against IH for \"([^\"]*)\" Channel$")
    public void validateMissingInvalidEmailOfferDetailsAgainstIH(String strChannelCode) {
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");


        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");

        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        //Fetching IH Records
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


//        // IH Records from PEGA
//        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//
////        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
////                .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("SOL")).collect(Collectors.toList());
//        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'SOL' is hardcoded
//            String channelHardCoded = "FFT";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(strChannelCode)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + strChannelCode);
            }

           /*  Validating Offered on from Current date against IH
             Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }

            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Lead Start Date for IPT with Offered On Date from IH
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

//            // Validating Account Number from Account Dim sheet against IH
//            // Account number from Acct_Dim sheet
//            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
//            //  Account Number from IH
//            String accountNumberIh = ihRecords.get(0).get("Account Number");
//            //  Verifying  Account number with Acct_Dim sheet and IH
//            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
//                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
//            }

            // Validating Zone code from Hard coded against IH
            // Zone code Blank is hardcoded
            String zoneCodeHardCoded = "";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating reference Number from Lead Start Date against IH
            // Lead Start Date from IH
            String strExpectedReferenceNum = ihRecords.get(0).get("Lead Start Date");


            //  ReferenceNumber from IH
            String strActualReferenceNum = ihRecords.get(0).get("REFERENCE_NUM");
            //  Verifying  reference number with Casl Consent flag and IH
            if (strActualReferenceNum.equals(strExpectedReferenceNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + strActualReferenceNum);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + strActualReferenceNum
                                + " and Expected Reference Number:- " + strExpectedReferenceNum);
            }

/*
            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }
*/

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

           /*// Validating pyCategory from Hard coded as "Arbitration" against IH
            //Hardcoded Expected Value for Category
            String strExpectedCategory = "Arbitration";
            //  pyCategory from IH
            String strActualCategory = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (strActualCategory.equals(strExpectedCategory)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
                                + " and Expected Category:- " + strExpectedCategory);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

//            // Validating Offer Instance id from Proposition against IH
//            //Offer Instance id from proposition sheet
//            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
//            //  Offer Instance id from IH
//            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(offerCodeProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
//            }


            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }



    @Then("^validate Visa Debit Interac offer details against IH$")
    public void validateVisaDebitInteracOfferDetailsAgainstIH() {
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

        //**** STATIC VALUE BASED



        //**** PROPOSITION SHEET BASED



        //**** DATABASE BASED



        //**** DYNAMIC LOGIC BASED


        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        // IH Records from PEGA
//        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
//                .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("EML")).collect(Collectors.toList());

        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("EML")).collect(Collectors.toList());

        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Lead Start Date for IPT with Offered On Date from IH
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }



            // Validating Account Number from Database against IH
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");

            // Eligible Account numbers from Database
            String strDBQuery = "Select A.ACCT_NUM From " + strDBSchema + ".ACCT_DIM AS A, " + strDBSchema + ".CUST_ACCT_RLTNP_DIM AS B " +
                    "Where A.ACCT_NUM = B.ACCT_NUM AND " +
                    "A.ACCT_SUBSYS_ID = 'BB' AND A.SRC_ACCT_STAT_CD = 'A' AND " +
                    "A.SRC_SYS_PRD_CD IN('01','02','19','13','07','23') AND " +
                    "A.SRC_SYS_SUB_PRD_CD IN('01','02','03','04','07','08','11','12') AND " +
                    "B.PRIMARY_ACCT_HOLDER_FLAG = 'Y' AND B.CIS_CUST_ID = '" + strCID +"'";

            List<Map<String,Object>> eligibleAccts = database.readRows(strDBQuery);

            //  Verifying Eligible Account Numbers with IH
            if ((accountNumberIh.length() == 23) && eligibleAccts.stream().anyMatch(x -> x.get("ACCT_NUM").equals(accountNumberIh))) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Numbers:- " + eligibleAccts);
            }




            // Validating Zone code from Hard coded against IH
            // Zone code REB is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

//            // Validating reference Number from Lead Start Date against IH
//            // Lead Start Date from IH
//            String strExpectedReferenceNum = ihRecords.get(0).get("Lead Start Date");
//
//
//            //  ReferenceNumber from IH
//            String strActualReferenceNum = ihRecords.get(0).get("REFERENCE_NUM");
//            //  Verifying  reference number with Casl Consent flag and IH
//            if (strActualReferenceNum.equals(strExpectedReferenceNum)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + strActualReferenceNum);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Reference Number is not displayed as expected - Actual Reference Number:- " + strActualReferenceNum
//                                + " and Expected Reference Number:- " + strExpectedReferenceNum);
//            }

/*
            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }
*/

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating pyCategory from Hard coded as "Arbitration" against IH
            //Hardcoded Expected Value for Category
            String strExpectedCategory = "Arbitration";
            //  pyCategory from IH
            String strActualCategory = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (strActualCategory.equals(strExpectedCategory)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
                                + " and Expected Category:- " + strExpectedCategory);
            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }


            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    @Then("^validate ULOC CLI offer details against IH for \"([^\"]*)\" Channel$")
    public void validateUlocCliOfferDetailsAgainstIH(String strChannelCode) {
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

        //**** STATIC VALUE BASED



        //**** PROPOSITION SHEET BASED



        //**** DATABASE BASED



        //**** DYNAMIC LOGIC BASED


        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }

        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

/*
            // Validating Lead Start Date for IPT with Offered On Date from IH
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

*/

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            if(accountNumberAcctDimSheet.length() > 13)
                accountNumberAcctDimSheet = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length()-13);


            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");

            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.length() == 13 && accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }





            // Validating Zone code from Hard coded against IH
            // Zone code REB is hardcoded
            String zoneCodeHardCoded = "";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating reference Number from Lead End Date against IH
            // Lead End Date from IH
            String strExpectedReferenceNum = ihRecords.get(0).get("Lead End Date");


            //  ReferenceNumber from IH
            String strActualReferenceNum = ihRecords.get(0).get("REFERENCE_NUM");
            if (strActualReferenceNum.equals(strExpectedReferenceNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + strActualReferenceNum);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + strActualReferenceNum
                                + " and Expected Reference Number:- " + strExpectedReferenceNum);
            }

            // Validating cellGroup  from Proposition against IH
            //cell Group from Datasheet
//            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();
            String cellGroupProposition = "";

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            //The static "01" need to be replaced with OB Scheduler Table Wave Number after implementing API based OB Scheduler Fetch
            String offerCodeProposition = getCustDimInputTestDataInformation().get("CellGroup").trim() + "01";


            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }


            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    // RIF_RSP CIE5723 and CIE5724 IH Validation
    @Then("^validate RIF RSP offer details against IH for \"([^\"]*)\" Channel$")
    public void validateRIF_RSPOfferDetailsAgainstIH(String strChannelCode) {
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

        //**** STATIC VALUE BASED



        //**** PROPOSITION SHEET BASED



        //**** DATABASE BASED



        //**** DYNAMIC LOGIC BASED


        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }

        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel name is passed as a parameter to this function
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

/*
            // Validating Lead Start Date for IPT with Offered On Date from IH
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

*/

            // Validating Account Number from Account Dim sheet against IH.. If multiple account select at Random
            // Account numbers from Acct_Dim sheet
            List<String> accountNumberAcctDimSheet = new ArrayList<>();

            for(Map<String,Object> acctRow: acctDimRowsData) {
                accountNumberAcctDimSheet.add(acctRow.get("ACCT_NUM").toString());
            }

            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");

            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.length() == 23 && accountNumberAcctDimSheet.contains(accountNumberIh)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected an Account Number from the following:- " + accountNumberAcctDimSheet);
            }



            // Validating Zone code from Hard coded against IH
            // Zone code blank is hardcoded
            String zoneCodeHardCoded = "";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating reference Number hardcorded as Blank
            // Lead End Date from IH
            String strExpectedReferenceNum = "";


            //  ReferenceNumber from IH
            String strActualReferenceNum = ihRecords.get(0).get("REFERENCE_NUM");
            if (strActualReferenceNum.equals(strExpectedReferenceNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + strActualReferenceNum);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + strActualReferenceNum
                                + " and Expected Reference Number:- " + strExpectedReferenceNum);
            }

            // Validating cellGroup  from Datasheet against IH
            //cell Group from Datasheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }


            // Validating Offer Instance id hardcoded as Blank against IH
            //Offer Instance id from proposition sheet
            //The static "01" need to be replaced with OB Scheduler Table Wave Number after implementing API based OB Scheduler Fetch
            String offerCodeProposition = "";

            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }


            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }




    // 6003 IH validation Code
@Then("^validate REL offer details against IH for \"([^\"]*)\" Channel$")
public void validateRELOfferDetailsAgainstIHForChannel(String strChannelCode) throws Throwable {
    Database database = new Database();
    String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
    String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

    //**** STATIC VALUE BASED



    //**** PROPOSITION SHEET BASED



    //**** DATABASE BASED



    //**** DYNAMIC LOGIC BASED


    //Fetching CUST_DIM Records
    Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
            ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
    Map<String, String> custDimMapObject = (Map) custDimRowData;
    List<Map<String, String>> custDimListMapObject = new LinkedList<>();
    custDimListMapObject.add(custDimMapObject);
    LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

    //Fetching ACCT_DIM Records
    List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
            ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
            ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
    LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


    //Fetching CUST_ACCT_RLTNP_DIM Records
    List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
            ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
    LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


    List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

    if(ihRecords != null){
        ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
    }

    LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


    if (ihRecords != null && ihRecords.size() == 1) {

        Assert.assertTrue(true, "IH Record:- " + ihRecords);
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
        // customer id from excel sheet
        String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        //  seed customer from excel sheet
        String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
        //  Verifying seed customer with Excel and IH
        if (seedCustomerIH.equals(seedCustomerExcel)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                            + " and Expected Seed Customer:- " + seedCustomerExcel);
        }


        //        Validating Issue from propsition against IH
        //Issue from proposition sheet
        String issuePropsition = csvFileRecord.get(0).get("pyIssue");
        //  Issue from IH
        String issueIh = ihRecords.get(0).get("Issue");
        //  Verifying Issue with proposition and IH
        if (issueIh.equals(issuePropsition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Issue is not displayed as expected - Actual Issue:- " + issueIh
                            + " and Expected Issue:- " + issuePropsition);
        }


        //        Validating Group from propsition against IH
        //Group from proposition sheet
        String groupPropsition = csvFileRecord.get(0).get("pyGroup");
        //  Group from IH
        String groupIh = ihRecords.get(0).get("Group");
        //  Verifying Group with proposition and IH
        if (groupIh.equals(groupPropsition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Group is not displayed as expected - Actual Group:- " + groupIh
                            + " and Expected Group:- " + groupPropsition);
        }

        //        Validating Proposition Name from propsition against IH
        //py Name from proposition sheet
        String pyNamePropsition = csvFileRecord.get(0).get("pyName");
        //  Proposition Name from IH
        String propositionNameIh = ihRecords.get(0).get("Proposition name");
        //  Verifying Proposition Name with proposition and IH
        if (propositionNameIh.equals(pyNamePropsition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                            + " and Expected Proposition Name:- " + pyNamePropsition);
        }

        // Validating Direction from Hard coded against IH
        // Direction 'Outbound' is hardcoded
        String directionHardCoded = "Outbound";
        //  Direction from IH
        String directionIh = ihRecords.get(0).get("Direction");
        //  Verifying Direction with Hardcoded and IH
        if (directionIh.equals(directionHardCoded)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Direction is not displayed as expected - Actual Direction:- " + directionIh
                            + " and Expected Direction:- " + directionHardCoded);
        }

        // Validating Channel from Hard coded against IH
        // Channel 'EML' is hardcoded
        String channelHardCoded = strChannelCode;
        //  Channel from IH
        String channelIh = ihRecords.get(0).get("Channel");
        //  Verifying Channel with Hardcoded and IH
        if (channelIh.equals(channelHardCoded)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Channel is not displayed as expected - Actual Channel:- " + channelIh
                            + " and Expected Channel:- " + channelHardCoded);
        }

           // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }

        // Validating Outcome from Hard coded against IH
        // Outcome 'IPT' is hardcoded
        String outComeHardCoded = "IPT";
        //  Outcome from IH
        String outComeIh = ihRecords.get(0).get("Outcome");
        //  Verifying  Out come with Hardcoded and IH
        if (outComeIh.equals(outComeHardCoded)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                            + " and Expected Outcome:- " + outComeHardCoded);
        }


            // Validating Lead Start Date for IPT with Offered On Date from IH
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }



        // Validating Account Number from Account Dim sheet against IH
        // Account number from Acct_Dim sheet
//        String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
//
//        //  Account Number from IH
//        String accountNumberIh = ihRecords.get(0).get("Account Number");
//        //  Verifying  Account number with Acct_Dim sheet and IH
//        if (accountNumberIh.length() == 23 && accountNumberIh.equals(accountNumberAcctDimSheet)) {
//            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                            getScreenshot("Screenshot")))),
//                    "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
//        } else {
//            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                            getScreenshot("Screenshot")))),
//                    "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
//                            + " and Expected Account Number:- " + accountNumberAcctDimSheet);
//        }





        // Validating Zone code from Hard coded against IH
        // Zone code REB is hardcoded
        String zoneCodeHardCoded = "";
        //  Zone code from IH
        String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
        //  Verifying  Zone code with hard coded and IH
        if (zoneCodeIh.equals(zoneCodeHardCoded)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                            + " and Expected Zone code:- " + zoneCodeHardCoded);
        }

        // Validating Treatment (Creative Id) from Proposition against IH
        //CreativeID from proposition sheet
        String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

        //  Treatment Id from IH
        String treatmentIh = ihRecords.get(0).get("pyTreatment");
        //  Verifying  Treatment ID with hard coded and IH
        if (treatmentIh.equals(creativeIdProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                            + " and Expected Treatment:- " + creativeIdProposition);
        }



        // Validating cellGroup  from Proposition against IH
        //cell Group from Datasheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("Segment").trim();
//        String cellGroupProposition = "";

        if(cellGroupProposition.equals("Affluent Retirees")){
            cellGroupProposition = "AFF";
        }else if (cellGroupProposition.equals("Mid-Career")){
            cellGroupProposition = "MID";
        }else if (cellGroupProposition.equals("Small Business")){
            cellGroupProposition = "SMB";
        }else{
            cellGroupProposition = "GEN";
        }


        //  Cell Group from IH
        String cellGroupIh = ihRecords.get(0).get("Cell Group");
        //  Verifying  cell Group with proposition and IH
        if (cellGroupIh.equals(cellGroupProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                            + " and Expected Cell Group:- " + cellGroupProposition);
        }


        // Validating Operator from Hard coded against IH
        //Opertor is hard codeded
        String operatorProposition = "";
        //  Treatment Id from IH
        String operatorIh = ihRecords.get(0).get("Operator");
        //  Verifying  Treatment ID with hard coded and IH
        if (!operatorIh.equals(operatorProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Operator is empty/Null - Operator:- " + operatorIh);
        }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

        // Validating Control Group from Hardcoded against IH
        // Control group 'Y or N' is hardcoded
        //  Control group from IH
        String controlGoupIh = ihRecords.get(0).get("Control");
        //  Verifying  Control group with hard coded and IH
        if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                            + " and Expected Control group:- " + "Y (OR) N");
        }

        // Validating Persistence days from Proposition against IH
        //Persistence days from proposition sheet
        String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
        //  Persistence days from IH
        String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
        //  Verifying persistence with proposition sheet and IH
        if (persistenceDaysIh.equals(persistenceDaysProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                            + " and Expected Persistence days:- " + persistenceDaysProposition);
        }

        // Validating Rest period days from Proposition against IH
        //Rest period days from proposition sheet
        String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
        //  Rest period days from IH
        String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
        //  Verifying Rest period days with proposition sheet and IH
        if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                            + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
        }

        // Validating Campaign Code from Proposition against IH
        //Campaign Code from proposition sheet
        String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
        //  Campaign Code from IH
        String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
        //  Verifying Campaign Code with proposition sheet and IH
        if (campaignCodeIh.equals(campaignCodeProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                            + " and  Expected Campaign code:- " + campaignCodeProposition);
        }
    } else {
        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                        getScreenshot("Screenshot")))),
                "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                        "is not displayed for the Seed customer "
                        + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
    }
}


    @Then("^validate D2D iTrade offer details against IH$")
    public void validateD2DiTradeOfferDetailsAgainstIH() {
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

        //**** STATIC VALUE BASED



        //**** PROPOSITION SHEET BASED



        //**** DATABASE BASED



        //**** DYNAMIC LOGIC BASED


        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        // IH Records from PEGA
//        List<Map<String, String>> ihRecords = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
//                .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("EML")).collect(Collectors.toList());

        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("EML")).collect(Collectors.toList());

        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from proposition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Lead Start Date for IPT with Offered On Date from IH
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }



            // Validating Account Number from Database against IH
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");

            // Eligible Account numbers from Database
            String strProdCode = null;
            String strCreative =  ihRecords.get(0).get("pyTreatment");
            if(strCreative.equals("5971022301"))
                strProdCode = "13";
            else if(strCreative.equals("5971052303")) {
                strProdCode ="23";
            }
            else
                strProdCode = "07";

            String strDBQuery = "Select A.ACCT_NUM From " + strDBSchema + ".ACCT_DIM AS A, " + strDBSchema + ".CUST_ACCT_RLTNP_DIM AS B " +
                    "Where A.ACCT_NUM = B.ACCT_NUM AND " +
                    "A.ACCT_SUBSYS_ID = 'BB' AND A.SRC_ACCT_STAT_CD = 'A' AND " +
                    "A.SRC_SYS_PRD_CD IN('" + strProdCode + "') AND " +
                    "A.SRC_SYS_SUB_PRD_CD IN('01','03','07','08','11','12') AND " +
                    "B.PRIMARY_ACCT_HOLDER_FLAG = 'Y' AND B.CIS_CUST_ID = '" + strCID +"'";

            List<Map<String,Object>> eligibleAccts = database.readRows(strDBQuery);

            //  Verifying Eligible Account Numbers with IH
            if ((accountNumberIh.length() == 23) && eligibleAccts.stream().anyMatch(x -> x.get("ACCT_NUM").equals(accountNumberIh))) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Numbers:- " + eligibleAccts);
            }




            // Validating Zone code from Hard coded against IH
            // Zone code REB is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

//            // Validating reference Number from Lead Start Date against IH
//            // Lead Start Date from IH
//            String strExpectedReferenceNum = ihRecords.get(0).get("Lead Start Date");
//
//
//            //  ReferenceNumber from IH
//            String strActualReferenceNum = ihRecords.get(0).get("REFERENCE_NUM");
//            //  Verifying  reference number with Casl Consent flag and IH
//            if (strActualReferenceNum.equals(strExpectedReferenceNum)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + strActualReferenceNum);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Reference Number is not displayed as expected - Actual Reference Number:- " + strActualReferenceNum
//                                + " and Expected Reference Number:- " + strExpectedReferenceNum);
//            }


            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = "";

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group").trim();
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

    /**** Code for Validation of pyCategory is Commented for May 11th 2023 Release as it is not longer required
            // Validating pyCategory from Hard coded as "Arbitration" against IH
            //Hardcoded Expected Value for Category
            String strExpectedCategory = "Arbitration";
            //  pyCategory from IH
            String strActualCategory = ihRecords.get(0).get("pyCategory");
            if (strActualCategory.equals(strExpectedCategory)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
            }
            else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
                                + " and Expected Category:- " + strExpectedCategory);
            }
     */

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }


            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }





    // Temporary Code for Testing Integration of IH Validation via API - Author: Sujoy Pal
@Then("^temporary Testing Invalid Email offer details against IH via API$")
public void temporaryTestingInvalidEmailOfferDetailsAgainstIHviaAPI() {
    Database database = new Database();
    Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
            ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
    Map<String, String> custDimMapObject = (Map) custDimRowData;
    List<Map<String, String>> custDimListMapObject = new LinkedList<>();
    custDimListMapObject.add(custDimMapObject);
    LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

    List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
            ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
    LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

    List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
            ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
    LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

    // IH Records from PEGA via GUI
//    List<Map<String, String>> ihRecords_GUI = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
//            .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("SOL")).collect(Collectors.toList());
//    LoggingUtils.log("******IH Records Data via GUI******" + convertToJson(ihRecords_GUI));

    // IH Records from PEGA via API
    List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
            .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals("SOL")).collect(Collectors.toList());
    LoggingUtils.log("******IH Records Data via API******" + convertToJson(ihRecords));



    if (ihRecords != null && ihRecords.size() == 1) {

        Assert.assertTrue(true, "IH Record:- " + ihRecords);
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
        // customer id from excel sheet
        String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        //  seed customer from excel sheet
        String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
        //  Verifying seed customer with Excel and IH
        if (seedCustomerIH.equals(seedCustomerExcel)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                            + " and Expected Seed Customer:- " + seedCustomerExcel);
        }


        //        Validating Issue from propsition against IH
        //Issue from proposition sheet
        String issuePropsition = csvFileRecord.get(0).get("pyIssue");
        //  Issue from IH
        String issueIh = ihRecords.get(0).get("Issue");
        //  Verifying Issue with proposition and IH
        if (issueIh.equals(issuePropsition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Issue is not displayed as expected - Actual Issue:- " + issueIh
                            + " and Expected Issue:- " + issuePropsition);
        }


        //        Validating Group from propsition against IH
        //Group from proposition sheet
        String groupPropsition = csvFileRecord.get(0).get("pyGroup");
        //  Group from IH
        String groupIh = ihRecords.get(0).get("Group");
        //  Verifying Group with proposition and IH
        if (groupIh.equals(groupPropsition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Group is not displayed as expected - Actual Group:- " + groupIh
                            + " and Expected Group:- " + groupPropsition);
        }

        //        Validating Proposition Name from propsition against IH
        //py Name from proposition sheet
        String pyNamePropsition = csvFileRecord.get(0).get("pyName");
        //  Proposition Name from IH
        String propositionNameIh = ihRecords.get(0).get("Proposition name");
        //  Verifying Proposition Name with proposition and IH
        if (propositionNameIh.equals(pyNamePropsition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                            + " and Expected Proposition Name:- " + pyNamePropsition);
        }

        // Validating Direction from Hard coded against IH
        // Direction 'Outbound' is hardcoded
        String directionHardCoded = "Outbound";
        //  Direction from IH
        String directionIh = ihRecords.get(0).get("Direction");
        //  Verifying Direction with Hardcoded and IH
        if (directionIh.equals(directionHardCoded)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
        } else {
            LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot"))),
                    "Direction is not displayed as expected - Actual Direction:- " + directionIh
                            + " and Expected Direction:- " + directionHardCoded);
        }

        // Validating Channel from Hard coded against IH
        // Channel 'SOL' is hardcoded
        String channelHardCoded = "SOL";
        //  Channel from IH
        String channelIh = ihRecords.get(0).get("Channel");
        //  Verifying Channel with Hardcoded and IH
        if (channelIh.equals(channelHardCoded)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Channel is not displayed as expected - Actual Channel:- " + channelIh
                            + " and Expected Channel:- " + channelHardCoded);
        }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
        // Validating Outcome from Hard coded against IH
        // Outcome 'IPT' is hardcoded
        String outComeHardCoded = "IPT";
        //  Out come from IH
        String outComeIh = ihRecords.get(0).get("Outcome");
        //  Verifying  Out come with Hardcoded and IH
        if (outComeIh.equals(outComeHardCoded)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                            + " and Expected Outcome:- " + outComeHardCoded);
        }

        // Validating Lead Start Date for IPT with Offered On Date from IH
        String strOfferedOn = ihRecords.get(0).get("Offered on");
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dateVal = null;
        try {
            dateVal = format.parse(strOfferedOn);
        } catch (Exception e) {
            e.printStackTrace();
        }

        SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadStartDate = sfOutput.format(dateVal);

        String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

        //  Verifying Actual Lead Start Date with Expected Lead Start Date
        if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                            + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
        }


        // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
        //Fetching Offered On from IH
        String strOfferedOnIH = ihRecords.get(0).get("Offered on");
        SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dtOfferedOn = null;
        try {
            dtOfferedOn = format.parse(strOfferedOnIH);
        } catch (Exception e) {
            e.printStackTrace();
        }

        Calendar calVal = Calendar.getInstance();
        calVal.setTime(dtOfferedOn);

        //Persistence days from proposition sheet
        String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
        int iPersistanceDays = 0;

        try {
            iPersistanceDays = Integer.parseInt(strPersistenceDays);

        } catch (Exception e) {
            e.printStackTrace();
        }

        calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

        SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

        String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

        //  Verifying Actual Lead End Date with Expected Lead End Date
        if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                            + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
        }




//            // Validating Account Number from Account Dim sheet against IH
//            // Account number from Acct_Dim sheet
//            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
//            //  Account Number from IH
//            String accountNumberIh = ihRecords.get(0).get("Account Number");
//            //  Verifying  Account number with Acct_Dim sheet and IH
//            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
//                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
//            }

        // Validating Zone code from Hard coded against IH
        // Zone code Blank is hardcoded
        String zoneCodeHardCoded = "";
        //  Zone code from IH
        String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
        //  Verifying  Zone code with hard coded and IH
        if (zoneCodeIh.equals(zoneCodeHardCoded)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                            + " and Expected Zone code:- " + zoneCodeHardCoded);
        }

        // Validating Treatment (Creative Id) from Proposition against IH
        //CreativeID from proposition sheet
        String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

        //  Treatment Id from IH
        String treatmentIh = ihRecords.get(0).get("pyTreatment");
        //  Verifying  Treatment ID with hard coded and IH
        if (treatmentIh.equals(creativeIdProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                            + " and Expected Treatment:- " + creativeIdProposition);
        }

        // Validating reference Number from Lead Start Date against IH
        // Lead Start Date from IH
        String strExpectedReferenceNum = ihRecords.get(0).get("Lead Start Date");


        //  ReferenceNumber from IH
        String strActualReferenceNum = ihRecords.get(0).get("REFERENCE_NUM");
        //  Verifying  reference number with Casl Consent flag and IH
        if (strActualReferenceNum.equals(strExpectedReferenceNum)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + strActualReferenceNum);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Reference Number is not displayed as expected - Actual Reference Number:- " + strActualReferenceNum
                            + " and Expected Reference Number:- " + strExpectedReferenceNum);
        }

/*
            // Validating cellGroup  from Proposition against IH
            //cell Group from proposition sheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }
*/

        // Validating Operator from Hard coded against IH
        //Opertor is hard codeded
        String operatorProposition = "";
        //  Treatment Id from IH
        String operatorIh = ihRecords.get(0).get("Operator");
        //  Verifying  Treatment ID with hard coded and IH
        if (!operatorIh.equals(operatorProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Operator is empty/Null - Operator:- " + operatorIh);
        }

        // Validating pyCategory from Hard coded as "Arbitration" against IH
        //Hardcoded Expected Value for Category
        String strExpectedCategory = "Arbitration";
        //  pyCategory from IH
        String strActualCategory = ihRecords.get(0).get("pyCategory");
        //  Verifying  Treatment ID with hard coded and IH
        if (strActualCategory.equals(strExpectedCategory)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Category is not displayed as expected - Actual Category:- " + strActualCategory
                            + " and Expected Category:- " + strExpectedCategory);
        }

        // Validating Control Group from Hardcoded against IH
        // Control group 'Y or N' is hardcoded
        //  Control group from IH
        String controlGoupIh = ihRecords.get(0).get("Control");
        //  Verifying  Control group with hard coded and IH
        if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                            + " and Expected Control group:- " + "Y (OR) N");
        }

//            // Validating Offer Instance id from Proposition against IH
//            //Offer Instance id from proposition sheet
//            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
//            //  Offer Instance id from IH
//            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(offerCodeProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
//            }


        // Validating Persistence days from Proposition against IH
        //Persistence days from proposition sheet
        String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
        //  Persistence days from IH
        String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
        //  Verifying persistence with proposition sheet and IH
        if (persistenceDaysIh.equals(persistenceDaysProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                            + " and Expected Persistence days:- " + persistenceDaysProposition);
        }

        // Validating Rest period days from Proposition against IH
        //Rest period days from proposition sheet
        String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
        //  Rest period days from IH
        String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
        //  Verifying Rest period days with proposition sheet and IH
        if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                            + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
        }

        // Validating Campaign Code from Proposition against IH
        //Campaign Code from proposition sheet
        String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
        //  Campaign Code from IH
        String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
        //  Verifying Campaign Code with proposition sheet and IH
        if (campaignCodeIh.equals(campaignCodeProposition)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                            + " and  Expected Campaign code:- " + campaignCodeProposition);
        }
    } else {
        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                        getScreenshot("Screenshot")))),
                "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                        "is not displayed for the Seed customer "
                        + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
    }
}


    @Given("^Temporary Testing REST Response using cid \"([^\"]*)\" for \"([^\"]*)\" channel$")
    public void temporaryTestingRESTResponse(String strCID, String strChannelCode) {
//        String strResponse = new RestResponseGenerator().getRESTResponse(strCID,strChannelCode);

        String strResponse = new RestResponseGenerator().getRESTResponseForOBSchedulerTable();

//        System.out.println(strResponse);


        Map<String,Object> mapObj = new RestResponseGenerator().convertJSONStringToMap(strResponse);

        Map<String,Object> mapResponse = new RestResponseGenerator().convertJSONStringToMap(strResponse);

        ArrayList<Map<String,Object>> lstResults = (ArrayList<Map<String, Object>>) mapObj.get("pxResults");

        Map<String, Object> mapResult = lstResults.get(0);

        System.out.println("CampaignName: " + mapResult.get("CampaignName").toString());



        String strDssValue = mapResponse.get("D2DAcq_RS22054_CONTROL_CID_ENDING_VAL").toString();
//        System.out.println("DSS Value: " + strDssValue);


    }


    @And("^Execute REST Call for \"([^\"]*)\" channel$")
    public void ExecuteRESTCallforChannelwithOutcome(String strChannelCode) {

        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

        String strResponse = new RestResponseGenerator().getRESTResponse(strCID,strChannelCode);

        LoggingUtils.log("******REST Response******" + strResponse);

    }









    @Then("^validate MPSA CrossSell offer details in batch file against database and pega$")
    public void validateMPSACrossSellOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.mpsaCrossSellNewLogic();
    }

    @Then("^validate EMOB Welcome offer details in batch file against database and pega$")
    public void validateEMOBWelcomeOfferDetailsInBatchFileAgainstDatabaseAndPega() {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.emobTouch7Logic();
    }

    /**
     * This function writes a date that needs increment in months and can be any date(dd) into specified data sheet
     * @param columnName        -  DB field column date
     * @param matdatemonths     - number of months that has to be incremented
     * @param sheetName         - Name of the Datasheet or the Table in the Datasheet
     * @param testId            - Value of testID
     * @param noofAccounts      - number of accounts for the testid
     * @throws Throwable
     */
    @And("^write \"([^\"]*)\" column value with increment of \"([^\"]*)\"  into sheet \"([^\"]*)\" for \"([^\"]*)\" having \"([^\"]*)\" accounts$")
    public void writeColumnValueWithIncrementOfIntoSheetForHavingAccounts(String columnName, String matdatemonths,  String sheetName, String testId, String noofAccounts) throws Throwable {
        String filePath = getTestDataExcelPath() + File.separator;
        String fileName = getTestDataName();
        custDimInputTestDataInformation = readExcel(filePath, fileName, "CUST_DIM", "Header_TestID", testId);
        acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
        String currentdate = getSystemDateTimeForBatch("yyyy-MM-dd");
        System.out.println(currentdate);
        int accounts = Integer.parseInt(noofAccounts);
        int mat_date = Integer.parseInt(matdatemonths);
        String matdate = incrementMonth("yyyy-MM-dd", currentdate, mat_date);
        System.out.println(matdate);
        for (int i = 1; i <= accounts; i++) {
            if (i == 1) {
                 if((acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UF") )|| (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UO"))){
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                            "MAT_DT",matdate );
                }
            } else {
                acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId + "_Account_" + i );
                if((acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UF") )|| (acctDimInputTestDataInformation.get("ACCT_SUBSYS_ID").equals("UO"))) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i ,
                            "MAT_DT",matdate);

                }
            }
        }
    }


    @Then("^validate TFSA RRSP Fund remainder offer details against IH$")
    public void validateTFSARRSPFundRemainderOfferDetailsAgainstIH() {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/

            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
//            String target_acct_num = "";
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
//            if (accountNumberAcctDimSheet.length() > 13) {
//                target_acct_num = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length() - 13);
//
//            }
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }


            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }

            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }


            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }

    }

//Deepthi
    @When("^write cid and account number into \"([^\"]*)\" sheet for \"([^\"]*)\"  having \"([^\"]*)\" account Insights$")
    public void writeCidAndAccountNumberIntoSheetForHavingAccountInsights(String sheetName, String testId, String noOfInsights) throws Throwable {
        int insights = Integer.parseInt(noOfInsights);
        for (int i = 1; i <= insights; i++) {
                if (i == 1) {
            String cid = getSeedCustomer();
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "CIS_CUST_ID", cid);
            String filePath = getTestDataExcelPath() + File.separator;
            String fileName = getTestDataName();
            acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
            setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
            String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId,
                    "ACCT_NUM", accountNumber);
        }
          else {
            String cid = getSeedCustomer();
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Insight_" + i,
                    "CIS_CUST_ID", cid);
            String filePath = getTestDataExcelPath() + File.separator;
            String fileName = getTestDataName();
            acctDimInputTestDataInformation = readExcel(filePath, fileName, "ACCT_DIM", "Header_TestID", testId);
            setAcctDimInputTestDataInformation(acctDimInputTestDataInformation);
            String accountNumber = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Insight_" + i,
                    "ACCT_NUM", accountNumber);
        }
    }
     }


    @Then("^insert customer and account details in \"([^\"]*)\" table having \"([^\"]*)\" accounts Insights$")
    public void insertCustomerAndAccountDetailsInTableHavingAccountInsights(String sheetName, String noOfInsights) throws Throwable {

            int insights = Integer.parseInt(noOfInsights);
            for (int i = 1; i <= insights; i++) {
                if (i == 1) {
                String filePath = getTestDataExcelPath() + File.separator;
                String fileName = getTestDataName();
                custInsightsInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId);
                setCustInsightsInputTestDataInformation(custInsightsInputTestDataInformation);
                Database database = new Database();
                String insertQuery = database.queryBuilder_NoTimestmap(getCustInsightsInputTestDataInformation(), sheetName);
                database.insertData(insertQuery);
                } else {
                    String filePath = getTestDataExcelPath() + File.separator;
                    String fileName = getTestDataName();
                    custInsightsInputTestDataInformation = readExcel(filePath, fileName, sheetName, "Header_TestID", testId + "_Insight_" + i);
                    setCustInsightsInputTestDataInformation(custInsightsInputTestDataInformation);
                    Database database = new Database();
                    String insertQuery = database.queryBuilder_NoTimestmap(getCustInsightsInputTestDataInformation(), sheetName);
                    database.insertData(insertQuery);
                }
            }

        }


    @Then("^validate D2D_EarlyEngagementOfferRemainder offer details against IH for \"([^\"]*)\" Channel$")
    public void validateD2DEarlyEngRemOfferDetailsAgainstIH(String strChannelCode) {
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

        //**** STATIC VALUE BASED



        //**** PROPOSITION SHEET BASED



        //**** DATABASE BASED



        //**** DYNAMIC LOGIC BASED


        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }

        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Lead Start Date for IPT with Offered On Date from IH
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }



            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");

            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.length() == 23 && accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }





            // Validating Zone code from Hard coded against IH
            // Zone code REB is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating reference Number from Lead End Date against IH
            // Lead End Date from IH
            String strExpectedReferenceNum = ihRecords.get(0).get("Lead End Date");

/*
            //  ReferenceNumber from IH
            String strActualReferenceNum = ihRecords.get(0).get("REFERENCE_NUM");
            if (strActualReferenceNum.equals(strExpectedReferenceNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Number is displayed as expected - Reference Number:-" + strActualReferenceNum);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference Number is not displayed as expected - Actual Reference Number:- " + strActualReferenceNum
                                + " and Expected Reference Number:- " + strExpectedReferenceNum);
            }
*/

            // Validating cellGroup  from Proposition against IH
            //cell Group from Datasheet
//            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();
            String cellGroupProposition = "";

            //  Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //  Verifying  cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - Cell Group:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            //The static "01" need to be replaced with OB Scheduler Table Wave Number after implementing API based OB Scheduler Fetch
            String offerCodeProposition = getCustDimInputTestDataInformation().get("CellGroup").trim() + "01";

/*
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }
*/

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^Validate D(\\d+)DEarlyEngagementOfferRemainder offer details in batch file against database and pega$")
    public void validateD2DEarlyEngagementRem_OfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        //        d2DChannelLogic.ULOC_CLI_Logic();
        String insight_code_Pat = "FLG_D2DOFRFULFIL_PAT";
        String insight_code_Bill = "FLG_D2DOFRFULFIL_BILL";
        String insight_code_Pay = "FLG_D2DOFRFULFIL_PAY";
        d2DChannelLogic.D2DEarlyEngRemainder_Logic(insight_code_Pat,insight_code_Bill,insight_code_Pay);

    }
    @Then("^validate Long Term Investing Advice offer details against IH for \"([^\"]*)\" Channel$")
    public void validateLongTermInvestingAdviceOfferDetailsAgainstIHForChannel(String strChannelCode) throws Throwable {

        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

        //**** STATIC VALUE BASED



        //**** PROPOSITION SHEET BASED



        //**** DATABASE BASED



        //**** DYNAMIC LOGIC BASED


        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Fetching CUST_INSIGHTS Records
        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));

        //Fetching CUST_EV_EB Records
        List CUST_EV_EB_RowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_EV_EB where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_EV_EB Database table data******" + convertToJson(CUST_EV_EB_RowsData));

        //Fetching EXTERNAL_INPUT_FILE_LAYOUT Records
        List EXTERNAL_INPUT_FILE_LAYOUT_RowsData = database.readRows("Select * from " + strDBSchema +
                ".EXTERNAL_INPUT_FILE_LAYOUT where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******EXTERNAL_INPUT_FILE_LAYOUT Database table data******" + convertToJson(EXTERNAL_INPUT_FILE_LAYOUT_RowsData));


        //Fetching IH Records
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals("IPT")).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

////            // Validating Offered on from Current date against IH
////            // Offered on from  current date
//            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
//            //  Offered on from IH
//            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
//            //  Verifying Channel with Hardcoded and IH
//            if (offeredOnIh.equals(offeredOnCurrentDate)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
//                                + " and Expected Offered On:- " + offeredOnCurrentDate);
//            }

            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Lead Start Date for IPT with Offered On Date from IH
            String strOfferedOnIH1 = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn1 = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn1 = null;
            try {
                dtOfferedOn1 = formatOfferedOn1.parse(strOfferedOnIH1);
            } catch (Exception e) {
                e.printStackTrace();
            }


            Calendar calVal1 = Calendar.getInstance();
            calVal1.setTime(dtOfferedOn1);

            //File Delivery days
            String strDeliveryDays = "1";
            int iDeliveryDays = 0;

            try {
                iDeliveryDays = Integer.parseInt(strDeliveryDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal1.add(Calendar.DAY_OF_MONTH, iDeliveryDays);

            SimpleDateFormat formatLeadStartDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = formatLeadStartDate.format(calVal1.getTime());


            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }
//

            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");


            Date dtOfferedOn = null;
            try {
                dtOfferedOn = formatOfferedOn.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);
                iPersistanceDays = iPersistanceDays +1;

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");


            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }



            // Validating Account Number from Account Dim sheet against IH
            String strExpectedACCT_NUM = null;

            if(strChannelCode.equals("COS")) {
                // Account number from Acct_Dim sheet
                if(getCustInsightsInputTestDataInformation().isEmpty())
                    strExpectedACCT_NUM = "";
                else
                    strExpectedACCT_NUM = getCustInsightsInputTestDataInformation().get("ACCT_NUM");
            }else if(strChannelCode.equals("MAT")){
                strExpectedACCT_NUM = "";
            }
            //  Account Number from IH
            String strACCT_NUM_IH = ihRecords.get(0).get("Account Number");
            //  Verifying Account with Excel and IH
            if (strExpectedACCT_NUM.equals(strACCT_NUM_IH)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + strACCT_NUM_IH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + strACCT_NUM_IH
                                + " and Expected Account Number:- " + strExpectedACCT_NUM);
            }



            // Validating Zone code from Hard coded against IH
            // Zone code REB is hardcoded
            String zoneCodeHardCoded = "";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }



            // Validating Cell Group from IH against Datasheet
            // Cell Group from excel sheet
            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  seed customer from excel sheet
            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
            //  Verifying seed customer with Excel and IH
            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    /** IH Validation Function for International Money Transfer Campaign - RS23094
     *
     */

    @Then("^validate International Money Transfer offer details against IH for \\\"([^\\\"]*)\\\" Channel with \\\"([^\\\"]*)\\\" Direction having \\\"([^\\\"]*)\\\" Outcome$")
    public void validateInternationalMoneyTranserOfferDetailsAgainstIHForChannel(String strChannelCode, String strDirection, String strOutcome) throws Throwable {

        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");



        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Fetching CUST_INSIGHTS Records
        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));


        //Fetching IH Records
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from proposition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is passed as parameter to this function
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

////            // Validating Offered on from Current date against IH
////            // Offered on from  current date
//            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
//            //  Offered on from IH
//            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
//            //  Verifying Channel with Hardcoded and IH
//            if (offeredOnIh.equals(offeredOnCurrentDate)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
//                                + " and Expected Offered On:- " + offeredOnCurrentDate);
//            }

            // Validating Outcome from Hard coded against IH
            // Outcome is passed as a parameter to this function
            String outComeHardCoded = strOutcome;
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Outcome with parameter and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }



        // Validating Lead Start Date for IPT
        String strOfferedOn = ihRecords.get(0).get("Offered on");
        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

        Date dateVal = null;
        try{
            dateVal = format.parse(strOfferedOn);
        }catch(Exception e){e.printStackTrace();}

        SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
        String strExpectedLeadStartDate = sfOutput.format(dateVal);

        String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

        //  Verifying Actual Lead Start Date with Expected Lead Start Date
        if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                            + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
        }




            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");


            Date dtOfferedOn = null;
            try {
                dtOfferedOn = formatOfferedOn.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);
                iPersistanceDays = iPersistanceDays;

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");


            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }



//            // Validating Account Number from Account Dim sheet against IH
//            // Account number from Acct_Dim sheet
//            String strACCT_NUM = getCustInsightsInputTestDataInformation().get("ACCT_NUM");
//            //  Account Number from IH
//            String strACCT_NUM_IH = ihRecords.get(0).get("Account Number");
//            //  Verifying Account with Excel and IH
//            if (strACCT_NUM.equals(strACCT_NUM_IH)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + strACCT_NUM_IH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + strACCT_NUM_IH
//                                + " and Expected Account Number:- " + strACCT_NUM);
//            }



            // Validating Zone code from Hard coded against IH
            // Zone code REB is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }



//            // Validating cellGroup  from Proposition against IH
//            //cell Group from Datasheet
//            String cellGroupProposition = getCustDimInputTestDataInformation().get("Segment").trim();
////        String cellGroupProposition = "";
//
//            if(cellGroupProposition.equals("Affluent Retirees")){
//                cellGroupProposition = "AFF";
//            }else if (cellGroupProposition.equals("Mid-Career")){
//                cellGroupProposition = "MID";
//            }else if (cellGroupProposition.equals("Small Business")){
//                cellGroupProposition = "SMB";
//            }else{
//                cellGroupProposition = "GEN";
//            }


            //  Cell Group from IH
//            String cellGroupIh = ihRecords.get(0).get("Cell Group");
//            //  Verifying  cell Group with proposition and IH
//            if (cellGroupIh.equals(cellGroupProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
//                                + " and Expected Cell Group:- " + cellGroupProposition);
//            }


//            // Validating Operator from Hard coded against IH
//            //Opertor is hard codeded
//            String operatorProposition = "";
//            //  Treatment Id from IH
//            String operatorIh = ihRecords.get(0).get("Operator");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (!operatorIh.equals(operatorProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Operator is empty/Null - Operator:- " + operatorIh);
//            }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH

            String strExpectedControl = strCID.substring(strCID.length()-2,strCID.length()-1);
            strExpectedControl = (strExpectedControl.equals("0") ? "Y" : "N");

            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals(strExpectedControl)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + strExpectedControl);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }



    /** IH Validation Function for TFSA RRSP Xsell Branch Offer Campaign - RS23173
     *
     */

    @Then("^validate TFSA RRSP Xsell Branch Offer details against IH for \\\"([^\\\"]*)\\\" Channel with \\\"([^\\\"]*)\\\" Direction having \\\"([^\\\"]*)\\\" Outcome$")
    public void validateInternationalTFSA_RRSP_Xsell_Branch_OfferDetailsAgainstIHForChannel(String strChannelCode, String strDirection, String strOutcome) throws Throwable {

        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");


        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Fetching EXTERNAL_INPUT_FILE_LAYOUT Records
        List ExternalInputFileLayoutRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".EXTERNAL_INPUT_FILE_LAYOUT where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******EXTERNAL_INPUT_FILE_LAYOUT Database table data******" + convertToJson(ExternalInputFileLayoutRowsData));

        //Fetching CUST_EV_EB Records
        List CustEvEbRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_EV_EB where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_EV_EB Database table data******" + convertToJson(CustEvEbRowsData));




        //Fetching IH Records
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from proposition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is passed as parameter to this function
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

////            // Validating Offered on from Current date against IH
////            // Offered on from  current date
//            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
//            //  Offered on from IH
//            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
//            //  Verifying Channel with Hardcoded and IH
//            if (offeredOnIh.equals(offeredOnCurrentDate)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
//                                + " and Expected Offered On:- " + offeredOnCurrentDate);
//            }

            // Validating Outcome from Hard coded against IH
            // Outcome is passed as a parameter to this function
            String outComeHardCoded = strOutcome;
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Outcome with parameter and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }



            // Validating Lead Start Date for IPT
            String strExpectedLeadStartDate = "20230901";   //Need to be made dynamic using API call for OB Scheduler Table

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }




            // Validating Lead End Date for IPT
            String strExpectedLeadEndDate = "20230930";

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");


            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }


            // Validating Lead End Date for IPT
            String strExpectedReferenceNum = "202309";

            String strActualReferenceNum = ihRecords.get(0).get("REFERENCE_NUM");


            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualReferenceNum.equals(strExpectedReferenceNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference_Num is displayed as expected - Reference_Num:-" + strActualReferenceNum);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Reference_Num is not displayed as expected - Actual Reference_Num:- " + strActualReferenceNum
                                + " and Expected Reference_Num:- " + strExpectedReferenceNum);
            }




//            // Validating Account Number from Account Dim sheet against IH
//            // Account number from Acct_Dim sheet
//            String strACCT_NUM = getCustInsightsInputTestDataInformation().get("ACCT_NUM");
//            //  Account Number from IH
//            String strACCT_NUM_IH = ihRecords.get(0).get("Account Number");
//            //  Verifying Account with Excel and IH
//            if (strACCT_NUM.equals(strACCT_NUM_IH)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + strACCT_NUM_IH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + strACCT_NUM_IH
//                                + " and Expected Account Number:- " + strACCT_NUM);
//            }



            // Validating Zone code from Hard coded against IH
            // Zone code Blank is hardcoded
            String zoneCodeHardCoded = "";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }



            // Validating cellGroup  from Datasheet against IH
            //Cell Group from Datasheet
            String cellGroupProposition = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //Cell Group from IH
            String cellGroupIh = ihRecords.get(0).get("Cell Group");
            //Verifying  Cell Group with proposition and IH
            if (cellGroupIh.equals(cellGroupProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
                                + " and Expected Cell Group:- " + cellGroupProposition);
            }


//            // Validating Operator from Hard coded against IH
//            //Opertor is hard codeded
//            String operatorProposition = "";
//            //  Treatment Id from IH
//            String operatorIh = ihRecords.get(0).get("Operator");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (!operatorIh.equals(operatorProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Operator is empty/Null - Operator:- " + operatorIh);
//            }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded

            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y")||controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y or N");
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }




            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }











    /** IH Validation Function for Accidental Death Insurance Campaign - RS23100
     *
     */
    @Then("^validate Accidental Death Insurance offer details against IH for \\\"([^\\\"]*)\\\" Channel with \\\"([^\\\"]*)\\\" Direction having \\\"([^\\\"]*)\\\" Outcome$")
    public void validateAccidentalDeathInsuranceOfferDetailsAgainstIHForChannel(String strChannelCode, String strDirection, String strOutcome) throws Throwable {

        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");



        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

//        //Fetching CUST_INSIGHTS Records
//        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".CUST_INSIGHTS where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
//        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));

        //Fetching EXTERNAL_INPUT_FILE_LAYOUT Records
        List EXTERNAL_INPUT_FILE_LAYOUT_RowsData = database.readRows("Select * from " + strDBSchema +
                ".EXTERNAL_INPUT_FILE_LAYOUT where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******EXTERNAL_INPUT_FILE_LAYOUT Database table data******" + convertToJson(EXTERNAL_INPUT_FILE_LAYOUT_RowsData));


        //Fetching IH Records
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from proposition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is passed as parameter to this function
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

////            // Validating Offered on from Current date against IH
////            // Offered on from  current date
//            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
//            //  Offered on from IH
//            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
//            //  Verifying Channel with Hardcoded and IH
//            if (offeredOnIh.equals(offeredOnCurrentDate)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
//                                + " and Expected Offered On:- " + offeredOnCurrentDate);
//            }

            // Validating Outcome from Hard coded against IH
            // Outcome is passed as a parameter to this function
            String outComeHardCoded = strOutcome;
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Outcome with parameter and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }



            // Validating Lead Start Date for IPT
//            String strOfferedOn = ihRecords.get(0).get("Offered on");
//            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");
//
//            Date dateVal = null;
//            try{
//                dateVal = format.parse("6/1/23"); //We need to make this a dynamic by pulling the value from Outbound scheduler table.
//            }catch(Exception e){e.printStackTrace();}
//
//            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = "20230601";

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }




            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
//            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
//            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");
//
//
//            Date dtOfferedOn = null;
//            try {
//                dtOfferedOn = formatOfferedOn.parse("6/30/23"); //We need to make this a dynamic by pulling the value from Outbound scheduler table.
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//            Calendar calVal = Calendar.getInstance();
//            calVal.setTime(dtOfferedOn);
//
//            //Persistence days from proposition sheet
//            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
//            int iPersistanceDays = 0;
//
//            try {
//                iPersistanceDays = Integer.parseInt(strPersistenceDays);
//                iPersistanceDays = iPersistanceDays;
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);
//
//            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = "20230630";

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");


            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }



//            // Validating Account Number from Account Dim sheet against IH
//            // Account number from Acct_Dim sheet
//            String strACCT_NUM = getCustInsightsInputTestDataInformation().get("ACCT_NUM");
//            //  Account Number from IH
//            String strACCT_NUM_IH = ihRecords.get(0).get("Account Number");
//            //  Verifying Account with Excel and IH
//            if (strACCT_NUM.equals(strACCT_NUM_IH)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + strACCT_NUM_IH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + strACCT_NUM_IH
//                                + " and Expected Account Number:- " + strACCT_NUM);
//            }



//            // Validating Zone code from Hard coded against IH
//            // Zone code REB is hardcoded
//            String zoneCodeHardCoded = "REB";
//            //  Zone code from IH
//            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
//            //  Verifying  Zone code with hard coded and IH
//            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }



//            // Validating cellGroup  from Proposition against IH
//            //cell Group from Datasheet
//            String cellGroupProposition = getCustDimInputTestDataInformation().get("Segment").trim();
////        String cellGroupProposition = "";
//
//            if(cellGroupProposition.equals("Affluent Retirees")){
//                cellGroupProposition = "AFF";
//            }else if (cellGroupProposition.equals("Mid-Career")){
//                cellGroupProposition = "MID";
//            }else if (cellGroupProposition.equals("Small Business")){
//                cellGroupProposition = "SMB";
//            }else{
//                cellGroupProposition = "GEN";
//            }


            //  Cell Group from IH
//            String cellGroupIh = ihRecords.get(0).get("Cell Group");
//            //  Verifying  cell Group with proposition and IH
//            if (cellGroupIh.equals(cellGroupProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
//                                + " and Expected Cell Group:- " + cellGroupProposition);
//            }


//            // Validating Operator from Hard coded against IH
//            //Opertor is hard codeded
//            String operatorProposition = "";
//            //  Treatment Id from IH
//            String operatorIh = ihRecords.get(0).get("Operator");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (!operatorIh.equals(operatorProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Operator is empty/Null - Operator:- " + operatorIh);
//            }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH

            String strExpectedControl = "N";
//            strExpectedControl = (strExpectedControl.equals("0") ? "Y" : "N");

            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals(strExpectedControl)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + strExpectedControl);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }



    @Then("^validate Credit Card CLI offer details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateCreditCardCLIOfferDetailsAgainstIHForChannel(String strChannelCode, String strDirection, String strOutcome) throws Throwable {

        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");

        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        //Fetching IH Records
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if(ihRecords != null){
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Channel").equals(strChannelCode)).filter(x -> x.get("Outcome").equals(strOutcome)).collect(Collectors.toList());
        }
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() >= 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is passed as a parameter to this function
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel code is passed as parameter to this function
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

////            // Validating Offered on from Current date against IH
////            // Offered on from  current date
//            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
//            //  Offered on from IH
//            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
//            //  Verifying Channel with Hardcoded and IH
//            if (offeredOnIh.equals(offeredOnCurrentDate)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
//                                + " and Expected Offered On:- " + offeredOnCurrentDate);
//            }

            // Validating Outcome from Hard coded against IH
            // Outcome is passed as a parameter to this function
            String outComeHardCoded = strOutcome;
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

//
//            // Validating Lead Start Date for IPT with Offered On Date from IH
//            String strOfferedOnIH1 = ihRecords.get(0).get("Offered on");
//            SimpleDateFormat formatOfferedOn1 = new SimpleDateFormat("MM/dd/yy hh:mm a");
//
//            Date dtOfferedOn1 = null;
//            try {
//                dtOfferedOn1 = formatOfferedOn1.parse(strOfferedOnIH1);
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//
//            Calendar calVal1 = Calendar.getInstance();
//            calVal1.setTime(dtOfferedOn1);
//
//            //File Delivery days
//            String strDeliveryDays = "1";
//            int iDeliveryDays = 0;
//
//            try {
//                iDeliveryDays = Integer.parseInt(strDeliveryDays);
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//            calVal1.add(Calendar.DAY_OF_MONTH, iDeliveryDays);
//
//            SimpleDateFormat formatLeadStartDate = new SimpleDateFormat("yyyyMMdd");
//            String strExpectedLeadStartDate = formatLeadStartDate.format(calVal1.getTime());
//
//
//            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");
//
//            //  Verifying Actual Lead Start Date with Expected Lead Start Date
//            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
//                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
//            }
////
//
//            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
//            //Fetching Offered On from IH
//            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
//            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");
//
//
//            Date dtOfferedOn = null;
//            try {
//                dtOfferedOn = formatOfferedOn.parse(strOfferedOnIH);
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//            Calendar calVal = Calendar.getInstance();
//            calVal.setTime(dtOfferedOn);
//
//            //Persistence days from proposition sheet
//            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
//            int iPersistanceDays = 0;
//
//            try {
//                iPersistanceDays = Integer.parseInt(strPersistenceDays);
//                iPersistanceDays = iPersistanceDays +1;
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//
//            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);
//
//            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
//            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());
//
//            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");
//
//
//            //  Verifying Actual Lead End Date with Expected Lead End Date
//            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
//                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
//            }



            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            if(accountNumberAcctDimSheet.length() > 13)
                accountNumberAcctDimSheet = accountNumberAcctDimSheet.substring(accountNumberAcctDimSheet.length()-13);

            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");

            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.length() == 13 && accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }



//            // Validating Zone code from Hard coded against IH
//            // Zone code blank is hardcoded
//            String zoneCodeHardCoded = "";
//            //  Zone code from IH
//            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
//            //  Verifying  Zone code with hard coded and IH
//            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//            }

//            // Validating Treatment (Creative Id) from Proposition against IH
//            //CreativeID from proposition sheet
//            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();
//
//            //  Treatment Id from IH
//            String treatmentIh = ihRecords.get(0).get("pyTreatment");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (treatmentIh.equals(creativeIdProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
//                                + " and Expected Treatment:- " + creativeIdProposition);
//            }



//            // Cell Group from excel sheet
//            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();
//
//            //  seed customer from excel sheet
//            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
//            //  Verifying seed customer with Excel and IH
//            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
//                                + " and Expected Cell Group :- " + cellGroupFromExcel);
//            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

//            // Validate Transit from Database
//            String transitDatabase = custDimRowData.get("ASSIGNED_FA_TRANSIT").toString().trim();
//            //  seed customer from excel sheet
//            String transitIH = ihRecords.get(0).get("Transit");
//            //  Verifying transit with DB and IH
//            if (transitIH.equals(transitDatabase)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****   Customer Transit is displayed as expected - Transit ID:-" + transitIH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Customer Transitp is not displayed as expected - Actual Transit:- " + transitIH
//                                + " and Expected TransitID :- " + transitDatabase);
//            }


//            // Validating Offer Instance id from Datasheet against IH
//            //Offer Instance id from Datasheet sheet
//            String offerInstanceId = getCustDimInputTestDataInformation().get("OII").trim();
//            String campaignWaveNumber = getCampaignWaveNumber();
//            String oiiSegmentation = offerInstanceId + campaignWaveNumber;
//
//            //  Offer Instance id from IH
//            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(oiiSegmentation)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + oiiSegmentation);
//            }


            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    /** IH Validation Function for Itrade Xsell Always on Campaign - RS23101
     *
     */

    @Then("^validate Itrade Xsell Always on offer details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateItradeXsellAlwaysOnOfferDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
        String strCID = getCustDimInputTestDataInformation().get("CIS_CUST_ID");


        //Fetching CUST_DIM Records
        Map<String, Object> custDimRowData = database.readRow("Select * from " + strDBSchema +
                ".CUST_DIM where CIS_CUST_ID='" + strCID + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        //Fetching ACCT_DIM Records
        List<Map<String, Object>> acctDimRowsData = database.readRows("Select * FROM " + strDBSchema +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num FROM " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id = '" + strCID + "')");
        LoggingUtils.log("******ACCT_DIM Database table data******" + acctDimRowsData);


        //Fetching CUST_ACCT_RLTNP_DIM Records
        List custAcctDimRowsData = database.readRows("Select * from " + strDBSchema +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Fetching CUST_INSIGHTS Records
        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));


        //Fetching IH Records
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID"));

        if (ihRecords != null) {
            ihRecords = ihRecords.stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                    .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        }
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));


        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from proposition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is passed as parameter to this function
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

////            // Validating Offered on from Current date against IH
////            // Offered on from  current date
//            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
//            //  Offered on from IH
//            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
//            //  Verifying Channel with Hardcoded and IH
//            if (offeredOnIh.equals(offeredOnCurrentDate)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
//                                + " and Expected Offered On:- " + offeredOnCurrentDate);
//            }

            // Validating Outcome from Hard coded against IH
            // Outcome is passed as a parameter to this function
            String outComeHardCoded = strOutcome;
            //  Outcome from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Outcome with parameter and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }


            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");


            Date dtOfferedOn = null;
            try {
                dtOfferedOn = formatOfferedOn.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);
                iPersistanceDays = iPersistanceDays;

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");


            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }


//            // Validating Account Number from Account Dim sheet against IH
//            // Account number from Acct_Dim sheet
//            String strACCT_NUM = getCustInsightsInputTestDataInformation().get("ACCT_NUM");
//            //  Account Number from IH
//            String strACCT_NUM_IH = ihRecords.get(0).get("Account Number");
//            //  Verifying Account with Excel and IH
//            if (strACCT_NUM.equals(strACCT_NUM_IH)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + strACCT_NUM_IH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Account Number is not displayed as expected - Actual Account Number:- " + strACCT_NUM_IH
//                                + " and Expected Account Number:- " + strACCT_NUM);
//            }


            // Validating Zone code from Hard coded against IH
            // Zone code REB is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


//            // Validating cellGroup  from Proposition against IH
//            //cell Group from Datasheet
//            String cellGroupProposition = getCustDimInputTestDataInformation().get("Segment").trim();
////        String cellGroupProposition = "";
//
//            if(cellGroupProposition.equals("Affluent Retirees")){
//                cellGroupProposition = "AFF";
//            }else if (cellGroupProposition.equals("Mid-Career")){
//                cellGroupProposition = "MID";
//            }else if (cellGroupProposition.equals("Small Business")){
//                cellGroupProposition = "SMB";
//            }else{
//                cellGroupProposition = "GEN";
//            }


            //  Cell Group from IH
//            String cellGroupIh = ihRecords.get(0).get("Cell Group");
//            //  Verifying  cell Group with proposition and IH
//            if (cellGroupIh.equals(cellGroupProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Cell Group is displayed as expected - CallGroup:-" + cellGroupIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "cell Group is not displayed as expected - Actual cell Group:- " + cellGroupIh
//                                + " and Expected Cell Group:- " + cellGroupProposition);
//            }


//            // Validating Operator from Hard coded against IH
//            //Opertor is hard codeded
//            String operatorProposition = "";
//            //  Treatment Id from IH
//            String operatorIh = ihRecords.get(0).get("Operator");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (!operatorIh.equals(operatorProposition)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Operator is empty/Null - Operator:- " + operatorIh);
//            }

//            // Validating pyCategory from Hard coded as "Arbitration" against IH
//            //Hardcoded Expected Value for Category
//            String strExpectedCategory = "Arbitration";
//            //  pyCategory from IH
//            String strActualCategory = ihRecords.get(0).get("pyCategory");
//            //  Verifying  Treatment ID with hard coded and IH
//            if (strActualCategory.equals(strExpectedCategory)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + strActualCategory);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Category is not displayed as expected - Actual Category:- " + strActualCategory
//                                + " and Expected Category:- " + strExpectedCategory);
//            }

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH

            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^Validate EMOB Notification offer details in batch file against database and pega$")
    public void validateEMOBNotificationOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException{
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.emobNotificationLogic();
    }

    @Then("^validate EMOB Notification offer details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateEMOBNotificationOfferDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Account Number from Account Dim sheet against IH
            // Account number from Acct_Dim sheet
            String accountNumberAcctDimSheet = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            //  Account Number from IH
            String accountNumberIh = ihRecords.get(0).get("Account Number");
            //  Verifying  Account number with Acct_Dim sheet and IH
            if (accountNumberIh.equals(accountNumberAcctDimSheet)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Account Number is displayed as expected - Account Number:-" + accountNumberIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Account Number is not displayed as expected - Actual Account Number:- " + accountNumberIh
                                + " and Expected Account Number:- " + accountNumberAcctDimSheet);
            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @And("^read \"([^\"]*)\" extract EMOB file with batch \"([^\"]*)\" Email Specific Text Header$")
    public void readExtractEMOBFileWithBatchEmailSpecificTextHeader(String fileName, String EmailSpecificTextHeader) throws Throwable {
        String cid = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Properties batchFileProperties = loadPropertiesFile(System.getProperty("user.dir") + "/resources/batchFile.properties");
        String file = (String) batchFileProperties.get("batchfile." + fileName + ".fileName");
        String batchFileName = getBatchFileName(file);
        String standardHeader = "CustomerID;EmailAddress;IndividualTitle;IndividualFirstName;IndividualLastName;LanguageCode;OfferExpirydate;OfferID;CampaignCode;CreativeID;PegaInteractionID;PegaResponsetrackingCode;MailID;";
        String headerValues = standardHeader + EmailSpecificTextHeader + "PrefColumn";
        batchFileCustomerOfferDetails = new ReadTextFile().readGenericTextFile(System.getProperty("user.dir") + "/src/main/resources/data/batchFiles/" + batchFileName, cid, headerValues);
        setBatchFileCustomerOfferDetails(batchFileCustomerOfferDetails);
        LoggingUtils.log((new File((String) Objects.
                        requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                batchFileCustomerOfferDetails.size() + " records are found in extract with respect to" +
                        " CID :- " + cid);
    }

    @Then("^Validate Near Primacy D2D Bundle Xsell Anniversary offer details in batch file against database and pega$")
    public void validateNearPrimacyDDBundleXsellAnniversaryOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.xsellAnniversaryLogic();
    }

    @Then("^validate Xsell Anniversary Offer offer details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateXsellAnniversaryOfferOfferDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//        System.out.println("******CUST_DIM Database table data******");


        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));
//        System.out.println("******ACCT_DIM Database table data******");

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//        System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******");

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
//        System.out.println("******IH Records Data******");
        if (ihRecords != null && ihRecords.size() == 1) {

            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);
//                System.out.println("*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
//                System.out.println("Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
//                        + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);
//                System.out.println("*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
//                System.out.println("Issue is not displayed as expected - Actual Issue:- " + issueIh
//                        + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
//                System.out.println("*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
//                System.out.println("Group is not displayed as expected - Actual Group:- " + groupIh
//                        + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
//                System.out.println("*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
//                System.out.println("Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
//                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction 'Outbound' is hardcoded
            String directionHardCoded = "Outbound";
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
//                System.out.println("*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
//                System.out.println("Direction is not displayed as expected - Actual Direction:- " + directionIh
//                        + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel 'EML' is hardcoded
            String channelHardCoded = "EML";
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
//                System.out.println("*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
//                System.out.println("Channel is not displayed as expected - Actual Channel:- " + channelIh
//                        + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead start date from outbound scheduler table
            String waveStartDate = "20230801";
            //  Offer Start date from IH
            String waveStartDateIh = ihRecords.get(0).get("Lead Start Date");
            //  Verifying Wave start date with DDR and IH
            if (waveStartDateIh.equals(waveStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead start date is displayed as expected - Lead start date:-" + waveStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead start date is not displayed as expected - Actual Lead Start date:- " + waveStartDate
                                + " and Expected Lead start date:- " + waveStartDateIh);
            }

            // Validating Lead end date from outbound scheduler table
            String waveExpiryDate = "20230930";
            //  Offer Start date from IH
            String waveEndDateIh = ihRecords.get(0).get("Lead End Date");
            //  Verifying Wave start date with DDR and IH
            if (waveEndDateIh.equals(waveExpiryDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead end date is displayed as expected - Lead end date:-" + waveExpiryDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead end date is not displayed as expected - Actual Lead end date:- " + waveExpiryDate
                                + " and Expected Lead end date:- " + waveEndDateIh);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome from Hard coded against IH
            // Outcome 'IPT' is hardcoded
            String outComeHardCoded = "IPT";
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
//                System.out.println("*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
//                System.out.println("Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
//                        + " and Expected Outcome:- " + outComeHardCoded);
            }


//            // Validating Zone code from Hard coded against IH
//            // Zone code 'REB' is hardcoded
//            String zoneCodeHardCoded = "REB";
//            //  Zone code from IH
//            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
//            //  Verifying  Zone code with hard coded and IH
//            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
////                System.out.println("*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                                + " and Expected Zone code:- " + zoneCodeHardCoded);
////                System.out.println("Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
////                        + " and Expected Zone code:- " + zoneCodeHardCoded);
//            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeId=null;
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();
            String creative1=creativeIdProposition.substring(0,10);
            String creative2=creativeIdProposition.substring(11,21);

            String secondDigit=seedCustomerExcel.substring(13,14);
            if ((Integer.parseInt(secondDigit)>=0) && (Integer.parseInt(secondDigit)<5)){
                creativeId=creative1;
            } else {
                creativeId=creative2;
            }

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeId)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
//                System.out.println("*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeId);
//                System.out.println("Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
//                        + " and Expected Treatment:- " + creativeId);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//                System.out.println("*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
//                System.out.println("Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
//                System.out.println("*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
//                System.out.println("Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
//                        + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String treatmentIh_offer = ihRecords.get(0).get("pyTreatment");
//            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH

            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            String offerInstance=null;
            if(treatmentIh_offer.equals("6172082301"))
            {
                offerInstance="NRA01";
            }else
            {
                offerInstance="NRB01";
            }
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerInstance)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//                System.out.println("*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerInstance);
//                System.out.println("Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                        + " and Expected Offer Instance Id:- " + offerInstance);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
//                System.out.println("*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
//                System.out.println("Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
//                        + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
//                System.out.println("*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
//                System.out.println("Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
//                        + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
//                System.out.println("*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
//                System.out.println("Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
//                        + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//            System.out.println("Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
//                    "is not displayed for the Seed customer "
//                    + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @And("^write Different Generic Dates in \"([^\"]*)\" field with \"([^\"]*)\" duration from current year into \"([^\"]*)\" sheet for \"([^\"]*)\" having \"([^\"]*)\" records$")
    public void writeDifferentGenericDatesInFieldWithDurationFromCurrentYearIntoSheetForHavingRecords(String date_column, String noofyearsList, String sheetName, String testId, String noOfRecords) throws Throwable {
        int records = Integer.parseInt(noOfRecords);
        String[] yearsList = noofyearsList.split(",");
        String noofyears = "NULL";

        for (int i = 1; i <= records; i++) {
            noofyears = (i <= yearsList.length) ? yearsList[i - 1] : "NULL";

            if (i == 1) {

                if (!noofyears.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusYears(Integer.parseInt(noofyears));
                    String calculatedDt = returnvalue.toString();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, calculatedDt);
                } else if (noofyears.equalsIgnoreCase("NULL")) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId, date_column, "NULL");
                }

            } else {

                if (!noofyears.equalsIgnoreCase("NULL")) {
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate date = LocalDate.parse(todayDate);
                    LocalDate returnvalue = date.minusDays(Integer.parseInt(noofyears));
                    String calculatedDt = returnvalue.toString();
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i, date_column, calculatedDt);
                } else if (noofyears.equalsIgnoreCase("NULL")) {
                    saveColumnValueToSpecificScenarioSheetName(projectPath + File.separator + getTestDataExcelPath(), getTestDataName(), sheetName, testId + "_Account_" + i, date_column, "NULL");
                }
            }
        }

    }

    @Then("^validate Xsell Sneak Peak Offer details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateXsellSneakPeakOfferDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//        System.out.println("******CUST_DIM Database table data******");

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));
//        System.out.println("******ACCT_DIM Database table data******");

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//        System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******");

        //EXTERNAL_INPUT_FILE_LAYOUT table data
        Map<String, Object> externalFileRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> externalFileMapObject = (Map) externalFileRowData;
        List<Map<String, String>> externalFileListMapObject = new LinkedList<>();
        externalFileListMapObject.add(externalFileMapObject);
        LoggingUtils.log("******EXTERNAL_INPUT_FILE_LAYOUT Database table data******" + convertToJson(externalFileListMapObject));

        // PA_CCUL_CUSTOMER table data
        Map<String, Object> paccRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> paccMapObject = (Map) paccRowData;
        List<Map<String, String>> paccListMapObject = new LinkedList<>();
        paccListMapObject.add(paccMapObject);
        LoggingUtils.log("******PA_CCUL_CUSTOMER Database table data******" + convertToJson(paccListMapObject));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
//        System.out.println("******IH Records Data******");
        if (ihRecords != null && ihRecords.size() == 1) {
            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);
//                System.out.println("*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
//                System.out.println("Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
//                        + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);
//                System.out.println("*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
//                System.out.println("Issue is not displayed as expected - Actual Issue:- " + issueIh
//                        + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
//                System.out.println("*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
//                System.out.println("Group is not displayed as expected - Actual Group:- " + groupIh
//                        + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
//                System.out.println("*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
//                System.out.println("Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
//                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is parameterized
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
//                System.out.println("*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
//                System.out.println("Direction is not displayed as expected - Actual Direction:- " + directionIh
//                        + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
//                System.out.println("*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
//                System.out.println("Channel is not displayed as expected - Actual Channel:- " + channelIh
//                        + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead start date from outbound scheduler table
            String waveStartDate = "20230801";
            //  Offer Start date from IH
            String waveStartDateIh = ihRecords.get(0).get("Lead Start Date");
            //  Verifying Wave start date with DDR and IH
            if (waveStartDateIh.equals(waveStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead start date is displayed as expected - Lead start date:-" + waveStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead start date is not displayed as expected - Actual Lead Start date:- " + waveStartDate
                                + " and Expected Lead start date:- " + waveStartDateIh);
            }

            // Validating Lead end date from outbound scheduler table
            String waveExpiryDate = "20231030";
            //  Offer Start date from IH
            String waveEndDateIh = ihRecords.get(0).get("Lead End Date");
            //  Verifying Wave start date with DDR and IH
            if (waveEndDateIh.equals(waveExpiryDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead end date is displayed as expected - Lead end date:-" + waveExpiryDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead end date is not displayed as expected - Actual Lead end date:- " + waveExpiryDate
                                + " and Expected Lead end date:- " + waveEndDateIh);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome against IH
            // Outcome is parameterized
            String outComeHardCoded = strOutcome;
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Reference_num against Wave Start Date

            String expectedReferencNum = waveStartDate;
            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Wave Start Date
            if (referenceNumIh.equals(expectedReferencNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + expectedReferencNum);
            }


            // Validating Cell Group from IH against Datasheet
            // Cell Group from excel sheet
            //PA Indicator (logic in segment tab) +|+CUST_DIM.SEGMENT +|+ExternalInput.CUSTOMER_SEGMENT_DESC)
            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  seed customer from excel sheet
            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
            //  Verifying seed customer with Excel and IH
            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
            }


//            // Validating Zone code from Hard coded against IH
//            // Zone code 'REB' is hardcoded
//            String zoneCodeHardCoded = "REB";
//            //  Zone code from IH
//            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
//            //  Verifying  Zone code with hard coded and IH
//            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
////                System.out.println("*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                                + " and Expected Zone code:- " + zoneCodeHardCoded);
////                System.out.println("Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
////                        + " and Expected Zone code:- " + zoneCodeHardCoded);
//            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//                System.out.println("*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
//                System.out.println("Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
//                System.out.println("*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
//                System.out.println("Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
//                        + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String treatmentIh_offer = ihRecords.get(0).get("pyTreatment");
//            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH

            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            String offerInstance=null;

//            if(treatmentIh_offer.equals("6185092301"))
//            {
//                offerInstance="BXA01";
//            }else if(treatmentIh_offer.equals("6186092301"))
//            {
//                offerInstance="BXB01";
//            }else if(treatmentIh_offer.equals("6187092301"))
//            {
//                offerInstance="BXC01";
//            }else if(treatmentIh_offer.equals("6188092301"))
//            {
//                offerInstance="BXD01";
//            }else if(treatmentIh_offer.equals("6190092301"))
//            {
//                offerInstance="BXE01";
//            }else if(treatmentIh_offer.equals("6192092301"))
//            {
//                offerInstance="BXG01";
//            } else{
//                offerInstance="BXH01";
//            }

            offerInstance = getCustDimInputTestDataInformation().get("OII").trim();
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerInstance)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//                System.out.println("*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerInstance);
//                System.out.println("Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                        + " and Expected Offer Instance Id:- " + offerInstance);
            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
//                System.out.println("*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
//                System.out.println("Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
//                        + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
//                System.out.println("*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
//                System.out.println("Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
//                        + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
//                System.out.println("*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
//                System.out.println("Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
//                        + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//            System.out.println("Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
//                    "is not displayed for the Seed customer "
//                    + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^Validate Xsell Sneak Peak Offer details in batch file against database and pega$")
    public void validateXsellSneakPeakOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException{
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.xsellSneakPeakLogic();
    }

    @Then("^validate Xsell Reminder Offer details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateXsellReminderOfferDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//        System.out.println("******CUST_DIM Database table data******");

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));
//        System.out.println("******ACCT_DIM Database table data******");

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//        System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******");

        // PA_CCUL_CUSTOMER table data
        Map<String, Object> paccRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> paccMapObject = (Map) paccRowData;
        List<Map<String, String>> paccListMapObject = new LinkedList<>();
        paccListMapObject.add(paccMapObject);
        LoggingUtils.log("******PA_CCUL_CUSTOMER Database table data******" + convertToJson(paccListMapObject));

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
//        System.out.println("******IH Records Data******");
        if (ihRecords != null && ihRecords.size() == 1) {
            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);
//                System.out.println("*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
//                System.out.println("Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
//                        + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);
//                System.out.println("*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
//                System.out.println("Issue is not displayed as expected - Actual Issue:- " + issueIh
//                        + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
//                System.out.println("*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
//                System.out.println("Group is not displayed as expected - Actual Group:- " + groupIh
//                        + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
//                System.out.println("*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
//                System.out.println("Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
//                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is parameterized
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
//                System.out.println("*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
//                System.out.println("Direction is not displayed as expected - Actual Direction:- " + directionIh
//                        + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
//                System.out.println("*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
//                System.out.println("Channel is not displayed as expected - Actual Channel:- " + channelIh
//                        + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead start date from outbound scheduler table
            String waveStartDate = "20230801";
            //  Offer Start date from IH
            String waveStartDateIh = ihRecords.get(0).get("Lead Start Date");
            //  Verifying Wave start date with DDR and IH
            if (waveStartDateIh.equals(waveStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead start date is displayed as expected - Lead start date:-" + waveStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead start date is not displayed as expected - Actual Lead Start date:- " + waveStartDate
                                + " and Expected Lead start date:- " + waveStartDateIh);
            }

            // Validating Lead end date from outbound scheduler table
            String waveExpiryDate = "20230930";
            //  Offer Start date from IH
            String waveEndDateIh = ihRecords.get(0).get("Lead End Date");
            //  Verifying Wave start date with DDR and IH
            if (waveEndDateIh.equals(waveExpiryDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead end date is displayed as expected - Lead end date:-" + waveExpiryDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead end date is not displayed as expected - Actual Lead end date:- " + waveExpiryDate
                                + " and Expected Lead end date:- " + waveEndDateIh);
            }

           /* // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }
*/
            // Validating Outcome against IH
            // Outcome is parameterized
            String outComeHardCoded = strOutcome;
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Reference_num against Wave Start Date

            String expectedReferencNum = waveStartDate;
            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Wave Start Date
            if (referenceNumIh.equals(expectedReferencNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + expectedReferencNum);
            }


            // Validating Cell Group from IH against Datasheet
            // Cell Group from excel sheet
            //PA Indicator (logic in segment tab) +|+CUST_DIM.SEGMENT +|+ExternalInput.CUSTOMER_SEGMENT_DESC)
            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();

            //  seed customer from excel sheet
            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
            //  Verifying seed customer with Excel and IH
            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
            }


//            // Validating Zone code from Hard coded against IH
//            // Zone code 'REB' is hardcoded
//            String zoneCodeHardCoded = "REB";
//            //  Zone code from IH
//            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
//            //  Verifying  Zone code with hard coded and IH
//            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
////                System.out.println("*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                                + " and Expected Zone code:- " + zoneCodeHardCoded);
////                System.out.println("Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
////                        + " and Expected Zone code:- " + zoneCodeHardCoded);
//            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//                System.out.println("*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
//                System.out.println("Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
//                System.out.println("*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
//                System.out.println("Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
//                        + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String treatmentIh_offer = ihRecords.get(0).get("pyTreatment");
//            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH

            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            String offerInstance=null;

//            if(treatmentIh_offer.equals("6185092301"))
//            {
//                offerInstance="BXA01";
//            }else if(treatmentIh_offer.equals("6186092301"))
//            {
//                offerInstance="BXB01";
//            }else if(treatmentIh_offer.equals("6187092301"))
//            {
//                offerInstance="BXC01";
//            }else if(treatmentIh_offer.equals("6188092301"))
//            {
//                offerInstance="BXD01";
//            }else if(treatmentIh_offer.equals("6190092301"))
//            {
//                offerInstance="BXE01";
//            }else if(treatmentIh_offer.equals("6192092301"))
//            {
//                offerInstance="BXG01";
//            } else{
//                offerInstance="BXH01";
//            }

//            offerInstance = getCustDimInputTestDataInformation().get("OII").trim();
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(offerInstance)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
////                System.out.println("*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + offerInstance);
////                System.out.println("Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
////                        + " and Expected Offer Instance Id:- " + offerInstance);
//            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
//                System.out.println("*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
//                System.out.println("Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
//                        + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
//                System.out.println("*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
//                System.out.println("Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
//                        + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
//                System.out.println("*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
//                System.out.println("Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
//                        + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//            System.out.println("Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
//                    "is not displayed for the Seed customer "
//                    + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^Validate Xsell Reminder Offer details in batch file against database and pega$")
    public void validateXsellReminderOfferDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.xsellReminderLogic();
    }

    @Then("^validate SSI Investment Funds details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateSSIInvestmentFundsDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//        System.out.println("******CUST_DIM Database table data******");

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));
//        System.out.println("******ACCT_DIM Database table data******");

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//        System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******");

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).filter(x -> x.get("Account Number").equals(getAcctDimInputTestDataInformation().get("ACCT_NUM"))).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
//        System.out.println("******IH Records Data******");
        if (ihRecords != null && ihRecords.size() == 1) {
            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);
//                System.out.println("*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
//                System.out.println("Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
//                        + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);
//                System.out.println("*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
//                System.out.println("Issue is not displayed as expected - Actual Issue:- " + issueIh
//                        + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
//                System.out.println("*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
//                System.out.println("Group is not displayed as expected - Actual Group:- " + groupIh
//                        + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
//                System.out.println("*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
//                System.out.println("Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
//                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is parameterized
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
//                System.out.println("*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
//                System.out.println("Direction is not displayed as expected - Actual Direction:- " + directionIh
//                        + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
//                System.out.println("*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
//                System.out.println("Channel is not displayed as expected - Actual Channel:- " + channelIh
//                        + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

            // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }

            // Validating Outcome against IH
            // Outcome is parameterized
            String outComeHardCoded = strOutcome;
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Reference_num against Wave Start Date

            String acctNum = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String expectedReferencNum=acctNum.substring(acctNum.length()-13);
            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Wave Start Date
            if (referenceNumIh.equals(expectedReferencNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + expectedReferencNum);
            }


//            // Validating Cell Group from IH against Datasheet
//            // Cell Group from excel sheet
//            //PA Indicator (logic in segment tab) +|+CUST_DIM.SEGMENT +|+ExternalInput.CUSTOMER_SEGMENT_DESC)
//            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();
//
//            //  seed customer from excel sheet
//            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
//            //  Verifying seed customer with Excel and IH
//            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
//                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
//            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//                System.out.println("*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//                System.out.println("Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                        + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//                System.out.println("*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
//                System.out.println("Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
//                System.out.println("*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
//                System.out.println("Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
//                        + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

//            if(treatmentIh_offer.equals("6185092301"))
//            {
//                offerInstance="BXA01";
//            }else if(treatmentIh_offer.equals("6186092301"))
//            {
//                offerInstance="BXB01";
//            }else if(treatmentIh_offer.equals("6187092301"))
//            {
//                offerInstance="BXC01";
//            }else if(treatmentIh_offer.equals("6188092301"))
//            {
//                offerInstance="BXD01";
//            }else if(treatmentIh_offer.equals("6190092301"))
//            {
//                offerInstance="BXE01";
//            }else if(treatmentIh_offer.equals("6192092301"))
//            {
//                offerInstance="BXG01";
//            } else{
//                offerInstance="BXH01";
//            }

//            offerInstance = getCustDimInputTestDataInformation().get("OII").trim();
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(offerInstance)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
////                System.out.println("*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + offerInstance);
////                System.out.println("Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
////                        + " and Expected Offer Instance Id:- " + offerInstance);
//            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
//                System.out.println("*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
//                System.out.println("Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
//                        + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
//                System.out.println("*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
//                System.out.println("Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
//                        + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
//                System.out.println("*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
//                System.out.println("Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
//                        + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//            System.out.println("Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
//                    "is not displayed for the Seed customer "
//                    + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^validate SSI PACsetup details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateSSIPACsetupDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//        System.out.println("******CUST_DIM Database table data******");

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));
//        System.out.println("******ACCT_DIM Database table data******");

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//        System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******");

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).filter(x -> x.get("Account Number").equals(getAcctDimInputTestDataInformation().get("ACCT_NUM"))).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
//        System.out.println("******IH Records Data******");
        if (ihRecords != null && ihRecords.size() == 1) {
            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);
//                System.out.println("*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
//                System.out.println("Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
//                        + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);
//                System.out.println("*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
//                System.out.println("Issue is not displayed as expected - Actual Issue:- " + issueIh
//                        + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
//                System.out.println("*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
//                System.out.println("Group is not displayed as expected - Actual Group:- " + groupIh
//                        + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
//                System.out.println("*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
//                System.out.println("Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
//                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is parameterized
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
//                System.out.println("*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
//                System.out.println("Direction is not displayed as expected - Actual Direction:- " + directionIh
//                        + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
//                System.out.println("*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
//                System.out.println("Channel is not displayed as expected - Actual Channel:- " + channelIh
//                        + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

            // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }

            // Validating Outcome against IH
            // Outcome is parameterized
            String outComeHardCoded = strOutcome;
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Reference_num against Wave Start Date

            String acctNum = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String expectedReferencNum=acctNum.substring(acctNum.length()-13);
            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Wave Start Date
            if (referenceNumIh.equals(expectedReferencNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + expectedReferencNum);
            }


//            // Validating Cell Group from IH against Datasheet
//            // Cell Group from excel sheet
//            //PA Indicator (logic in segment tab) +|+CUST_DIM.SEGMENT +|+ExternalInput.CUSTOMER_SEGMENT_DESC)
//            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();
//
//            //  seed customer from excel sheet
//            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
//            //  Verifying seed customer with Excel and IH
//            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
//                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
//            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//                System.out.println("*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//                System.out.println("Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                        + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//                System.out.println("*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
//                System.out.println("Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
//                System.out.println("*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
//                System.out.println("Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
//                        + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

//            if(treatmentIh_offer.equals("6185092301"))
//            {
//                offerInstance="BXA01";
//            }else if(treatmentIh_offer.equals("6186092301"))
//            {
//                offerInstance="BXB01";
//            }else if(treatmentIh_offer.equals("6187092301"))
//            {
//                offerInstance="BXC01";
//            }else if(treatmentIh_offer.equals("6188092301"))
//            {
//                offerInstance="BXD01";
//            }else if(treatmentIh_offer.equals("6190092301"))
//            {
//                offerInstance="BXE01";
//            }else if(treatmentIh_offer.equals("6192092301"))
//            {
//                offerInstance="BXG01";
//            } else{
//                offerInstance="BXH01";
//            }

//            offerInstance = getCustDimInputTestDataInformation().get("OII").trim();
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(offerInstance)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
////                System.out.println("*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + offerInstance);
////                System.out.println("Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
////                        + " and Expected Offer Instance Id:- " + offerInstance);
//            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
//                System.out.println("*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
//                System.out.println("Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
//                        + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
//                System.out.println("*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
//                System.out.println("Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
//                        + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
//                System.out.println("*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
//                System.out.println("Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
//                        + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//            System.out.println("Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
//                    "is not displayed for the Seed customer "
//                    + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^Validate SSI Funds details in batch file against database and pega$")
    public void validateSSIFundsDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.SSIFundsLogic();
    }


    @Then("^validate SSI Annual Review details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateSSIAnnualReviewDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//        System.out.println("******CUST_DIM Database table data******");

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));
//        System.out.println("******ACCT_DIM Database table data******");

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//        System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******");

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).filter(x -> x.get("Account Number").equals(getAcctDimInputTestDataInformation().get("ACCT_NUM"))).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
//        System.out.println("******IH Records Data******");
        if (ihRecords != null && ihRecords.size() == 1) {
            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);
//                System.out.println("*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
//                System.out.println("Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
//                        + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);
//                System.out.println("*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
//                System.out.println("Issue is not displayed as expected - Actual Issue:- " + issueIh
//                        + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
//                System.out.println("*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
//                System.out.println("Group is not displayed as expected - Actual Group:- " + groupIh
//                        + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
//                System.out.println("*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
//                System.out.println("Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
//                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is parameterized
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
//                System.out.println("*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
//                System.out.println("Direction is not displayed as expected - Actual Direction:- " + directionIh
//                        + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
//                System.out.println("*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
//                System.out.println("Channel is not displayed as expected - Actual Channel:- " + channelIh
//                        + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

            // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }

            // Validating Outcome against IH
            // Outcome is parameterized
            String outComeHardCoded = strOutcome;
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Reference_num against Wave Start Date

            String acctNum = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String expectedReferencNum=acctNum.substring(acctNum.length()-13);
            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Wave Start Date
            if (referenceNumIh.equals(expectedReferencNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + expectedReferencNum);
            }


//            // Validating Cell Group from IH against Datasheet
//            // Cell Group from excel sheet
//            //PA Indicator (logic in segment tab) +|+CUST_DIM.SEGMENT +|+ExternalInput.CUSTOMER_SEGMENT_DESC)
//            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();
//
//            //  seed customer from excel sheet
//            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
//            //  Verifying seed customer with Excel and IH
//            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
//                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
//            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//                System.out.println("*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//                System.out.println("Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                        + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//                System.out.println("*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
//                System.out.println("Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
//                System.out.println("*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
//                System.out.println("Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
//                        + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

//            if(treatmentIh_offer.equals("6185092301"))
//            {
//                offerInstance="BXA01";
//            }else if(treatmentIh_offer.equals("6186092301"))
//            {
//                offerInstance="BXB01";
//            }else if(treatmentIh_offer.equals("6187092301"))
//            {
//                offerInstance="BXC01";
//            }else if(treatmentIh_offer.equals("6188092301"))
//            {
//                offerInstance="BXD01";
//            }else if(treatmentIh_offer.equals("6190092301"))
//            {
//                offerInstance="BXE01";
//            }else if(treatmentIh_offer.equals("6192092301"))
//            {
//                offerInstance="BXG01";
//            } else{
//                offerInstance="BXH01";
//            }

//            offerInstance = getCustDimInputTestDataInformation().get("OII").trim();
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(offerInstance)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
////                System.out.println("*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + offerInstance);
////                System.out.println("Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
////                        + " and Expected Offer Instance Id:- " + offerInstance);
//            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
//                System.out.println("*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
//                System.out.println("Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
//                        + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
//                System.out.println("*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
//                System.out.println("Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
//                        + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
//                System.out.println("*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
//                System.out.println("Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
//                        + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//            System.out.println("Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
//                    "is not displayed for the Seed customer "
//                    + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^validate SSI GoalsSetup details against IH for \"([^\"]*)\" Channel with \"([^\"]*)\" Direction having \"([^\"]*)\" Outcome$")
    public void validateSSIGoalsSetupDetailsAgainstIHForChannelWithDirectionHavingOutcome(String strChannelCode, String strDirection, String strOutcome) throws Throwable {
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//        System.out.println("******CUST_DIM Database table data******");

        List acctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(acctDimRowsData));
//        System.out.println("******ACCT_DIM Database table data******");

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" + getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//        System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******");

        // IH Records from PEGA
        List<Map<String, String>> ihRecords = new IhViaAPIbyCustomer().getIHTableDataViaAPI(getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(getCustDimInputTestDataInformation().get("OfferCodes")))
                .filter(x -> x.get("Outcome").equals(strOutcome)).filter(x -> x.get("Channel").equals(strChannelCode)).filter(x -> x.get("Account Number").equals(getAcctDimInputTestDataInformation().get("ACCT_NUM"))).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecords));
//        System.out.println("******IH Records Data******");
        if (ihRecords != null && ihRecords.size() == 1) {
            Assert.assertTrue(true, "IH Record:- " + ihRecords);
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            String offerCode = getCustDimInputTestDataInformation().get("OfferCodes");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());

//        Validating seed customer against IH
            // customer id from excel sheet
            String seedCustomerExcel = getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            //  seed customer from excel sheet
            String seedCustomerIH = ihRecords.get(0).get("pySubjectID");
            //  Verifying seed customer with Excel and IH
            if (seedCustomerIH.equals(seedCustomerExcel)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);
//                System.out.println("*****Pass Statement*****  Seed Customer is displayed as expected - Seed Customer:-" + seedCustomerIH);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
                                + " and Expected Seed Customer:- " + seedCustomerExcel);
//                System.out.println("Seed Customer is not displayed as expected - Actual Issue:- " + seedCustomerIH
//                        + " and Expected Seed Customer:- " + seedCustomerExcel);
            }


            //        Validating Issue from propsition against IH
            //Issue from proposition sheet
            String issuePropsition = csvFileRecord.get(0).get("pyIssue");
            //  Issue from IH
            String issueIh = ihRecords.get(0).get("Issue");
            //  Verifying Issue with proposition and IH
            if (issueIh.equals(issuePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);
//                System.out.println("*****Pass Statement*****  Issue is displayed as expected - Issue:-" + issueIh);

            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Issue is not displayed as expected - Actual Issue:- " + issueIh
                                + " and Expected Issue:- " + issuePropsition);
//                System.out.println("Issue is not displayed as expected - Actual Issue:- " + issueIh
//                        + " and Expected Issue:- " + issuePropsition);
            }


            //        Validating Group from propsition against IH
            //Group from proposition sheet
            String groupPropsition = csvFileRecord.get(0).get("pyGroup");
            //  Group from IH
            String groupIh = ihRecords.get(0).get("Group");
            //  Verifying Group with proposition and IH
            if (groupIh.equals(groupPropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
//                System.out.println("*****Pass Statement*****  Group is displayed as expected - Group:-" + groupIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Group is not displayed as expected - Actual Group:- " + groupIh
                                + " and Expected Group:- " + groupPropsition);
//                System.out.println("Group is not displayed as expected - Actual Group:- " + groupIh
//                        + " and Expected Group:- " + groupPropsition);
            }

            //        Validating Proposition Name from propsition against IH
            //py Name from proposition sheet
            String pyNamePropsition = csvFileRecord.get(0).get("pyName");
            //  Proposition Name from IH
            String propositionNameIh = ihRecords.get(0).get("Proposition name");
            //  Verifying Proposition Name with proposition and IH
            if (propositionNameIh.equals(pyNamePropsition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
//                System.out.println("*****Pass Statement*****  Proposition Name is displayed as expected - Proposition Name:-" + propositionNameIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
                                + " and Expected Proposition Name:- " + pyNamePropsition);
//                System.out.println("Proposition Name is not displayed as expected - Actual Proposition Name:- " + propositionNameIh
//                                + " and Expected Proposition Name:- " + pyNamePropsition);
            }

            // Validating Direction from Hard coded against IH
            // Direction is parameterized
            String directionHardCoded = strDirection;
            //  Direction from IH
            String directionIh = ihRecords.get(0).get("Direction");
            //  Verifying Direction with Hardcoded and IH
            if (directionIh.equals(directionHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
//                System.out.println("*****Pass Statement*****  Direction is displayed as expected - Direction:-" + directionIh);
            } else {
                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot"))),
                        "Direction is not displayed as expected - Actual Direction:- " + directionIh
                                + " and Expected Direction:- " + directionHardCoded);
//                System.out.println("Direction is not displayed as expected - Actual Direction:- " + directionIh
//                        + " and Expected Direction:- " + directionHardCoded);
            }

            // Validating Channel from Hard coded against IH
            // Channel is parameterized
            String channelHardCoded = strChannelCode;
            //  Channel from IH
            String channelIh = ihRecords.get(0).get("Channel");
            //  Verifying Channel with Hardcoded and IH
            if (channelIh.equals(channelHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
//                System.out.println("*****Pass Statement*****  Channel is displayed as expected - Channel:-" + channelIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Channel is not displayed as expected - Actual Channel:- " + channelIh
                                + " and Expected Channel:- " + channelHardCoded);
//                System.out.println("Channel is not displayed as expected - Actual Channel:- " + channelIh
//                        + " and Expected Channel:- " + channelHardCoded);
            }

            // Validating Lead Start Date for IPT
            String strOfferedOn = ihRecords.get(0).get("Offered on");
            SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dateVal = null;
            try {
                dateVal = format.parse(strOfferedOn);
            } catch (Exception e) {
                e.printStackTrace();
            }

            SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadStartDate = sfOutput.format(dateVal);

            String strActualLeadStartDate = ihRecords.get(0).get("Lead Start Date");

            //  Verifying Actual Lead Start Date with Expected Lead Start Date
            if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
            }


            // Validating Lead End Date for IPT
            //Fetching Offered On from IH
            String strOfferedOnIH = ihRecords.get(0).get("Offered on");
            SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

            Date dtOfferedOn = null;
            try {
                dtOfferedOn = format.parse(strOfferedOnIH);
            } catch (Exception e) {
                e.printStackTrace();
            }

            Calendar calVal = Calendar.getInstance();
            calVal.setTime(dtOfferedOn);

            //Persistence days from proposition sheet
            String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
            int iPersistanceDays = 0;

            try {
                iPersistanceDays = Integer.parseInt(strPersistenceDays);

            } catch (Exception e) {
                e.printStackTrace();
            }

            calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

            SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
            String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

            String strActualLeadEndDate = ihRecords.get(0).get("Lead End Date");

            //  Verifying Actual Lead End Date with Expected Lead End Date
            if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
            }

            // Validating Offered on from Current date against IH
            // Offered on from  current date
            String offeredOnCurrentDate = getCurrentDateTime("M/d/yy");
            //  Offered on from IH
            String offeredOnIh = ihRecords.get(0).get("Offered on").split("\\s")[0];
            //  Verifying Channel with Hardcoded and IH
            if (offeredOnIh.equals(offeredOnCurrentDate)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offered On is displayed as expected - Offered On date:-" + offeredOnIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offered On is not displayed as expected - Actual Offered On:- " + offeredOnIh
                                + " and Expected Offered On:- " + offeredOnCurrentDate);
            }

            // Validating Outcome against IH
            // Outcome is parameterized
            String outComeHardCoded = strOutcome;
            //  Out come from IH
            String outComeIh = ihRecords.get(0).get("Outcome");
            //  Verifying  Out come with Hardcoded and IH
            if (outComeIh.equals(outComeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Outcome is displayed as expected - Outcome:-" + outComeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Outcome is not displayed as expected - Actual Outcome:- " + outComeIh
                                + " and Expected Outcome:- " + outComeHardCoded);
            }

            // Validating Reference_num against Wave Start Date

            String acctNum = getAcctDimInputTestDataInformation().get("ACCT_NUM");
            String expectedReferencNum=acctNum.substring(acctNum.length()-13);
            String referenceNumIh = ihRecords.get(0).get("REFERENCE_NUM");

            //  Verifying  REFERENCE_NUM with Wave Start Date
            if (referenceNumIh.equals(expectedReferencNum)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Reference Num is displayed as expected - REFERENCE NUMBER :-" + referenceNumIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "REFERENCE NUMBER is not displayed as expected - Actual REFERENCE NUMBER :- " + referenceNumIh
                                + " and Expected REFERENCE NUMBER:- " + expectedReferencNum);
            }


//            // Validating Cell Group from IH against Datasheet
//            // Cell Group from excel sheet
//            //PA Indicator (logic in segment tab) +|+CUST_DIM.SEGMENT +|+ExternalInput.CUSTOMER_SEGMENT_DESC)
//            String cellGroupFromExcel = getCustDimInputTestDataInformation().get("CellGroup").trim();
//
//            //  seed customer from excel sheet
//            String seedCustomercellGroupIH = ihRecords.get(0).get("Cell Group");
//            //  Verifying seed customer with Excel and IH
//            if (seedCustomercellGroupIH.equals(cellGroupFromExcel)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Seed Customer Cell group is displayed as expected - Seed Customer:-" + seedCustomercellGroupIH);
//
//            } else {
//                LoggingUtils.logFailure(new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot"))),
//                        "Seed Customer Cell Group is not displayed as expected - Actual Issue:- " + seedCustomercellGroupIH
//                                + " and Expected Seed Customer Cell Group :- " + cellGroupFromExcel);
//            }


            // Validating Zone code from Hard coded against IH
            // Zone code 'REB' is hardcoded
            String zoneCodeHardCoded = "REB";
            //  Zone code from IH
            String zoneCodeIh = ihRecords.get(0).get("ZoneCode");
            //  Verifying  Zone code with hard coded and IH
            if (zoneCodeIh.equals(zoneCodeHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
//                System.out.println("*****Pass Statement*****  Zone code is displayed as expected - Zone code:-" + zoneCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
                                + " and Expected Zone code:- " + zoneCodeHardCoded);
//                System.out.println("Zone code is not displayed as expected - Actual Zone code:- " + zoneCodeIh
//                        + " and Expected Zone code:- " + zoneCodeHardCoded);
            }

            // Validating Treatment (Creative Id) from Proposition against IH
            //CreativeID from proposition sheet
            String creativeIdProposition = getCustDimInputTestDataInformation().get("CreativeID").trim();

            //  Treatment Id from IH
            String treatmentIh = ihRecords.get(0).get("pyTreatment");
            //  Verifying  Treatment ID with hard coded and IH
            if (treatmentIh.equals(creativeIdProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Treatment is displayed as expected - Treatment:-" + treatmentIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Treatment is not displayed as expected - Actual Treatment:- " + treatmentIh
                                + " and Expected Treatment:- " + creativeIdProposition);
            }


            // Validating Operator from Hard coded against IH
            //Opertor is hard codeded
            String operatorProposition = "";
            //  Treatment Id from IH
            String operatorIh = ihRecords.get(0).get("Operator");
            //  Verifying  Treatment ID with hard coded and IH
            if (!operatorIh.equals(operatorProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
//                System.out.println("*****Pass Statement*****  Operator has value instead of empty - Operator:-" + operatorIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Operator is empty/Null - Operator:- " + operatorIh);
//                System.out.println("Operator is empty/Null - Operator:- " + operatorIh);
            }

           /* // Validating Category from Hard coded against IH
            //CreativeID from proposition sheet
            String categoryHardCoded = "BAU";
            //  Treatment Id from IH
            String categoryIh = ihRecords.get(0).get("pyCategory");
            //  Verifying  Treatment ID with hard coded and IH
            if (categoryIh.equals(categoryHardCoded)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Category is displayed as expected - Category:-" + categoryIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Category is not displayed as expected - Actual Category:- " + categoryIh
                                + " and Expected Category:- " + categoryHardCoded);
            }*/

            // Validating Control Group from Hardcoded against IH
            // Control group 'Y or N' is hardcoded
            //  Control group from IH
            String controlGoupIh = ihRecords.get(0).get("Control");
            //  Verifying  Control group with hard coded and IH
            if (controlGoupIh.equals("Y") || controlGoupIh.equals("N")) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
//                System.out.println("*****Pass Statement*****  Control group is displayed as expected - Control Group:-" + controlGoupIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
                                + " and Expected Control group:- " + "Y (OR) N");
//                System.out.println("Control group is not displayed as expected - Actual Control group:- " + controlGoupIh
//                        + " and Expected Control group:- " + "Y (OR) N");
            }

            // Validating Offer Instance id from Proposition against IH
            //Offer Instance id from proposition sheet
            String offerCodeProposition = "0" + csvFileRecord.get(0).get("OfferCode").replace("CIE", "");
            //  Offer Instance id from IH
            String offerInstanceIh = ihRecords.get(0).get("OFR_INSTANCE_ID");
            //  Verifying  Offer instance ID with proposition sheet and IH
            if (offerInstanceIh.equals(offerCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
                                + " and Expected Offer Instance Id:- " + offerCodeProposition);
            }

//            if(treatmentIh_offer.equals("6185092301"))
//            {
//                offerInstance="BXA01";
//            }else if(treatmentIh_offer.equals("6186092301"))
//            {
//                offerInstance="BXB01";
//            }else if(treatmentIh_offer.equals("6187092301"))
//            {
//                offerInstance="BXC01";
//            }else if(treatmentIh_offer.equals("6188092301"))
//            {
//                offerInstance="BXD01";
//            }else if(treatmentIh_offer.equals("6190092301"))
//            {
//                offerInstance="BXE01";
//            }else if(treatmentIh_offer.equals("6192092301"))
//            {
//                offerInstance="BXG01";
//            } else{
//                offerInstance="BXH01";
//            }

//            offerInstance = getCustDimInputTestDataInformation().get("OII").trim();
//            //  Verifying  Offer instance ID with proposition sheet and IH
//            if (offerInstanceIh.equals(offerInstance)) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
////                System.out.println("*****Pass Statement*****  Offer Instance Id is displayed as expected - Offer Instance Id:-" + offerInstanceIh);
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
//                                + " and Expected Offer Instance Id:- " + offerInstance);
////                System.out.println("Offer Instance Id is not displayed as expected - Actual Offer Instance Id:- " + offerInstanceIh
////                        + " and Expected Offer Instance Id:- " + offerInstance);
//            }

            // Validating Persistence days from Proposition against IH
            //Persistence days from proposition sheet
            String persistenceDaysProposition = csvFileRecord.get(0).get("PersistenceDays");
            //  Persistence days from IH
            String persistenceDaysIh = ihRecords.get(0).get("Persistence Days");
            //  Verifying persistence with proposition sheet and IH
            if (persistenceDaysIh.equals(persistenceDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
//                System.out.println("*****Pass Statement*****  Persistence days is displayed as expected - Persistence days:-" + persistenceDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
                                + " and Expected Persistence days:- " + persistenceDaysProposition);
//                System.out.println("Persistence days is not displayed as expected - Actual Persistence days:- " + persistenceDaysIh
//                        + " and Expected Persistence days:- " + persistenceDaysProposition);
            }

            // Validating Rest period days from Proposition against IH
            //Rest period days from proposition sheet
            String restPeriodDaysProposition = csvFileRecord.get(0).get("RestPeriodDays");
            //  Rest period days from IH
            String restPeriodDaysIh = ihRecords.get(0).get("Rest Period Days");
            //  Verifying Rest period days with proposition sheet and IH
            if (restPeriodDaysIh.equals(restPeriodDaysProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
//                System.out.println("*****Pass Statement*****  Rest Period days is displayed as expected - Rest period days:-" + restPeriodDaysIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
                                + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
//                System.out.println("Rest Period days is not displayed as expected - Actual Rest Period days:- " + restPeriodDaysIh
//                        + " and  Expected Rest Period days:- " + restPeriodDaysProposition);
            }

            // Validating Campaign Code from Proposition against IH
            //Campaign Code from proposition sheet
            String campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode");
            //  Campaign Code from IH
            String campaignCodeIh = ihRecords.get(0).get("Campaign Code");
            //  Verifying Campaign Code with proposition sheet and IH
            if (campaignCodeIh.equals(campaignCodeProposition)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
//                System.out.println("*****Pass Statement*****  Campaign code is displayed as expected - Campaign code:-" + campaignCodeIh);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
                                + " and  Expected Campaign code:- " + campaignCodeProposition);
//                System.out.println("Campaign code is not displayed as expected - Actual Campaign code:- " + campaignCodeIh
//                        + " and  Expected Campaign code:- " + campaignCodeProposition);
            }
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
                            "is not displayed for the Seed customer "
                            + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
//            System.out.println("Offer " + getCustDimInputTestDataInformation().get("OfferCodes") +
//                    "is not displayed for the Seed customer "
//                    + getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    @Then("^Validate SSI AnnualReview details in batch file against database and pega$")
    public void validateSSIAnnualReviewDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException{
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.SSIAnnualReviewLogic();
    }

    @Then("^Validate SSI GoalsSetup details in batch file against database and pega$")
    public void validateSSIGoalsSetupDetailsInBatchFileAgainstDatabaseAndPega() throws ParseException {
        D2DChannelLogic d2DChannelLogic = new D2DChannelLogic();
        d2DChannelLogic.SSIGoalsSetupLogic();
    }
}