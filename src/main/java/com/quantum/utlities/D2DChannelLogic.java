package com.quantum.utlities;

import com.qmetry.qaf.automation.core.ConfigurationManager;
import com.quantum.api.IhViaAPIbyCustomer;
import com.quantum.baseclass.BasePage;
import com.quantum.steps.StepDefinition;
import com.quantum.utility.LoggingUtils;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.time.*;
import java.text.*;
import java.util.stream.Collectors;

import static com.quantum.webpages.APPStudio.*;

public class D2DChannelLogic extends BasePage {

    /**
     * This function is added to override the Old Logic to fetch IH records with New Logic using API
     * @return
     */
    private List<Map<String,String>> getIhRecords(){
        return(new IhViaAPIbyCustomer().getIHTableDataViaAPI(StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID")));
    }

    public void d2dRewardLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        /*  *** Sujoy/Pavani: Commenting PURL as is it not part of scope any more

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));

        ******/
        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String ntcFlagTestData = null;
        String ntcFlagExtract = null;
        String mobLastLoginDateTestData = null;
        String mobLastLoginDateExtract = null;
        String offerEligFlagTestData = null;
        String offerEligDateExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;
        String casl_cnsnt_Database = null;
        String casl_cnsnt_Extract = null;

        String strExpectedValue = null;
        String strActualValue = null;


        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getD2dLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }

                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file

//                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();


                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }


                //// Validate SRC_PRD_CD with Database purl cust table and D2D batch file
                // Validate SRC_PRD_CD with Database Acct_Dim table and D2D batch file
                srcPrdCdDatabase = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                srcPrdCdExtract = extractRecord.get(0).get("SRC_PRD_CD").trim();
                if (!srcPrdCdExtract.equals("SRC_PRD_CD:")) {
                    if (srcPrdCdExtract.equals(srcPrdCdDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + srcPrdCdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + srcPrdCdExtract +
                                        "and Expected(SRC Product Code):-" + srcPrdCdDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + srcPrdCdDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }

            // Validate NTC Flag with Test data and D2D batch file
            ntcFlagTestData = StepDefinition.getCustDimInputTestDataInformation().get("NTCFlag").trim();
//            ntcFlagTestData = custDimRowData.get("MCB_IND").toString().trim();
//            if(ntcFlagTestData.equalsIgnoreCase("N")  || ntcFlagTestData.equalsIgnoreCase("NULL") || ntcFlagTestData.equals("") )
//            {
//                ntcFlagTestData = "N";
//            }
            ntcFlagExtract = extractRecord.get(0).get("NTCFlag").trim();
            if (!ntcFlagExtract.equals("")) {
                if (ntcFlagExtract.equals(ntcFlagTestData)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  NTC Flag is displayed as expected and it is not null - NTC Flag :-" + ntcFlagExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "NTC Flag is not displayed as expected  Actual(Extract)-NTC Flag:-" + ntcFlagExtract +
                                    "and Expected(Test data)- NTC Flag:-" + ntcFlagTestData);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "NTC Flag is null and it should not be null Actual(Extract)- NTC Flag :-" + ntcFlagExtract +
                                "and Expected(Test data)- NTC Flag:-" + ntcFlagTestData);
            }


            // Validate MOB_LAST_LOGIN_DT with Test data and D2D batch file
            mobLastLoginDateTestData = StepDefinition.getCustDimInputTestDataInformation().get("MobileActive").trim();
            mobLastLoginDateExtract = extractRecord.get(0).get("MobileActive").trim();
            if (!mobLastLoginDateExtract.equals("")) {
                if (mobLastLoginDateExtract.equals(mobLastLoginDateTestData)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MOB_LAST_LOGIN_DT is displayed as expected and it is not null - MOB_LAST_LOGIN_DT :-" + mobLastLoginDateExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "MOB_LAST_LOGIN_DT is not displayed as expected  Actual(Extract)-MOB_LAST_LOGIN_DT:-" + mobLastLoginDateExtract +
                                    "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + mobLastLoginDateTestData);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "MOB_LAST_LOGIN_DT is null and it should not be null Actual(Extract)- MOB_LAST_LOGIN_DT :-" + mobLastLoginDateExtract +
                                "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + mobLastLoginDateTestData);
            }

            // Validate casl_consent flag project data  and D2D batch file
            casl_cnsnt_Database = StepDefinition.getCustDimInputTestDataInformation().get("CaslCnsnt").trim();
//            casl_cnsnt_Database = custDimRowData.get("CASL_CONSENT_F").toString().trim();
//            if(casl_cnsnt_Database.equalsIgnoreCase("N")  || casl_cnsnt_Database.equalsIgnoreCase("NULL") || casl_cnsnt_Database.equals("") )
//            {
//                casl_cnsnt_Database = "N";
//            }
            casl_cnsnt_Extract = extractRecord.get(0).get("CaslColumn").trim();
            if (!casl_cnsnt_Extract.equals("")) {
                if (casl_cnsnt_Extract.equals(casl_cnsnt_Database)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Casl Consent Flag is displayed as expected and it is not null - Casl Cnsnt Flag :-" + casl_cnsnt_Extract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Casl Consent Flag  is not displayed as expected  Actual(Extract)-Casl Cnsnt Flag :-" + casl_cnsnt_Extract +
                                    "and Expected(IH)-Casl Cnsnt Flag :-" + casl_cnsnt_Database);
                }
            }else if (casl_cnsnt_Extract.equals(casl_cnsnt_Database)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Casl Consent Flag is NULL and as expected Casl Cnsnt Flag :-" + casl_cnsnt_Extract);
            }
            else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Casl Consent Flag  is null and it should not be null Actual(Extract)-Casl Cnsnt Flag :-" + casl_cnsnt_Extract +
                                "and Expected(IH)-Casl Cnsnt Flag:-" + casl_cnsnt_Database);
            }

            // Validate OfferEligFlag with Test data and D2D batch file
            offerEligFlagTestData = StepDefinition.getCustDimInputTestDataInformation().get("OfferEligFlag").trim();
            offerEligDateExtract = extractRecord.get(0).get("Offer_Elig_Flag").trim();
            if (!offerEligDateExtract.equals("")) {
                if (offerEligDateExtract.equals(offerEligFlagTestData)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Elig Flag is displayed as expected and it is not null - Offer Elig Flag :-" + offerEligDateExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Elig Flag is not displayed as expected  Actual(Extract)-Offer Elig Flag:-" + offerEligDateExtract +
                                    "and Expected(Test data)- NTC Flag:-" + offerEligFlagTestData);
                }
            } else if (offerEligDateExtract.equals(offerEligFlagTestData)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Offer Elig Flag is NULL and as expected - Offer Elig Flag :-" + offerEligDateExtract);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Elig Flag is null and it should not be null Actual(Extract)- Offer Elig Flag :-" + offerEligDateExtract +
                                "and Expected(Test data)- Offer Elig Flag:-" + offerEligFlagTestData);
            }

// Validate Fields from Business DSS

            // Validate bonus_interest_rate with Test data and D2D batch file
            strExpectedValue = null;
            strActualValue = null;

            strExpectedValue = StepDefinition.getCustDimInputTestDataInformation().get("bonus_interest_rate").trim();
            strActualValue = extractRecord.get(0).get("bonus_interest_rate").trim();

            if (!strActualValue.equals("")) {
                if (strActualValue.equals(strExpectedValue)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  bonus_interest_rate is displayed as expected and it is not null - bonus_interest_rate :-" + strActualValue);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "bonus_interest_rate is not displayed as expected  Actual(Extract)-bonus_interest_rate:-" + strActualValue +
                                    "and Expected(Test data)- bonus_interest_rate:-" + strExpectedValue);
                }
            } else if (strActualValue.equals(strExpectedValue)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  bonus_interest_rate is NULL and as expected - bonus_interest_rate :-" + strActualValue);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "bonus_interest_rate is null and it should not be null Actual(Extract)- bonus_interest_rate :-" + strActualValue +
                                "and Expected(Test data)- bonus_interest_rate:-" + strExpectedValue);
            }


            // Validate upto_interest_rate with Test data and D2D batch file
            strExpectedValue = null;
            strActualValue = null;

            strExpectedValue = StepDefinition.getCustDimInputTestDataInformation().get("upto_interest_rate").trim();
            strActualValue = extractRecord.get(0).get("upto_interest_rate").trim();

            if (!strActualValue.equals("")) {
                if (strActualValue.equals(strExpectedValue)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  upto_interest_rate is displayed as expected and it is not null - upto_interest_rate :-" + strActualValue);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "upto_interest_rate is not displayed as expected  Actual(Extract)-upto_interest_rate:-" + strActualValue +
                                    "and Expected(Test data)- upto_interest_rate:-" + strExpectedValue);
                }
            } else if (strActualValue.equals(strExpectedValue)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  upto_interest_rate is NULL and as expected - upto_interest_rate :-" + strActualValue);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "upto_interest_rate is null and it should not be null Actual(Extract)- upto_interest_rate :-" + strActualValue +
                                "and Expected(Test data)- upto_interest_rate:-" + strExpectedValue);
            }

            // Validate offer_duration_months with Test data and D2D batch file
            strExpectedValue = null;
            strActualValue = null;

            strExpectedValue = StepDefinition.getCustDimInputTestDataInformation().get("offer_duration_months").trim();
            strActualValue = extractRecord.get(0).get("offer_duration_months").trim();

            if (!strActualValue.equals("")) {
                if (strActualValue.equals(strExpectedValue)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  offer_duration_months is displayed as expected and it is not null - offer_duration_months :-" + strActualValue);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "offer_duration_months is not displayed as expected  Actual(Extract)-offer_duration_months:-" + strActualValue +
                                    "and Expected(Test data)- offer_duration_months:-" + strExpectedValue);
                }
            } else if (strActualValue.equals(strExpectedValue)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  offer_duration_months is NULL and as expected - offer_duration_months :-" + strActualValue);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "offer_duration_months is null and it should not be null Actual(Extract)- offer_duration_months :-" + strActualValue +
                                "and Expected(Test data)- offer_duration_months:-" + strExpectedValue);
            }

            // Validate regular_interest_rate with Test data and D2D batch file
            strExpectedValue = null;
            strActualValue = null;

            strExpectedValue = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Regular_Rate").trim();
            strActualValue = extractRecord.get(0).get("regular_interest_rate").trim();

            if (!strActualValue.equals("")) {
                if (strActualValue.equals(strExpectedValue)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  regular_interest_rate is displayed as expected and it is not null - regular_interest_rate :-" + strActualValue);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "regular_interest_rate is not displayed as expected  Actual(Extract)-regular_interest_rate:-" + strActualValue +
                                    "and Expected(Test data)- regular_interest_rate:-" + strExpectedValue);
                }
            } else if (strActualValue.equals(strExpectedValue)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  regular_interest_rate is NULL and as expected - regular_interest_rate :-" + strActualValue);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "regular_interest_rate is null and it should not be null Actual(Extract)- regular_interest_rate :-" + strActualValue +
                                "and Expected(Test data)- regular_interest_rate:-" + strExpectedValue);
            }


            // Validate premium_period_interest_rate with Test data and D2D batch file
            strExpectedValue = null;
            strActualValue = null;

            strExpectedValue = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Premium_Interest_Rate").trim();
            strActualValue = extractRecord.get(0).get("premium_period_interest_rate").trim();

            if (!strActualValue.equals("")) {
                if (strActualValue.equals(strExpectedValue)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  premium_period_interest_rate is displayed as expected and it is not null - premium_period_interest_rate :-" + strActualValue);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "premium_period_interest_rate is not displayed as expected  Actual(Extract)-premium_period_interest_rate:-" + strActualValue +
                                    "and Expected(Test data)- premium_period_interest_rate:-" + strExpectedValue);
                }
            } else if (strActualValue.equals(strExpectedValue)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  premium_period_interest_rate is NULL and as expected - premium_period_interest_rate :-" + strActualValue);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "premium_period_interest_rate is null and it should not be null Actual(Extract)- premium_period_interest_rate :-" + strActualValue +
                                "and Expected(Test data)- premium_period_interest_rate:-" + strExpectedValue);
            }


            // Validate offer_duration_days with Test data and D2D batch file
            strExpectedValue = null;
            strActualValue = null;

            strExpectedValue = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Offer_Days").trim();
            strActualValue = extractRecord.get(0).get("offer_duration_days").trim();

            if (!strActualValue.equals("")) {
                if (strActualValue.equals(strExpectedValue)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  offer_duration_days is displayed as expected and it is not null - offer_duration_days :-" + strActualValue);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "offer_duration_days is not displayed as expected  Actual(Extract)-offer_duration_days:-" + strActualValue +
                                    "and Expected(Test data)- offer_duration_days:-" + strExpectedValue);
                }
            } else if (strActualValue.equals(strExpectedValue)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  offer_duration_days is NULL and as expected - offer_duration_days :-" + strActualValue);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "offer_duration_days is null and it should not be null Actual(Extract)- offer_duration_days :-" + strActualValue +
                                "and Expected(Test data)- offer_duration_days:-" + strExpectedValue);
            }

            // Validate mass_offer_start_date with Test data and D2D batch file
            strExpectedValue = null;
            strActualValue = null;

            strExpectedValue = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Mass_Start_Date").trim();
            strActualValue = extractRecord.get(0).get("mass_offer_start_date").trim();

            if (!strActualValue.equals("")) {
                if (strActualValue.equals(strExpectedValue)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  mass_offer_start_date is displayed as expected and it is not null - mass_offer_start_date :-" + strActualValue);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "mass_offer_start_date is not displayed as expected  Actual(Extract)-mass_offer_start_date:-" + strActualValue +
                                    "and Expected(Test data)- mass_offer_start_date:-" + strExpectedValue);
                }
            } else if (strActualValue.equals(strExpectedValue)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  mass_offer_start_date is NULL and as expected - mass_offer_start_date :-" + strActualValue);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "mass_offer_start_date is null and it should not be null Actual(Extract)- mass_offer_start_date :-" + strActualValue +
                                "and Expected(Test data)- mass_offer_start_date:-" + strExpectedValue);
            }


            // Validate mass_offer_end_date with Test data and D2D batch file
            strExpectedValue = null;
            strActualValue = null;

            strExpectedValue = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Mass_End_Date").trim();
            strActualValue = extractRecord.get(0).get("mass_offer_end_date").trim();

            if (!strActualValue.equals("")) {
                if (strActualValue.equals(strExpectedValue)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  mass_offer_end_date is displayed as expected and it is not null - mass_offer_end_date :-" + strActualValue);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "mass_offer_end_date is not displayed as expected  Actual(Extract)-mass_offer_end_date:-" + strActualValue +
                                    "and Expected(Test data)- mass_offer_end_date:-" + strExpectedValue);
                }
            } else if (strActualValue.equals(strExpectedValue)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  mass_offer_end_date is NULL and as expected - mass_offer_end_date :-" + strActualValue);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "mass_offer_end_date is null and it should not be null Actual(Extract)- mass_offer_end_date :-" + strActualValue +
                                "and Expected(Test data)- mass_offer_end_date:-" + strExpectedValue);
            }




            // Validate Preference project data  and D2D batch file
            preferenceDatabase = "eBK_INF";
            prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
            if (!prefernceExtract.equals("")) {
                if (prefernceExtract.equals(preferenceDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                "and Expected(IH)-Preference Column:-" + preferenceDatabase);
            }


        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void earlyTenureIndirectMtgSbLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String recordTypeInd = null;
        String recTypeIndExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getD2dLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {

                //Validate Record Type Indicator with the hard coded value O for opportunity record
                recordTypeInd = "O";
                cidExtract = extractRecord.get(0).get("CustomerID").trim();

                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate SRC_PRD_CD with Database purl cust table and D2D batch file
                srcPrdCdDatabase = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                srcPrdCdExtract = extractRecord.get(0).get("SRC_PRD_CD").trim();
                if (!srcPrdCdExtract.equals("SRC_PRD_CD:")) {
                    if (srcPrdCdExtract.equals(srcPrdCdDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + srcPrdCdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + srcPrdCdExtract +
                                        "and Expected(SRC Product Code):-" + srcPrdCdDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + srcPrdCdDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void d2dLatestLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

/* *** Commented by Sujoy/Pavani as purl is not in scope *****
        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));

 */
        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String ntcFlagTestData = null;
        String ntcFlagExtract = null;
        String mobLastLoginDateTestData = null;
        String mobLastLoginDateExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));

        /* *** Debugging by Pavani and Sujoy 2022-03-27   **** */
        //System.out.println("Checking IH record: ");
        //System.out.println(ihRecord);

        /* End Debugging  */

        //StepDefinition.getD2dLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        List<Map<String, String>> extractRecord = StepDefinition.getD2dLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate SRC_PRD_CD with Database purl cust table and D2D batch file
                srcPrdCdDatabase = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                srcPrdCdExtract = extractRecord.get(0).get("SRC_PRD_CD").trim();
                if (!srcPrdCdExtract.equals("SRC_PRD_CD:")) {
                    if (srcPrdCdExtract.equals(srcPrdCdDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + srcPrdCdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + srcPrdCdExtract +
                                        "and Expected(SRC Product Code):-" + srcPrdCdDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + srcPrdCdDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }

            // Validate NTC Flag with Test data and D2D batch file
            ntcFlagTestData = StepDefinition.getCustDimInputTestDataInformation().get("NTCFlag").trim();
            ntcFlagExtract = extractRecord.get(0).get("NTCFlag").trim();
            if (!ntcFlagExtract.equals("")) {
                if (ntcFlagExtract.equals(ntcFlagTestData)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  NTC Flag is displayed as expected and it is not null - NTC Flag :-" + ntcFlagExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "NTC Flag is not displayed as expected  Actual(Extract)-NTC Flag:-" + ntcFlagExtract +
                                    "and Expected(Test data)- NTC Flag:-" + ntcFlagTestData);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "NTC Flag is null and it should not be null Actual(Extract)- NTC Flag :-" + ntcFlagExtract +
                                "and Expected(Test data)- NTC Flag:-" + ntcFlagTestData);
            }


            // Validate MOB_LAST_LOGIN_DT with Test data and D2D batch file
            mobLastLoginDateTestData = StepDefinition.getCustDimInputTestDataInformation().get("MobileActive").trim();
            mobLastLoginDateExtract = extractRecord.get(0).get("MobileActive").trim();
            if (!mobLastLoginDateExtract.equals("")) {
                if (mobLastLoginDateExtract.equals(mobLastLoginDateTestData)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MOB_LAST_LOGIN_DT is displayed as expected and it is not null - MOB_LAST_LOGIN_DT :-" + mobLastLoginDateExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "MOB_LAST_LOGIN_DT is not displayed as expected  Actual(Extract)-MOB_LAST_LOGIN_DT:-" + mobLastLoginDateExtract +
                                    "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + mobLastLoginDateTestData);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "MOB_LAST_LOGIN_DT is null and it should not be null Actual(Extract)- MOB_LAST_LOGIN_DT :-" + mobLastLoginDateExtract +
                                "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + mobLastLoginDateTestData);
            }

        }

        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void d2dLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getD2dCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate PURL with Database purl cust table and D2D batch file
                purlKeyDatabase = purlCustRowData.get("PURL").toString().trim();
                purlKeyExtract = extractRecord.get(0).get("PURL").trim();
                if (!purlKeyExtract.equals("PURL:")) {
                    if (purlKeyExtract.equals(purlKeyDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Purl key is displayed as expected - Specific text:-" + purlKeyExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Purl key is not displayed as expected  Actual(Extract)-Specific text:-" + purlKeyExtract +
                                        "and Expected(Purl Cust- PURL)-Specific text:-" + purlKeyDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Purl key is null and it should not be null Expected (PURL Key Extract):-" + purlKeyDatabase);
//
                }

                // Validate Hash with Database purl cust table and D2D batch file
                hashKeyDatabase = purlCustRowData.get("HASH_KEY").toString().trim();
                hashKeyExtract = extractRecord.get(0).get("HASH").trim();
                if (!hashKeyExtract.equals("HASH:")) {
                    if (hashKeyExtract.equals(hashKeyDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Hash key is displayed as expected - Specific text:-" + hashKeyExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Hash key is not displayed as expected  Actual(Extract)-Specific text:-" + hashKeyExtract +
                                        "and Expected(Purl Cust- Hash)-Specific text:-" + hashKeyDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Hash key is null and it should not be null Expected (Hash Key Extract):-" + hashKeyDatabase);

                }

                // Validate SRC_PRD_CD with Database purl cust table and D2D batch file
                srcPrdCdDatabase = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                srcPrdCdExtract = extractRecord.get(0).get("SRC_PRD_CD").trim();
                if (!srcPrdCdExtract.equals("SRC_PRD_CD:")) {
                    if (srcPrdCdExtract.equals(srcPrdCdDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + srcPrdCdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + srcPrdCdExtract +
                                        "and Expected(SRC Product Code):-" + srcPrdCdDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + srcPrdCdDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void rdcLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getRdcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "eBK_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void rdcOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));
        List<Map<String, String>> extractRecord = StepDefinition.getRdcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void emobLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String provinceCodeDatabase = null;
        String provinceCodeExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getEmobCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }
                // Validate SRC_PRD_CD with Database purl cust table and D2D batch file
                provinceCodeDatabase = "PROV_CD:" + custDimRowData.get("PRIM_PROV_CD").toString().trim();
                provinceCodeExtract = extractRecord.get(0).get("PRIM_PROV_CD").trim();
                if (!provinceCodeExtract.equals("PROV_CD:")) {
                    if (provinceCodeExtract.equals(provinceCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Province Code is displayed as expected - Province Code:-" + provinceCodeExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Province Code is not displayed as expected  Actual(Extract)-Province Code:-" + provinceCodeExtract +
                                        "and Expected(Province Code):-" + provinceCodeDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Province Code is null and it should not be null Expected (Province Code Extract):-" + provinceCodeDatabase);
                }


                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "eCC_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void emobTouch7Logic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String provinceCodeDatabase = null;
        String provinceCodeExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcSubPrdCdDatabase = null;
        String srcSubPrdCdExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;
        String MailIDStatic = null;
        String MailIDExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT") && x.get("Channel").equals("EML")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                MailIDStatic = "";
                MailIDExtract = extractRecord.get(0).get("MailID").trim();
                if (MailIDExtract.equals(MailIDStatic)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (MailIDExtract.equals("") ? "NULL" : MailIDExtract));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail ID is not displayed as expected  Actual(Extract)-MailID:-" + (MailIDExtract.equals("") ? "NULL" : MailIDExtract) +
                                    "and Expected(Test data)-Mail ID:-" + (MailIDStatic.equals("") ? "NULL" : MailIDStatic));
                }

                // Validate SRC_PRD_CD with Database purl cust table and batch file
                provinceCodeDatabase = "PROV_CD:" + custDimRowData.get("PRIM_PROV_CD").toString().trim();
                provinceCodeExtract = extractRecord.get(0).get("ProvCode").trim();
                if (!provinceCodeExtract.equals("PROV_CD:")) {
                    if (provinceCodeExtract.equals(provinceCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Province Code is displayed as expected - Province Code:-" + provinceCodeExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Province Code is not displayed as expected  Actual(Extract)-Province Code:-" + provinceCodeExtract +
                                        "and Expected(Province Code):-" + provinceCodeDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Province Code is null and it should not be null Expected (Province Code Extract):-" + provinceCodeDatabase);
                }

                // Validate SRC_SYS_PRD_CD form acc_dim database and batch file
                srcPrdCdDatabase = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                srcPrdCdExtract = extractRecord.get(0).get("ProductCode").trim();
                if (!srcPrdCdExtract.equals("")) {
                    if (srcPrdCdExtract.equals(srcPrdCdDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + srcPrdCdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + srcPrdCdExtract +
                                        "and Expected(SRC Product Code):-" + srcPrdCdDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + srcPrdCdDatabase);
                }

                // Validate SRC_SYS_SUB_PRD_CD form acc_dim database and batch file
                srcSubPrdCdDatabase = accountDimRowData.get("SRC_SYS_SUB_PRD_CD").toString().trim();
                srcSubPrdCdExtract = extractRecord.get(0).get("SubProductCode").trim();
                if (!srcSubPrdCdExtract.equals("")) {
                    if (srcSubPrdCdExtract.equals(srcSubPrdCdDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Sub Product Code is displayed as expected - SRC Sub Product Code:-" + srcSubPrdCdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Sub Product Code is not displayed as expected  Actual(Extract)-SRC Sub Product Code:-" + srcSubPrdCdExtract +
                                        "and Expected(SRC Sub Product Code):-" + srcSubPrdCdDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Sub Product Code is null and it should not be null Expected (SRC Sub Product Code):-" + srcSubPrdCdDatabase);
                }


                // Validate Preference project data  and batch file
                preferenceDatabase = "eCC_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void emobTouch21Logic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String provinceCodeDatabase = null;
        String provinceCodeExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getEmobCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }
                // Validate SRC_PRD_CD with Database purl cust table and D2D batch file
                provinceCodeDatabase = "PROV_CD:" + custDimRowData.get("PRIM_PROV_CD").toString().trim();
                provinceCodeExtract = extractRecord.get(0).get("PRIM_PROV_CD").trim();
                if (!provinceCodeExtract.equals("PROV_CD:")) {
                    if (provinceCodeExtract.equals(provinceCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Province Code is displayed as expected - Province Code:-" + provinceCodeExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Province Code is not displayed as expected  Actual(Extract)-Province Code:-" + provinceCodeExtract +
                                        "and Expected(Province Code):-" + provinceCodeDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Province Code is null and it should not be null Expected (Province Code Extract):-" + provinceCodeDatabase);
                }


                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "eCC_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void emobNotificationLogic() throws ParseException{
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String strExpected = null;
        String strActual = null;
        String provinceCodeDatabase = null;
        String provinceCodeExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcSubPrdCdDatabase = null;
        String srcSubPrdCdExtract = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").replaceAll("-", "M").trim() + "_" + offerCode;
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }


//                Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


                // Validate SRC_PRD_CD with Database purl cust table and batch file
                strExpected = "PROV_CD:" + custDimRowData.get("PRIM_PROV_CD").toString().trim();
                strActual = extractRecord.get(0).get("ProvCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Province Code is displayed as expected - Province Code:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Province Code is not displayed as expected  Actual(Extract)-Province Code:-" + strActual +
                                        "and Expected(Province Code):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Province Code is null and it should not be null Expected (Province Code Extract):-" + strExpected);
                }

                // Validate SRC_SYS_PRD_CD form acc_dim database and batch file
                strExpected = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                strActual = extractRecord.get(0).get("ProductCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + strActual +
                                        "and Expected(SRC Product Code):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + strExpected);
                }

                // Validate SRC_SYS_SUB_PRD_CD form acc_dim database and batch file
                strExpected = accountDimRowData.get("SRC_SYS_SUB_PRD_CD").toString().trim();
                strActual = extractRecord.get(0).get("SubProductCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Sub Product Code is displayed as expected - SRC Sub Product Code:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Sub Product Code is not displayed as expected  Actual(Extract)-SRC Sub Product Code:-" + strActual +
                                        "and Expected(SRC Sub Product Code):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Sub Product Code is null and it should not be null Expected (SRC Sub Product Code):-" + strExpected);
                }

                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eCC_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
//        if (ihRecord.get(0).get("Control").equals("Y")) {
//            if (extractRecord.size() == 0) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
//                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
//                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
//                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
//            }
//        }
    }

    public void d2dOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") +
                "' AND LAST_SEQ_USED='" + StepDefinition.getPurlCustProfileInputTestDataInformation().get("LAST_SEQ_USED") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));
        List<Map<String, String>> extractRecord = StepDefinition.getD2dLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void d2dLatestOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") +
                "' AND LAST_SEQ_USED='" + StepDefinition.getPurlCustProfileInputTestDataInformation().get("LAST_SEQ_USED") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));
        List<Map<String, String>> extractRecord = StepDefinition.getD2dLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void emobOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        List<Map<String, String>> extractRecord = StepDefinition.getEmobCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void gicOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        List<Map<String, String>> extractRecord = StepDefinition.getGicEmailCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void ntcOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List<Map<String, String>> extractRecord = StepDefinition.getNtcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void ntcLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String expiryDateDatabase = null;
        String expiryDateExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getNtcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }
                // Validate SRC_PRD_CD with Database purl cust table and D2D batch file
                expiryDateDatabase = "ExpireDate:" + accountDimRowData.get("BBDWSC_SC_EXPIRY_DATE").toString().trim();
                expiryDateExtract = extractRecord.get(0).get("ExpireDate").trim();
                if (!expiryDateExtract.equals("ExpireDate:")) {
                    if (expiryDateExtract.equals(expiryDateDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Expiry Date is displayed as expected - Expiry Date:-" + expiryDateExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Expiry Date is not displayed as expected  Actual(Extract)-Expiry Date:-" + expiryDateExtract +
                                        "and Expected(Expiry Date):-" + expiryDateDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Expiry Date is null and it should not be null Expected (Expiry Date Extract):-" + expiryDateDatabase);
                }

                // Validate Preference project data  and NTC batch file
                preferenceDatabase = "eBK_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void offerDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));
        List<Map<String, String>> extractRecord = StepDefinition.getD2dCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void gicEmailLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String maturityDateDatabase = null;
        String maturityDateExtract = null;
        String mailIdDDR = null;
        String mailIdExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getGicEmailCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                offerExpiryDatePropsition = getWaveExpiryDate().replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate Maild with respect to DDR and Batch file
                mailIdDDR = getMailID();
                mailIdExtract = extractRecord.get(0).get("MailID").trim();
                if (!mailIdExtract.equals("")) {
                    if (mailIdExtract.substring(0, 2).equals(mailIdDDR) && mailIdExtract.length() == 8 &&
                            patternMatcher(mailIdExtract, "^[A-Z0-9]*$")) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Mail Id is displayed as expected - Maturity date:-" + mailIdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Mail Id is not displayed as expected(It should be alphanumeric with 8 digits " +
                                        "2 characters from DDR table and 6 digits are random and all alphabet characters " +
                                        "to be in capital letters)  Actual(Extract)-Mail Id:-" + mailIdExtract);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is null and it should not be null Expected (Mail Id Extract):-" + mailIdDDR);
                }


                // Validate Maturity date with Database and GIC batch file

                maturityDateDatabase = accountDimRowData.get("MAT_DT").toString().trim();
                maturityDateExtract = extractRecord.get(0).get("Mat_dt").trim();
                if (!maturityDateExtract.equals("")) {
                    if (maturityDateExtract.equals(maturityDateDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Maturity date is displayed as expected - Maturity date:-" + maturityDateExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Maturity date is not displayed as expected  Actual(Extract)-Maturity date:-" + maturityDateExtract +
                                        "and Expected(Maturity date):-" + maturityDateDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Maturity date is null and it should not be null Expected (Maturity date Extract):-" + maturityDateDatabase);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        } else if (ihRecord.get(0).get("Control").equals("Y")) {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "GIC offers will not goto Control group 'Y', But it went for the CID:-" + custDimRowData.get("CIS_CUST_ID").toString().trim() +
                            " and Offer code:-" + custDimRowData.get("OfferCodes").toString().trim());

        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "GIC offer is not assigned to the customer CID:-" + custDimRowData.get("CIS_CUST_ID").toString().trim() +
                            " and Offer code:-" + custDimRowData.get("OfferCodes").toString().trim());

        }
    }

    public void NTCMortgageAcquisitionLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcPrdCodeAcctDim = null;
        String srcSubPrdCodeAcctDim = null;
        String PrdSubPrdConcat = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }


                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "eBK_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }

        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void supplementaryCardcrossSellLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcPrdCodeAcctDim = null;
        String srcSubPrdCodeAcctDim = null;
        String PrdSubPrdConcat = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));

//        List<Map<String, String>> extractRecord = StepDefinition.getSupplCardCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }


                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }


                //Validate Product Code with Testdata and D2D batch File

                srcPrdCodeAcctDim = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                srcSubPrdCodeAcctDim = accountDimRowData.get("SRC_SYS_SUB_PRD_CD").toString().trim();

                srcPrdCdExtract = extractRecord.get(0).get("PrdCode").trim();

                //        SubPrdCd

                if (!srcPrdCdExtract.equals("")) {
                    if (srcPrdCdExtract.equals(srcPrdCodeAcctDim)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Product Code is displayed as expected and it is not null - Product Code :-" + srcPrdCdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Product Code is not displayed as expected  Actual(Extract)-Product Code:-" + srcPrdCdExtract +
                                        "and Expected(Database CUST_DIM)-Product Code:-" + srcPrdCodeAcctDim);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Product Code is null and it should not be null Actual(Extract)-Product Code:-" + srcPrdCdExtract +
                                    "and Expected(Database CUST_DIM)-Product Code:-" + srcPrdCodeAcctDim);

                }


                //Validate Sub Product Code with Testdata and D2D batch File
                srcSubPrdCodeAcctDim = accountDimRowData.get("SRC_SYS_SUB_PRD_CD").toString().trim();
                String srcSubPrdCdExtract = null;
                srcSubPrdCdExtract = extractRecord.get(0).get("SubPrdCd").trim();


                if (!srcSubPrdCdExtract.equals("")) {
                    if (srcSubPrdCdExtract.equals(srcSubPrdCodeAcctDim)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement***** Sub Product Code is displayed as expected and it is not null - Sub Product Code :-" + srcSubPrdCdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Sub Product Code is not displayed as expected  Actual(Extract)-Sub Product Code:-" + srcSubPrdCdExtract +
                                        "and Expected(Database ACCT_DIM)-Sub Product Code:-" + srcSubPrdCodeAcctDim);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Sub Product Code is null and it should not be null Actual(Extract)-Sub Product Code:-" + srcSubPrdCdExtract +
                                    "and Expected(Database ACCT_DIM)-Sub Product Code:-" + srcSubPrdCodeAcctDim);

                }

                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "eCC_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }

        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void mpsaCrossSellLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcPrdCodeAcctDim = null;
        String srcSubPrdCodeAcctDim = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getRdcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }


                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate Preference project data  and batch file
                if (offerCode.equals("CIE5467")) {
                    preferenceDatabase = "eBK_OFR";
                } else if (offerCode.equals("CIE5504")) {
                    preferenceDatabase = "eBK_INF";
                } else {
                    preferenceDatabase = "ePD_INV";
                }
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }


    /**
     * Method to Validate Batch File for Travel Insurance Offer
     * Date Created: 2022-04-11
     */
    public void TravelInsuranceLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        //Add Cust_Insights DB check logic here
        Map<String, Object> custInsightsRowsData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID = '" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custInsightsMapObject = (Map) custInsightsRowsData;
        List<Map<String, String>> custSightsListMapObject = new LinkedList<>();
        custSightsListMapObject.add(custInsightsMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custSightsListMapObject));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
//        String purlKeyDatabase = null;
//        String purlKeyExtract = null;
//        String hashKeyDatabase = null;
//        String hashKeyExtract = null;
//        String srcPrdCdDatabase = null;
//        String srcPrdCdExtract = null;
//        String srcPrdCodeAcctDim = null;
//        String srcSubPrdCodeAcctDim = null;
        String MailIDStatic = null;
        String MailIDExtract = null;

        //Add 2 Variables each for all 3 Email Specific Text Variables
        String Credit_Card_TypeDatasheet = null;
        String Credit_Card_TypeExtract = null;
        String Chequing_Account_FlagDatasheet = null;
        String Chequing_Account_FlagExtract = null;
        String Rewards_FlagDatasheet = null;
        String Rewards_FlagExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test Datasheet and Travel Insurance batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }


                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)

                MailIDStatic = "";
                MailIDExtract = extractRecord.get(0).get("MailID").trim();
                if (MailIDExtract.equals(MailIDStatic)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (MailIDExtract.equals("") ? "NULL" : MailIDExtract));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Credit_Card_Type is not displayed as expected  Actual(Extract)-Credit_Card_Type:-" + (MailIDExtract.equals("") ? "NULL" : MailIDExtract) +
                                    "and Expected(Test data)-Credit_Card_Type:-" + (MailIDStatic.equals("") ? "NULL" : MailIDStatic));
                }


                //Logic for 3 Email Specific Text Fields viz. Credit_Card_Type, Chequing_Account_Flag, and Rewards_Flag
                // Validate Credit_Card_Type with Test Datasheet and Travel Insurance Batch File
                Credit_Card_TypeDatasheet = StepDefinition.getCustDimInputTestDataInformation().get("Credit_Card_Type").trim();
                Credit_Card_TypeExtract = extractRecord.get(0).get("Credit_Card_Type").trim();
                if (Credit_Card_TypeExtract.equals(Credit_Card_TypeDatasheet)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Credit_Card_Type is displayed as expected - Credit_Card_Type:-" + (Credit_Card_TypeExtract.equals("") ? "NULL" : Credit_Card_TypeExtract));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Credit_Card_Type is not displayed as expected  Actual(Extract)-Credit_Card_Type:-" + (Credit_Card_TypeExtract.equals("") ? "NULL" : Credit_Card_TypeExtract) +
                                    "and Expected(Test data)-Credit_Card_Type:-" + (Credit_Card_TypeDatasheet.equals("") ? "NULL" : Credit_Card_TypeDatasheet));
                }


                // Validate Chequing_Account_Flag with Test Datasheet(Checking_Acct_F) and Travel Insurance Batch File
                Chequing_Account_FlagDatasheet = StepDefinition.getCustDimInputTestDataInformation().get("Checking_Acct_F").trim();
                Chequing_Account_FlagExtract = extractRecord.get(0).get("Chequing_Account_Flag").trim();
                if (!Chequing_Account_FlagExtract.equals("")) {
                    if (Chequing_Account_FlagExtract.equals(Chequing_Account_FlagDatasheet)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Chequing_Account_Flag is displayed as expected and it is not null - Chequing_Account_Flag:-" + Chequing_Account_FlagExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Chequing_Account_Flag is not displayed as expected  Actual(Extract)-Chequing_Account_Flag:-" + Chequing_Account_FlagExtract +
                                        "and Expected(Test data)-Checking_Acct_F:-" + Chequing_Account_FlagDatasheet);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Chequing_Account_Flag is null and it should not be null Actual(Extract)-Chequing_Account_Flag:-" + Chequing_Account_FlagExtract +
                                    "and Expected(Test data)-Checking_Acct_F:-" + Chequing_Account_FlagDatasheet);
                }


                // Validate Rewards_Flag with Test Datasheet(Rewards_F) and Travel Insurance Batch File
                Rewards_FlagDatasheet = StepDefinition.getCustDimInputTestDataInformation().get("Rewards_F").trim();
                Rewards_FlagExtract = extractRecord.get(0).get("Rewards_Flag").trim();
                if (!Rewards_FlagExtract.equals("")) {
                    if (Rewards_FlagExtract.equals(Rewards_FlagDatasheet)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Rewards_Flag is displayed as expected and it is not null - Rewards_Flag:-" + Rewards_FlagExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Rewards_Flag is not displayed as expected  Actual(Extract)-Rewards_Flag:-" + Rewards_FlagExtract +
                                        "and Expected(Test data)-Rewards_F:-" + Rewards_FlagDatasheet);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Rewards_Flag is null and it should not be null Actual(Extract)-Rewards_Flag:-" + Rewards_FlagExtract +
                                    "and Expected(Test data)-Rewards_F:-" + Rewards_FlagDatasheet);
                }


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                preferenceDatabase = "ePD_INS";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    /**
     * Method to Compare and validate Batch File Contents for D2D Payment Methods
     */

    public void D2DPaymentMethodsLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }


// Validate SRC_PRD_CD with Database Acct_Dim table and D2D batch file


                //String strTargetAccountNum = StepDefinition.getCustDimInputTestDataInformation().get("AccountNumber").trim();
                String strTargetAccountNum = ihRecord.get(0).get("Account Number").trim();

                Map<String, Object> targetAccountRecord = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                        ".ACCT_DIM where ACCT_NUM = '" + strTargetAccountNum + "'");


                strExpected = null;
                strActual = null;
                strExpected = targetAccountRecord.get("SRC_SYS_PRD_CD").toString().trim();

                strActual = extractRecord.get(0).get("SRC_PRD_CD").trim();
                if (!strActual.equals("SRC_PRD_CD:")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + strActual +
                                        "and Expected(SRC Product Code):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + strExpected);
                }


                // Validate NTC Flag with Test data and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("NTCFlag").trim();
//            ntcFlagTestData = custDimRowData.get("MCB_IND").toString().trim();
//            if(ntcFlagTestData.equalsIgnoreCase("N")  || ntcFlagTestData.equalsIgnoreCase("NULL") || ntcFlagTestData.equals("") )
//            {
//                ntcFlagTestData = "N";
//            }
                strActual = extractRecord.get(0).get("NTCFlag").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  NTC Flag is displayed as expected and it is not null - NTC Flag :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "NTC Flag is not displayed as expected  Actual(Extract)-NTC Flag:-" + strActual +
                                        "and Expected(Test data)- NTC Flag:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "NTC Flag is null and it should not be null Actual(Extract)- NTC Flag :-" + strActual +
                                    "and Expected(Test data)- NTC Flag:-" + strExpected);
                }


                // Validate MOB_LAST_LOGIN_DT with Test data and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("MobileActiveFlag").trim();
                strActual = extractRecord.get(0).get("MobileActive").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  MOB_LAST_LOGIN_DT is displayed as expected and it is not null - MOB_LAST_LOGIN_DT :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "MOB_LAST_LOGIN_DT is not displayed as expected  Actual(Extract)-MOB_LAST_LOGIN_DT:-" + strActual +
                                        "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "MOB_LAST_LOGIN_DT is null and it should not be null Actual(Extract)- MOB_LAST_LOGIN_DT :-" + strActual +
                                    "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + strExpected);
                }

                // Validate casl_consent flag project data  and D2D batch file
                strExpected = null;
                strActual = null;
                // strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CaslCnsnt").trim();
                strExpected = custDimRowData.get("CASL_CONSENT_F").toString().trim();
//            if(casl_cnsnt_Database.equalsIgnoreCase("N")  || casl_cnsnt_Database.equalsIgnoreCase("NULL") || casl_cnsnt_Database.equals("") )
//            {
//                casl_cnsnt_Database = "N";
//            }
                strActual = extractRecord.get(0).get("CASL_CONSENT_F").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Casl Consent Flag is displayed as expected and it is not null - Casl Cnsnt Flag :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Casl Consent Flag  is not displayed as expected  Actual(Extract)-Casl Cnsnt Flag :-" + strActual +
                                        "and Expected(IH)-Casl Cnsnt Flag :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Casl Consent Flag  is null and it should not be null Actual(Extract)-Casl Cnsnt Flag :-" + strActual +
                                    "and Expected(IH)-Casl Cnsnt Flag:-" + strExpected);
                }
//        ----------------------
// Visa Debit flag validation

                // Validate Visa Debit Flag with Test data and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("VisaDebitFlag").trim();
//            ntcFlagTestData = custDimRowData.get("MCB_IND").toString().trim();
//            if(ntcFlagTestData.equalsIgnoreCase("N")  || ntcFlagTestData.equalsIgnoreCase("NULL") || ntcFlagTestData.equals("") )
//            {
//                ntcFlagTestData = "N";
//            }
                strActual = extractRecord.get(0).get("Visa_Debit_Purchase").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  VisaDebitFlag is displayed as expected and it is not null - VisaDebitFlag :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "VisaDebitFlag is not displayed as expected  Actual(Extract)-VisaDebitFlag:-" + strActual +
                                        "and Expected(Test data)- VisaDebitFlag:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "VisaDebitFlag is null and it should not be null Actual(Extract)- VisaDebitFlag :-" + strActual +
                                    "and Expected(Test data)- VisaDebitFlag:-" + strExpected);
                }

//Interac Flash

                //Interac Flash flag validation

                // Validate Interac Flash flag  with Test data and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("InteracFlashFlag").trim();
//            ntcFlagTestData = custDimRowData.get("MCB_IND").toString().trim();
//            if(ntcFlagTestData.equalsIgnoreCase("N")  || ntcFlagTestData.equalsIgnoreCase("NULL") || ntcFlagTestData.equals("") )
//            {
//                ntcFlagTestData = "N";
//            }
                strActual = extractRecord.get(0).get("Interac_Flash_Purchase").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interac Flash flag is displayed as expected and it is not null - Interac Flash flag :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interac Flash flag is not displayed as expected  Actual(Extract)-Interac Flash flag:-" + strActual +
                                        "and Expected(Test data)- Interac Flash flag:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interac Flash flag is null and it should not be null Actual(Extract)- Interac Flash flag :-" + strActual +
                                    "and Expected(Test data)- Interac Flash flag:-" + strExpected);
                }

                //Digital Wallet Flag validation

                // Validate Digital Wallet flag  with Test data and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DigitalWalletFlag").trim();
//            ntcFlagTestData = custDimRowData.get("MCB_IND").toString().trim();
//            if(ntcFlagTestData.equalsIgnoreCase("N")  || ntcFlagTestData.equalsIgnoreCase("NULL") || ntcFlagTestData.equals("") )
//            {
//                ntcFlagTestData = "N";
//            }
                strActual = extractRecord.get(0).get("Digital_Wallet").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Digital_Wallet flag is displayed as expected and it is not null - Digital_Wallet flag :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Digital_Wallet flag is not displayed as expected  Actual(Extract)-Digital_Wallet flag:-" + strActual +
                                        "and Expected(Test data)- Digital_Wallet flag:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Digital_Wallet flag is null and it should not be null Actual(Extract)- Digital_Wallet flag :-" + strActual +
                                    "and Expected(Test data)- Digital_Wallet flag:-" + strExpected);
                }


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eBK_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }


    /**
     * Method to Compare and validate Batch File Contents for NTB_AdvicePlus
     */

    public void NTB_AdvicePlusLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and Batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }


                // Validate casl_consent flag project data  and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CASL_CONSENT_F").toString().trim();

                strActual = extractRecord.get(0).get("CASL_CONSENT_F").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Casl Consent Flag is displayed as expected and it is not null - Casl Cnsnt Flag :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Casl Consent Flag  is not displayed as expected  Actual(Extract)-Casl Cnsnt Flag :-" + strActual +
                                        "and Expected(IH)-Casl Cnsnt Flag :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Casl Consent Flag  is null and it should not be null Actual(Extract)-Casl Cnsnt Flag :-" + strActual +
                                    "and Expected(IH)-Casl Cnsnt Flag:-" + strExpected);
                }

                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eG_NWS";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }


    public void earlyTenureIndirectMtgEmailLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String LeadEndDate = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcPrdCodeAcctDim = null;
        String srcSubPrdCodeAcctDim = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getRdcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");

                LeadEndDate = ihRecord.get(0).get("Lead End Date").replace(",", "").trim();

                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
//                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
//                offerExpiryDatePropsition = changeDateFormat(LeadEndDate, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(LeadEndDate)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + LeadEndDate);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }


                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
//                if (responseTrackingCodeIH.startsWith("-")) {
//                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
//                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "ePD_MTG";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void ntcMappingTmrwLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcPrdCodeAcctDim = null;
        String srcSubPrdCodeAcctDim = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getRdcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }


                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate Preference project data  and batch file
                preferenceDatabase = "eBK_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void crossSellLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcPrdCodeAcctDim = null;
        String srcSubPrdCodeAcctDim = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getRdcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }


                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void supplementaryCrossSellOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List<Map<String, String>> extractRecord = StepDefinition.getSupplCardCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void crossSellOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List<Map<String, String>> extractRecord = StepDefinition.getRdcCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void spspOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        List<Map<String, String>> extractRecord = StepDefinition.getSpspCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }


    public void odpRightSizingLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> custInsightsRowsData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID = '" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custInsightsMapObject = (Map) custInsightsRowsData;
        List<Map<String, String>> custSightsListMapObject = new LinkedList<>();
        custSightsListMapObject.add(custInsightsMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(custSightsListMapObject));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String mailIDTestData = "";
        String mailIDExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;
        String acctNumProposition = null;
        String acctNumFromProposition = null;
        String acctNumExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email with Database in CUST_DIM table field PRIM_EMAIL_ADDRESS and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR") == null ? "" : custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (emailExtract.equals(emailDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Email is displayed as expected - EmailID :-" + emailExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email is not displayed as expected  Actual(Extract)-EmailID:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-EmailID:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

//                // Validate mail ID with Test data and D2D batch file
//                mailIDExtract = extractRecord.get(0).get("MailID").trim();
//                if (mailIDExtract.equals("")) {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "mailID Extract is displayed as null as expected "  );
//                } else {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "Mail ID is not null and it should be null Actual(Extract)- Mail ID :-" + mailIDExtract );
//                }


                // Validate the ACCT_NUM in the CUST_INSIGHTS with the D2D batch file

                acctNumFromProposition = custInsightsRowsData.get("ACCT_NUM").toString().trim();
                acctNumProposition = acctNumFromProposition.substring(10, acctNumFromProposition.length());
                acctNumExtract = extractRecord.get(0).get("Accountnumber").trim();
                if (!acctNumExtract.equals("")) {
                    if (acctNumExtract.equals(acctNumProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Account Number is displayed as expected and it is not null - Acct Num:-" + acctNumExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Acct Num is not displayed as expected  Actual(Extract)-Acct Num:-" + acctNumExtract +
                                        "and Expected(Test data)-Acct Num:-" + acctNumProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Account Number is null and it should not be null Actual(Extract)-Account Number :-" + acctNumExtract +
                                    "and Expected(Test data)-Acct Num is:-" + acctNumProposition);
                }


                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "eBK_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            }
            if (ihRecord.get(0).get("Control").equals("Y")) {
                if (extractRecord.size() == 0) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                    "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                    "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                    " and Offer code:-" + extractRecord.get(0).get("OfferID"));
                }
            }
        }
    }

    public void bpTxnMigrationLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String mailIDTestData = "";
        String mailIDExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email with Database in CUST_DIM table field PRIM_EMAIL_ADDRESS and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR") == null ? "" : custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (emailExtract.equals(emailDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Email is displayed as expected - EmailID :-" + emailExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email is not displayed as expected  Actual(Extract)-EmailID:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-EmailID:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }


//                // Validate mail ID with Test data and D2D batch file
//                mailIDExtract = extractRecord.get(0).get("MailID").trim();
//                if (mailIDExtract.equals("")) {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "mailID Extract is displayed as null as expected "  );
//                } else {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "Mail ID is not null and it should be null Actual(Extract)- Mail ID :-" + mailIDExtract );
//                }


                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "eBK_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            }
            if (ihRecord.get(0).get("Control").equals("Y")) {
                if (extractRecord.size() == 0) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                    "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                    "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                    " and Offer code:-" + extractRecord.get(0).get("OfferID"));
                }
            }
        }
    }


    public void creditorInsuranceLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String mailIDTestData = "";
        String mailIDExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcSubPrdCodeDataBase = null;
        String srcSubPrdCodeExtract = null;
        String MobileActiveTestData = null;
        String MobileActiveExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getCreditorinsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email with Database in CUST_DIM table field PRIM_EMAIL_ADDRESS and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR") == null ? "" : custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (emailExtract.equals(emailDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Email is displayed as expected - EmailID :-" + emailExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email is not displayed as expected  Actual(Extract)-EmailID:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-EmailID:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }


//                // Validate mail ID with Test data and D2D batch file
//                mailIDExtract = extractRecord.get(0).get("MailID").trim();
//                if (mailIDExtract.equals("")) {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "mailID Extract is displayed as null as expected "  );
//                } else {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "Mail ID is not null and it should be null Actual(Extract)- Mail ID :-" + mailIDExtract );
//                }

//                //   Validate product code from Database and Batch file
                srcPrdCdDatabase = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                srcPrdCdExtract = extractRecord.get(0).get("PrdCode").trim();
                if (!srcPrdCdExtract.equals("")) {
                    if (srcPrdCdExtract.equals(srcPrdCdDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Product Code is displayed as expected " +
                                        "and it is not null- Product Code :-" + srcPrdCdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Product Code is not displayed as expected  Actual(Extract)-Product Code:-" + srcPrdCdExtract +
                                        "and Expected(Database ACCT_DIM)-Product Code:-" + srcPrdCdDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Product Code is null and it should not be null Actual(Extract)-Product Code:-" + srcPrdCdExtract +
                                    "and Expected(Database CUST_DIM)-Product Code:-" + srcPrdCdDatabase);

                }
//
//
//                //        Validate sub product code from Database and Batch file
                srcSubPrdCodeDataBase = accountDimRowData.get("SRC_SYS_SUB_PRD_CD").toString().trim();
                srcSubPrdCodeExtract = extractRecord.get(0).get("SubPrdCd").trim();
                if (!srcSubPrdCodeExtract.equals("")) {
                    if (srcSubPrdCodeExtract.equals(srcSubPrdCodeDataBase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Sub Product Code is displayed as expected " +
                                        "and it is not null- Sub Product Code :-" + srcSubPrdCodeExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Sub Product Code is not displayed as expected  Actual(Extract)-Product Code:-" + srcSubPrdCodeExtract +
                                        "and Expected(Database ACCT_DIM)-Sub Product Code:-" + srcSubPrdCodeDataBase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Sub Product Code is null and it should not be null Actual(Extract)-Sub Product Code:-" + srcSubPrdCodeExtract +
                                    "and Expected(Database ACCT_DIM)-Sub Product Code:-" + srcSubPrdCodeDataBase);

                }

                // Validate MOB_LAST_LOGIN_DT with Test data and D2D batch file
                MobileActiveTestData = StepDefinition.getCustDimInputTestDataInformation().get("MobileActive").trim();
                MobileActiveExtract = extractRecord.get(0).get("MobileActive").trim();
                if (!MobileActiveExtract.equals("")) {
                    if (MobileActiveExtract.equals(MobileActiveTestData)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  MOB Active Flag is displayed as expected and it is not null - MOB_LAST_LOGIN_DT :-" + MobileActiveExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "MOB Active Flag is not displayed as expected  Actual(Extract)-MOB_LAST_LOGIN_DT:-" + MobileActiveExtract +
                                        "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + MobileActiveTestData);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "MMOB Active Flag is null and it should not be null Actual(Extract)- MOB_LAST_LOGIN_DT :-" + MobileActiveExtract +
                                    "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + MobileActiveTestData);
                }

                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "ePD_INS";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }


            }
            if (ihRecord.get(0).get("Control").equals("Y")) {
                if (extractRecord.size() == 0) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                    "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                    "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                    " and Offer code:-" + extractRecord.get(0).get("OfferID"));
                }
            }
        }
    }

    public String getGICOIILogic(String strDate) {
        int date = Integer.parseInt(strDate);
        String oii = null;
        if (date >= 1 && date <= 7) {
            oii = "GDD";
        } else if (date >= 8 && date <= 14) {
            oii = "GEE";
        } else if (date >= 15 && date <= 22) {
            oii = "GFF";
        } else if (date >= 23 && date <= 31) {
            oii = "GGG";
        }
        return oii;
    }

    public void creditorInsuranceOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> custInsightsRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custInsightsMapObject = (Map) custInsightsRowData;
        List<Map<String, String>> custInsightsListMapObject = new LinkedList<>();
        custInsightsListMapObject.add(custInsightsMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsListMapObject));

        List<Map<String, String>> extractRecord = StepDefinition.getCreditorinsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void spspLoanRepaymentLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String emailSpecificTextDatabase = null;
        String emailSpecificTextExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getSpspCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email with Database in CUST_DIM table field PRIM_EMAIL_ADDRESS and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR") == null ? "" : custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (emailExtract.equals(emailDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Email is displayed as expected - EmailID :-" + emailExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email is not displayed as expected  Actual(Extract)-EmailID:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-EmailID:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }


                // Validate Email Specific Text with DB Data and SPSP batch file
                String stdEndDate = accountDimRowData.get("STUDY_END_DT").toString().trim();
                emailSpecificTextDatabase = incrementDate("yyyy-MM-dd", stdEndDate, 150);
                emailSpecificTextExtract = extractRecord.get(0).get("EmailSpecificText").trim();
                if (!emailSpecificTextExtract.equals("")) {
                    if (emailSpecificTextExtract.equals(emailSpecificTextDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Specific Text is displayed as expected and it is not null - Email Specific Text :-" + emailSpecificTextExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Specific Text is not displayed as expected  Actual(Extract)-Email Specific Text:-" + emailSpecificTextExtract +
                                        "and Expected(Database CUST_DIM)-Email Specific Text:-" + emailSpecificTextDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Email Specific Text is null and it should not be null Actual(Extract)-Email Specific Text:-" + emailSpecificTextExtract +
                                    "and Expected(Database CUST_DIM)-Email Specific Text:-" + emailSpecificTextDatabase);

                }
                // Validate Preference project data  and D2D batch file
                preferenceDatabase = "NA";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }

            }
            if (ihRecord.get(0).get("Control").equals("Y")) {
                if (extractRecord.size() == 0) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                    "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                    "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                    " and Offer code:-" + extractRecord.get(0).get("OfferID"));
                }
            }
        }
    }

    public void d2dLogicWithoutCaslUpdate() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

//        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
//        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
//        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
//        purlCustListMapObject.add(purlCustMapObject);
//        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String purlKeyDatabase = null;
        String purlKeyExtract = null;
        String hashKeyDatabase = null;
        String hashKeyExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String ntcFlagTestData = null;
        String ntcFlagExtract = null;
        String mobLastLoginDateTestData = null;
        String mobLastLoginDateExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;
        String casl_cnsnt_Database = null;
        String casl_cnsnt_Extract = null;
        String offerEligFlagTestData = null;
        String offerEligDateExtract = null;

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getD2dLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }

                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                offerExpiryDatePropsition = csvFileRecord.get(0).get("OfferExpireDate");
                offerExpiryDatePropsition = changeDateFormat(offerExpiryDatePropsition, "yyyy-MM-dd").replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and D2D batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and D2D batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and D2D batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and D2D batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and D2D batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (responseTrackingCodeIH.startsWith("-")) {
                    responseTrackingCodeIH = "M" + responseTrackingCodeIH.replace("-", "");
                }
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }


                // Validate SRC_PRD_CD with Database purl cust table and D2D batch file
                srcPrdCdDatabase = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                srcPrdCdExtract = extractRecord.get(0).get("SRC_PRD_CD").trim();
                if (!srcPrdCdExtract.equals("SRC_PRD_CD:")) {
                    if (srcPrdCdExtract.equals(srcPrdCdDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + srcPrdCdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + srcPrdCdExtract +
                                        "and Expected(SRC Product Code):-" + srcPrdCdDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + srcPrdCdDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }

            // Validate NTC Flag with Test data and D2D batch file
            ntcFlagTestData = StepDefinition.getCustDimInputTestDataInformation().get("NTCFlag").trim();
//            ntcFlagTestData = custDimRowData.get("MCB_IND").toString().trim();
//            if(ntcFlagTestData.equalsIgnoreCase("N")  || ntcFlagTestData.equalsIgnoreCase("NULL") || ntcFlagTestData.equals("") )
//            {
//                ntcFlagTestData = "N";
//            }
            ntcFlagExtract = extractRecord.get(0).get("NTCFlag").trim();
            if (!ntcFlagExtract.equals("")) {
                if (ntcFlagExtract.equals(ntcFlagTestData)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  NTC Flag is displayed as expected and it is not null - NTC Flag :-" + ntcFlagExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "NTC Flag is not displayed as expected  Actual(Extract)-NTC Flag:-" + ntcFlagExtract +
                                    "and Expected(Test data)- NTC Flag:-" + ntcFlagTestData);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "NTC Flag is null and it should not be null Actual(Extract)- NTC Flag :-" + ntcFlagExtract +
                                "and Expected(Test data)- NTC Flag:-" + ntcFlagTestData);
            }


            // Validate MOB_LAST_LOGIN_DT with Test data and D2D batch file
            mobLastLoginDateTestData = StepDefinition.getCustDimInputTestDataInformation().get("MobileActive").trim();
            mobLastLoginDateExtract = extractRecord.get(0).get("MobileActive").trim();
            if (!mobLastLoginDateExtract.equals("")) {
                if (mobLastLoginDateExtract.equals(mobLastLoginDateTestData)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MOB_LAST_LOGIN_DT is displayed as expected and it is not null - MOB_LAST_LOGIN_DT :-" + mobLastLoginDateExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "MOB_LAST_LOGIN_DT is not displayed as expected  Actual(Extract)-MOB_LAST_LOGIN_DT:-" + mobLastLoginDateExtract +
                                    "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + mobLastLoginDateTestData);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "MOB_LAST_LOGIN_DT is null and it should not be null Actual(Extract)- MOB_LAST_LOGIN_DT :-" + mobLastLoginDateExtract +
                                "and Expected(Test data)- MOB_LAST_LOGIN_DT:-" + mobLastLoginDateTestData);
            }

//            // Validate casl_consent flag project data  and D2D batch file
            titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
            casl_cnsnt_Database = custDimRowData.get("CASL_CONSENT_F") == null ? "" : custDimRowData.get("CASL_CONSENT_F").toString().trim();
            casl_cnsnt_Extract = extractRecord.get(0).get("CaslColumn").trim();
            if (casl_cnsnt_Extract.equals(casl_cnsnt_Database)) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  Casl Consent Flag is displayed as expected - Casl Cnsnt Flag :-" + casl_cnsnt_Extract);
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Casl Consent Flag  is not displayed as expected  Actual(Extract)-Casl Cnsnt Flag :-" + casl_cnsnt_Extract +
                                "and Expected(IH)-Casl Cnsnt Flag :-" + casl_cnsnt_Database);
            }

            // Validate OfferEligFlag with Test data and D2D batch file
            offerEligFlagTestData = StepDefinition.getCustDimInputTestDataInformation().get("OfferEligFlag").trim();
            offerEligDateExtract = extractRecord.get(0).get("Offer_Elig_Flag").trim();
            if (!offerEligDateExtract.equals("")) {
                if (offerEligDateExtract.equals(offerEligFlagTestData)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Elig Flag is displayed as expected and it is not null - Offer Elig Flag :-" + offerEligDateExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Elig Flag is not displayed as expected  Actual(Extract)-Offer Elig Flag:-" + offerEligDateExtract +
                                    "and Expected(Test data)- NTC Flag:-" + offerEligFlagTestData);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Offer Elig Flag is null and it should not be null Actual(Extract)- Offer Elig Flag :-" + offerEligDateExtract +
                                "and Expected(Test data)- Offer Elig Flag:-" + offerEligFlagTestData);
            }

            // Validate Preference project data  and D2D batch file
            preferenceDatabase = "eBK_INF";
            prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
            if (!prefernceExtract.equals("")) {
                if (prefernceExtract.equals(preferenceDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                "and Expected(IH)-Preference Column:-" + preferenceDatabase);
            }


        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

    }

    public void cliLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'" + " AND  ACCT_SUBSYS_ID = 'KS' ");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> purlCustRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PURL_CUST_PROFILE where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> purlCustMapObject = (Map) purlCustRowData;
        List<Map<String, String>> purlCustListMapObject = new LinkedList<>();
        purlCustListMapObject.add(purlCustMapObject);
        LoggingUtils.log("******PURL CUST Database table data******" + convertToJson(purlCustListMapObject));

        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String mailIdDDR = null;
        String mailIdExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT") && x.get("Channel").equals("EML")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getCLICustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement***** Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with Outbound Scheduler Wave Expiry  and CLI Batch file
                offerExpiryDatePropsition = getWaveExpiryDate().replace("-", "");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and CLI batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and CLI batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and CLI batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and CLI batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and CLI batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate Maild with respect to DDR and CLI Batch file
                mailIdDDR = getMailID();
                mailIdExtract = extractRecord.get(0).get("MailID").trim();
                if (!mailIdExtract.equals("")) {
                    if (mailIdExtract.substring(0, 2).equals(mailIdDDR) && mailIdExtract.length() == 8 &&
                            patternMatcher(mailIdExtract, "^[A-Z0-9]*$")) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Mail Id is displayed as expected - Mail ID:-" + mailIdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Mail Id is not displayed as expected(It should be alphanumeric with 8 digits " +
                                        "2 characters from DDR table and 6 digits are random and all alphabet characters " +
                                        "to be in capital letters)  Actual(Extract)-Mail Id:-" + mailIdExtract);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is null and it should not be null Expected (Mail Id Extract):-" + mailIdDDR);
                }

                //Validate Masked Account Number from DB and CLI Batch file
                String acctNumDB = accountDimRowData.get("ACCT_NUM").toString().trim();
                if (acctNumDB.length() > 13) {
                    acctNumDB = acctNumDB.substring(acctNumDB.length() - 13);
                }
                acctNumDB = acctNumDB.concat("000");
                acctNumDB = acctNumDB.substring(0, 4) + "****" + acctNumDB.substring(8, 12) + "****";
                String acctNumExtract = extractRecord.get(0).get("AccNum").trim();
                if (!acctNumExtract.equals("")) {
                    if (acctNumExtract.equals(acctNumDB)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement***** Masked Account Number is displayed as expected and it is not null - Masked Account Number :-" + acctNumExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Masked Account Number is not displayed as expected  Actual(Extract)-Masked Account Number:-" + acctNumExtract +
                                        "and Expected(Database ACCT_DIM)-Masked Account Number:-" + acctNumDB);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Masked Account Number is null and it should not be null Actual(Extract)-Masked Account Number:-" + acctNumExtract +
                                    "and Expected(Database ACCT_DIM)-Masked Account Number:-" + acctNumDB);

                }

                //Validate approved Credit Limit from DB and CLI Batch file
                String approvedLimitDB = accountDimRowData.get("CLI_APRVD_CR_LMT").toString().trim();
                approvedLimitDB = approvedLimitDB.split("\\.")[0];
                String approvedLimitExtract = extractRecord.get(0).get("ApprvdLmt").trim();
                if (!approvedLimitExtract.equals("")) {
                    if (approvedLimitExtract.equals(approvedLimitDB)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement***** Approved Credit Limit is displayed as expected and it is not null - Approved Credit Limit :-" + approvedLimitExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Approved Credit Limit is not displayed as expected  Actual(Extract)-Approved Credit Limit:-" + approvedLimitExtract +
                                        "and Expected(Database ACCT_DIM)-Approved Credit Limit:-" + approvedLimitDB);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Approved Credit Limit is null and it should not be null Actual(Extract)-Approved Credit Limit:-" + approvedLimitExtract +
                                    "and Expected(Database ACCT_DIM)-Approved Credit Limit:-" + approvedLimitDB);

                }

                //Validate Product Code with Database and CLI Batch file
                String srcPrdCodeAcctDim = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                String srcPrdCdExtract = extractRecord.get(0).get("PrdCode").trim();
                if (!srcPrdCdExtract.equals("")) {
                    if (srcPrdCdExtract.equals(srcPrdCodeAcctDim)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Product Code is displayed as expected and it is not null - Product Code :-" + srcPrdCdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Product Code is not displayed as expected  Actual(Extract)-Product Code:-" + srcPrdCdExtract +
                                        "and Expected(Database CUST_DIM)-Product Code:-" + srcPrdCodeAcctDim);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Product Code is null and it should not be null Actual(Extract)-Product Code:-" + srcPrdCdExtract +
                                    "and Expected(Database CUST_DIM)-Product Code:-" + srcPrdCodeAcctDim);

                }


                //Validate Sub Product Code with Database and CLI Batch file
                String srcSubPrdCodeAcctDim = accountDimRowData.get("SRC_SYS_SUB_PRD_CD").toString().trim();
                String srcSubPrdCdExtract = null;
                srcSubPrdCdExtract = extractRecord.get(0).get("SubPrdCd").trim();
                if (!srcSubPrdCdExtract.equals("")) {
                    if (srcSubPrdCdExtract.equals(srcSubPrdCodeAcctDim)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement***** Sub Product Code is displayed as expected and it is not null - Sub Product Code :-" + srcSubPrdCdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Sub Product Code is not displayed as expected  Actual(Extract)-Sub Product Code:-" + srcSubPrdCdExtract +
                                        "and Expected(Database ACCT_DIM)-Sub Product Code:-" + srcSubPrdCodeAcctDim);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Sub Product Code is null and it should not be null Actual(Extract)-Sub Product Code:-" + srcSubPrdCdExtract +
                                    "and Expected(Database ACCT_DIM)-Sub Product Code:-" + srcSubPrdCodeAcctDim);

                }

                // Validating Campaign number from Proposition against IH and CLI batch file
                //Offer Instance id from proposition sheet
                String oii = StepDefinition.getCustDimInputTestDataInformation().get("OII").trim();
                String campaignWaveNumber = getCampaignWaveNumber();
                String campaignnumber = oii + campaignWaveNumber;
                String campaignnumberExtract = extractRecord.get(0).get("Campgnnumber").trim();
                //  Verifying  Offer instance ID with proposition sheet and IH
                if (campaignnumberExtract.equals(campaignnumber)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Campaign Number is displayed as expected - Offer Instance Id:-" + campaignnumberExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign Number is not displayed as expected - Actual Offer Instance Id:- " + campaignnumberExtract
                                    + " and Expected Offer Instance Id:- " + campaignnumber);
                }

                //Validate current Credit Limit from DB and CLI batch file
                String currentLimit = accountDimRowData.get("CR_CRD_LMT_AMT").toString().trim();
                String currentLimitDB = currentLimit.split("\\.")[0];
                String currentLimitExtract = null;
                currentLimitExtract = extractRecord.get(0).get("CurrenLmt").trim();
                if (!currentLimitExtract.equals("")) {
                    if (currentLimitExtract.equals(currentLimitDB)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement***** Current Credit Limit is displayed as expected and it is not null - Current Credit Limit :-" + currentLimitExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Current Credit Limit is not displayed as expected  Actual(Extract)-Current Credit Limit:-" + currentLimitExtract +
                                        "and Expected(Database ACCT_DIM)-Current Credit Limit:-" + currentLimitDB);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Current Credit Limit is null and it should not be null Actual(Extract)-Current Credit Limit:-" + currentLimitExtract +
                                    "and Expected(Database ACCT_DIM)-Current Credit Limit:-" + currentLimitDB);

                }
                // Validate Preference project data  and CLI batch file
                preferenceDatabase = "eCC_INF";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void mortgageAcqLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'" + " AND  ACCT_SUBSYS_ID = 'KS' ");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String cidDatabase = null;
        String cidExtract = null;
        String emailDatabase = null;
        String emailExtract = null;
        String titleDatabase = null;
        String titleExtract = null;
        String firstNameDatabase = null;
        String firstNameExtract = null;
        String lastNameDatabase = null;
        String lastNameExtract = null;
        String languageCodeDatabase = null;
        String languageCodeExtract = null;
        String offerExpiryDatePropsition = null;
        String offerExpiryExtract = null;
        String offerCodeProposition = null;
        String offerCodeExtract = null;
        String campaignCodeProposition = null;
        String campaignCodeExtract = null;
        String creativeIdProposition = null;
        String creativeIdExtract = null;
        String pyInteractionIH = null;
        String pyInteractionExtract = null;
        String responseTrackingCodeIH = null;
        String responseTrackingCodeExtract = null;
        String mailIdDDR = null;
        String mailIdExtract = null;
        String preferenceDatabase = null;
        String prefernceExtract = null;

        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT") && x.get("Channel").equals("EML")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getMortgageAcqCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and Mortgage Acq  Batch file
                cidDatabase = custDimRowData.get("CIS_CUST_ID").toString().trim();
                cidExtract = extractRecord.get(0).get("CustomerID").trim();
                if (cidExtract.equals(cidDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + cidExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + cidExtract +
                                    "and Expected(Database CUST_DIM)-CID:-" + cidDatabase);
                }


                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and Mortgage Acq  Batch file
                emailDatabase = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                emailExtract = extractRecord.get(0).get("EmailAddress").trim();
                if (!emailExtract.equals("")) {
                    if (emailExtract.equals(emailDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + emailExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + emailExtract +
                                        "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + emailExtract +
                                    "and Expected(Database CUST_DIM)-Email:-" + emailDatabase);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and Mortgage Acq  Batch file
                titleDatabase = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                titleExtract = extractRecord.get(0).get("IndividualTitle").trim();
                if (titleExtract.equals(titleDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + titleExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + titleExtract +
                                    "and Expected(Database CUST_DIM)-Title:-" + titleDatabase);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and Mortgage Acq Batch file
                firstNameDatabase = custDimRowData.get("INDV_FRST_NM").toString().trim();
                firstNameExtract = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!firstNameExtract.equals("")) {
                    if (firstNameExtract.equals(firstNameDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + firstNameExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + firstNameExtract +
                                        "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + firstNameExtract +
                                    "and Expected(Database CUST_DIM)-First Name:-" + firstNameDatabase);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and Mortgage Acq  Batch file
                lastNameDatabase = custDimRowData.get("INDV_LAST_NM").toString().trim();
                lastNameExtract = extractRecord.get(0).get("IndividualLastName").trim();
                if (lastNameExtract.equals(lastNameDatabase)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + lastNameExtract);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + lastNameExtract +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + lastNameDatabase);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and Mortgage Acq  Batch file
                languageCodeDatabase = custDimRowData.get("LANG_CD").toString().trim();
                if (languageCodeDatabase.equals("EN") || languageCodeDatabase.equals("en") || languageCodeDatabase.equals("E") || languageCodeDatabase.equals("e")
                        || languageCodeDatabase.equals("FR") || languageCodeDatabase.equals("fr") || languageCodeDatabase.equals("F") || languageCodeDatabase.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    languageCodeDatabase = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + languageCodeDatabase + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + languageCodeDatabase);
                }
                languageCodeExtract = extractRecord.get(0).get("LanguageCode").trim();
                if (!languageCodeExtract.equals("")) {
                    if (languageCodeExtract.equals(languageCodeDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + languageCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement***** Language code is not displayed as expected  Actual(Extract)-Language code:-" + languageCodeExtract +
                                        "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + languageCodeExtract +
                                    "and Expected(Database CUST_DIM)-Language code:-" + languageCodeDatabase);
                }

                //  Verifying offer expiry with Outbound Scheduler Wave Expiry  and Mortgage Acq Batch file
                offerExpiryDatePropsition = ihRecord.get(0).get("Lead End Date");
                offerExpiryExtract = extractRecord.get(0).get("OfferExpirydate").trim();
                if (offerExpiryExtract.equals(offerExpiryDatePropsition)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + offerExpiryExtract);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + offerExpiryExtract +
                                    "and Expected(Proposition)-Expiry date:-" + offerExpiryDatePropsition);
                }

                // Validate Offer code with Proposition and Mortgage Acq batch file
                offerCodeProposition = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                offerCodeExtract = extractRecord.get(0).get("OfferID").trim();
                if (!offerCodeExtract.equals("")) {
                    if (offerCodeExtract.equals(offerCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + offerCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + offerCodeExtract +
                                        "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + offerCodeExtract +
                                    "and Expected(Proposition)-Offer code:-" + offerCodeProposition);
                }


                // Validate Campaign code with Proposition and Mortgage Acq batch file
                campaignCodeProposition = csvFileRecord.get(0).get("CampaignCode").trim();
                campaignCodeExtract = extractRecord.get(0).get("CampaignCode").trim();
                if (!campaignCodeExtract.equals("")) {
                    if (campaignCodeExtract.equals(campaignCodeProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + campaignCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                        "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + campaignCodeExtract +
                                    "and Expected(Proposition)-Campaign code:-" + campaignCodeProposition);
                }


                // Validate Creative Id with Test data and Mortgage Acq batch file
                creativeIdProposition = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                creativeIdExtract = extractRecord.get(0).get("CreativeID").trim();
                if (!creativeIdExtract.equals("")) {
                    if (creativeIdExtract.equals(creativeIdProposition)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + creativeIdExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                        "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + creativeIdExtract +
                                    "and Expected(Test data)-Campaign code:-" + creativeIdProposition);
                }

                // Validate pxInteractionID with IH and Mortgage Acq batch file
                pyInteractionIH = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                pyInteractionExtract = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!pyInteractionExtract.equals("")) {
                    if (pyInteractionExtract.equals(pyInteractionIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + pyInteractionExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                        "and Expected(IH)-Interaction ID :-" + pyInteractionIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + pyInteractionExtract +
                                    "and Expected(IH)-Interaction ID:-" + pyInteractionIH);
                }
                // Validate Response tracking code with IH and Mortgage Acq batch file
                responseTrackingCodeIH = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                responseTrackingCodeExtract = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!responseTrackingCodeExtract.equals("")) {
                    if (responseTrackingCodeExtract.equals(responseTrackingCodeIH)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + responseTrackingCodeExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                        "and Expected(IH)-Response tracking code :-" + responseTrackingCodeIH);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + responseTrackingCodeExtract +
                                    "and Expected(IH)-Interaction ID:-" + responseTrackingCodeIH);
                }

                // Validate Maild with respect to DDR and Mortgage Acq Batch file
                mailIdDDR = getMailID();
                mailIdExtract = extractRecord.get(0).get("MailID").trim();
                if (!mailIdExtract.equals("")) {
                    if (mailIdExtract.substring(0, 2).equals(mailIdDDR) && mailIdExtract.length() == 8 &&
                            patternMatcher(mailIdExtract, "^[A-Z0-9]*$")) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Mail Id is displayed as expected - Mail ID:-" + mailIdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Mail Id is not displayed as expected(It should be alphanumeric with 8 digits " +
                                        "2 characters from DDR table and 6 digits are random and all alphabet characters " +
                                        "to be in capital letters)  Actual(Extract)-Mail Id:-" + mailIdExtract);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is null and it should not be null Expected (Mail Id Extract):-" + mailIdDDR);
                }

                // Validate Preference project data  and Mortgage Acq batch file
                preferenceDatabase = "ePD_MTG";
                prefernceExtract = extractRecord.get(0).get("PrefColumn").trim();
                if (!prefernceExtract.equals("")) {
                    if (prefernceExtract.equals(preferenceDatabase)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + prefernceExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + prefernceExtract +
                                        "and Expected(IH)-Preference Column :-" + preferenceDatabase);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + prefernceExtract +
                                    "and Expected(IH)-Preference Column:-" + preferenceDatabase);
                }

            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void latestOfferDetailsNotDisplayedInExtract() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> custInsightsRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custInsightsMapObject = (Map) custInsightsRowData;
        List<Map<String, String>> custInsightsListMapObject = new LinkedList<>();
        custInsightsListMapObject.add(custInsightsMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsListMapObject));

        List<Map<String, String>> extractRecord = StepDefinition.getLatestCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());

        if (extractRecord.size() == 0) {
            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "*****Pass Statement*****  CID:-" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +
                            "is not present in Extract");
        } else {
            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                            getScreenshot("Screenshot")))),
                    "Number of records in extracts is " + extractRecord.size() + " instead of 0 record for CID:-" +
                            StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID"));
        }
    }

    public void d2dAcquisitionLogic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> custInsightRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custInsightMapObject = (Map) custInsightRowData;
        List<Map<String, String>> custInsightListMapObject = new LinkedList<>();
        custInsightListMapObject.add(custInsightMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightListMapObject));

        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
//                if (strExpected.startsWith("-")) {
//                    strExpected = "M" + strExpected.replace("-", "");
//                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }


                // Validate MCB Flag with Database Cust_Dim table and D2D batch file
                strExpected = null;
                strActual = null;
                String mcb_indicator = custDimRowData.get("MCB_IND") == null ? "" : custDimRowData.get("MCB_IND").toString().trim();
                strActual = extractRecord.get(0).get("MCBflag").trim();
                if (mcb_indicator.equalsIgnoreCase("Y")) {
                    strExpected = "Y";
                } else {
                    strExpected = "N";
                }
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  MCB Flag is displayed as expected - MCB Flag:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " MCB Flag is not displayed as expected  Actual(Extract)-MCB Flag:-" + strActual +
                                        "and Expected(MCB Flag):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "MCB Flag is null and it should not be null Expected (MCB Flag Extract):-" + strExpected);
                }


                // Validate Cust Age with Database Cust_Dim table and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CUST_AGE").toString().trim();
                strActual = extractRecord.get(0).get("CustAge").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Customer Age is displayed as expected - CustAge:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Cust Age is not displayed as expected  Actual(Extract)-Cust Age:-" + strActual +
                                        "and Expected(Cust Age):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Cust Age is null and it should not be null Expected (Cust Age Extract):-" + strExpected);
                }

                // Validate Abandon App Account type name with Database Cust_Insights table/Cust_dim Sheet and D2D batch file
                strExpected = null;
                strActual = null;
                String abandonCount = custInsightRowData.get("CURR_VAL") == null ? "" : String.valueOf((int)Double.parseDouble(custInsightRowData.get("CURR_VAL").toString()));
//                String abandonCount = abandonCount1 == null ? "" : Integer.parseInt(abandonCount1);
//                String abandonCount1 = custInsightRowData.get("CURR_VAL") == null ? "" : custInsightRowData.get("CURR_VAL").toString();
//                String abandonCount = abandonCount1 == null ? "" : Integer.parseInt(abandonCount1);
                if (offerCode.equals("CIE5748")) {
                    switch (abandonCount) {
                        case "1":
                            strExpected = "Ultimate";
                            break;
                        case "2":
                            strExpected = "Preferred";
                            break;
                        case "3":
                            strExpected = "Basic Plus";
                            break;
                        case "4":
                            strExpected = "Basic";
                            break;
                        default:
                            strExpected = "";
                    }
                } else {
                    strExpected = "";
                }
                strActual = extractRecord.get(0).get("Abandoncount").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Abandon App Count Name is displayed as expected - Abandon Name:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Abandon App Count Name is not displayed as expected  Actual(Extract)-Abandon Name:-" + strActual +
                                    "and Expected(Abandon Name):-" + strExpected);
                }

                // Validate Most Recent Life Event from DB  and batch file
                strExpected = null;
                strActual = null;

                strActual = extractRecord.get(0).get("recentlifeevent").trim();

                String strMLSDate = custDimRowData.get("MLS_ADDED_AT_DT") == null ? "" : custDimRowData.get("MLS_ADDED_AT_DT").toString().trim();
                String strMarriageDate = custDimRowData.get("MARRIAGE_LIFE_EVENT_DT") == null ? "" : custDimRowData.get("MARRIAGE_LIFE_EVENT_DT").toString().trim();
                String strGraduationDate = custDimRowData.get("GRADUATION_LIFE_EVENT_DT") == null ? "" : custDimRowData.get("GRADUATION_LIFE_EVENT_DT").toString().trim();

                if (strMLSDate.equals("") && strMarriageDate.equals("") && strGraduationDate.equals(""))
                    strExpected = "";
                else {
                    //Creating a HashMap for Life Events and Corresponding Dates
                    Map<String, Date> lifeEvents = new HashMap<>();

                    if (strMLSDate != null && !strMLSDate.equals(""))
                        lifeEvents.put("Moving", (strMLSDate == null || strMLSDate.equals("")) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(strMLSDate));

                    if (strMarriageDate != null && !strMarriageDate.equals(""))
                        lifeEvents.put("Marriage", (strMarriageDate == null || strMarriageDate.equals("")) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(strMarriageDate));

                    if (strGraduationDate != null && !strGraduationDate.equals(""))
                        lifeEvents.put("Grad", (strGraduationDate == null || strGraduationDate.equals("")) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(strGraduationDate));


                    //Finding the Maximum (Most Recent) Date
                    Date maxDate = null;

                    for (Map.Entry<String, Date> lifeEvent : lifeEvents.entrySet()) {

                        if (lifeEvent.getValue() != null) {
                            if (maxDate == null)
                                maxDate = new Date(lifeEvent.getValue().getTime());
                            else if (maxDate.before(lifeEvent.getValue()))
                                maxDate = new Date(lifeEvent.getValue().getTime());
                        }
                    }


                    //Generating the Expected String
                    strExpected = "";
                    for (Map.Entry<String, Date> lifeEvent : lifeEvents.entrySet()) {
                        if (lifeEvent.getValue() != null) {
                            if (maxDate.equals(lifeEvent.getValue())) {
                                if (strExpected.equals(""))
                                    strExpected = new String(lifeEvent.getKey());
                                else
                                    strExpected = strExpected + "|" + new String(lifeEvent.getKey());
                            }

                        }

                    }


                }

                //Logic to check whether the Actual String is present in the Expected String
                if (strExpected.equals("")) {
                    if (strActual.equals("")) {
                        //Pass
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Most Recent Life Event is displayed as expected - Most Recent Life Event: " + strActual);
                    } else {
                        //Fail
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Most Recent Life Event is not displayed as expected  Actual(Extract)-Most Recent Life Event: " + strActual +
                                        "and Expected(Most Recent Life Event): " + strExpected);
                    }
                } else {
                    if (strActual.equals("")) {
                        //Fail
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Most Recent Life Event is not displayed as expected  Actual(Extract)-Most Recent Life Event: " + strActual +
                                        "and Expected(Most Recent Life Event): " + strExpected);
                    } else if (strExpected.contains(strActual)) {
                        //Pass
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Most Recent Life Event is displayed as expected - Most Recent Life Event: " + strActual);
                    } else {
                        //Fail
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Most Recent Life Event is not displayed as expected  Actual(Extract)-Most Recent Life Event: " + strActual +
                                        "and Expected(Most Recent Life Event): " + strExpected);

                    }
                }


/*
                if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Most Recent Life Event is displayed as expected - Most Recent Life Event: " + strActual);

                } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " Most Recent Life Event is not displayed as expected  Actual(Extract)-Most Recent Life Event: " + strActual +
                                            "and Expected(Most Recent Life Event): " + strExpected);
                }



 */
             //Pavani-24-Apr-2023 added here for new D2D Acquisition email specific DSS fields

                // Validate Fields from Business DSS

                // Validate bonus_interest_rate with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("bonus_interest_rate").trim();
                strActual = extractRecord.get(0).get("bonus_interest_rate").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  bonus_interest_rate is displayed as expected and it is not null - bonus_interest_rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "bonus_interest_rate is not displayed as expected  Actual(Extract)-bonus_interest_rate:-" + strActual +
                                        "and Expected(Test data)- bonus_interest_rate:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  bonus_interest_rate is NULL and as expected - bonus_interest_rate :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "bonus_interest_rate is null and it should not be null Actual(Extract)- bonus_interest_rate :-" + strActual +
                                    "and Expected(Test data)- bonus_interest_rate:-" + strExpected);
                }


                // Validate upto_interest_rate with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("upto_interest_rate").trim();
                strActual = extractRecord.get(0).get("upto_interest_rate").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  upto_interest_rate is displayed as expected and it is not null - upto_interest_rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "upto_interest_rate is not displayed as expected  Actual(Extract)-upto_interest_rate:-" + strActual +
                                        "and Expected(Test data)- upto_interest_rate:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  upto_interest_rate is NULL and as expected - upto_interest_rate :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "upto_interest_rate is null and it should not be null Actual(Extract)- upto_interest_rate :-" + strActual +
                                    "and Expected(Test data)- upto_interest_rate:-" + strExpected);
                }

                // Validate Preference_interest_rate with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_UpTo_Rate_Preferred").trim();
                strActual = extractRecord.get(0).get("preferred_interest_rate").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preferred_Upto_Rate is displayed as expected and it is not null - Preferred_Upto_Rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preferred_Upto_Rate is not displayed as expected  Actual(Extract)-Preferred_Upto_Rate:-" + strActual +
                                        "and Expected(Test data)- Preferred_Upto_Rate:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Preferred_Upto_Rate is NULL and as expected - Preferred_Upto_Rate :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preferred_Upto_Rate is null and it should not be null Actual(Extract)- Preferred_Upto_Rate :-" + strActual +
                                    "and Expected(Test data)- Preferred_Upto_Rate:-" + strExpected);
                }

                // Validate offer_duration_months with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("offer_duration_months").trim();
                strActual = extractRecord.get(0).get("offer_duration_months").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  offer_duration_months is displayed as expected and it is not null - offer_duration_months :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "offer_duration_months is not displayed as expected  Actual(Extract)-offer_duration_months:-" + strActual +
                                        "and Expected(Test data)- offer_duration_months:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  offer_duration_months is NULL and as expected - offer_duration_months :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "offer_duration_months is null and it should not be null Actual(Extract)- offer_duration_months :-" + strActual +
                                    "and Expected(Test data)- offer_duration_months:-" + strExpected);
                }

                // Validate regular_interest_rate with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Regular_Rate").trim();
                strActual = extractRecord.get(0).get("regular_interest_rate").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  regular_interest_rate is displayed as expected and it is not null - regular_interest_rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "regular_interest_rate is not displayed as expected  Actual(Extract)-regular_interest_rate:-" + strActual +
                                        "and Expected(Test data)- regular_interest_rate:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  regular_interest_rate is NULL and as expected - regular_interest_rate :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "regular_interest_rate is null and it should not be null Actual(Extract)- regular_interest_rate :-" + strActual +
                                    "and Expected(Test data)- regular_interest_rate:-" + strExpected);
                }


                // Validate premium_period_interest_rate with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Premium_Interest_Rate").trim();
                strActual = extractRecord.get(0).get("premium_period_interest_rate").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  premium_period_interest_rate is displayed as expected and it is not null - premium_period_interest_rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "premium_period_interest_rate is not displayed as expected  Actual(Extract)-premium_period_interest_rate:-" + strActual +
                                        "and Expected(Test data)- premium_period_interest_rate:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  premium_period_interest_rate is NULL and as expected - premium_period_interest_rate :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "premium_period_interest_rate is null and it should not be null Actual(Extract)- premium_period_interest_rate :-" + strActual +
                                    "and Expected(Test data)- premium_period_interest_rate:-" + strExpected);
                }


                // Validate offer_duration_days with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Offer_Days").trim();
                strActual = extractRecord.get(0).get("offer_duration_days").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  offer_duration_days is displayed as expected and it is not null - offer_duration_days :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "offer_duration_days is not displayed as expected  Actual(Extract)-offer_duration_days:-" + strActual +
                                        "and Expected(Test data)- offer_duration_days:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  offer_duration_days is NULL and as expected - offer_duration_days :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "offer_duration_days is null and it should not be null Actual(Extract)- offer_duration_days :-" + strActual +
                                    "and Expected(Test data)- offer_duration_days:-" + strExpected);
                }

                // Validate mass_offer_start_date with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Mass_Start_Date").trim();
                strActual = extractRecord.get(0).get("mass_offer_start_date").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  mass_offer_start_date is displayed as expected and it is not null - mass_offer_start_date :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "mass_offer_start_date is not displayed as expected  Actual(Extract)-mass_offer_start_date:-" + strActual +
                                        "and Expected(Test data)- mass_offer_start_date:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  mass_offer_start_date is NULL and as expected - mass_offer_start_date :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "mass_offer_start_date is null and it should not be null Actual(Extract)- mass_offer_start_date :-" + strActual +
                                    "and Expected(Test data)- mass_offer_start_date:-" + strExpected);
                }


                // Validate mass_offer_end_date with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Mass_End_Date").trim();
                System.out.println("Mass end date from Excel is :"+strExpected);
                strActual = extractRecord.get(0).get("mass_offer_end_date").trim();
                System.out.println("Mass end date from file is :"+strActual);

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  mass_offer_end_date is displayed as expected and it is not null - mass_offer_end_date :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "mass_offer_end_date is not displayed as expected  Actual(Extract)-mass_offer_end_date:-" + strActual +
                                        "and Expected(Test data)- mass_offer_end_date:-" + strExpected);
                    }
                } else if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  mass_offer_end_date is NULL and as expected - mass_offer_end_date :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "mass_offer_end_date is null and it should not be null Actual(Extract)- mass_offer_end_date :-" + strActual +
                                    "and Expected(Test data)- mass_offer_end_date:-" + strExpected);
                }


                ///End of DSS variable validation.Added May 11th 2023 release


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eBK_OFR";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    //Insurance Claim Reminder Offer
    public void InsuranceClaimReminderLogic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Check and Remove
//        Map<String, Object> custInsightRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
//        Map<String, String> custInsightMapObject = (Map) custDimRowData;
//        List<Map<String, String>> custInsightListMapObject = new LinkedList<>();
//        custInsightListMapObject.add(custInsightMapObject);
//        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightListMapObject));

        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }


                //VALIDATE Email Specific Text Fields

                //Validate Current Account Name with Database in ACCT_DIM table field SRC_SYS_SUB_PRD_DESC and Batch file
                strExpected = null;
                strActual = null;

                strExpected = (accountDimRowData.get("SRC_SYS_SUB_PRD_DESC") == null) ? "" : accountDimRowData.get("SRC_SYS_SUB_PRD_DESC").toString().trim();
                strActual = extractRecord.get(0).get("CustomerAcctName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer Account Name is displayed as expected - Customer Account Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Customer Account Name is not displayed as expected  Actual(Extract)-Customer Account Name:-" + strActual +
                                    "and Expected(Database ACCT_DIM)-Customer Account Name:-" + strExpected);

                }


                //Validate Credit Card Number
                strExpected = null;
                strActual = null;

                strExpected = (accountDimRowData.get("CR_CRD_NUM") == null) ? "" : accountDimRowData.get("CR_CRD_NUM").toString().trim();
                strExpected = strExpected.length() >= 4 ? strExpected.substring(strExpected.length() - 4) : strExpected;
                strActual = extractRecord.get(0).get("CreditCardNum").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Credit Card Number is displayed as expected - Credit Card Number :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Credit Card Number is not displayed as expected  Actual(Extract)-Credit Card Number:-" + strActual +
                                    "and Expected(Database ACCT_DIM)-Credit Card Number:-" + strExpected);

                }


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_INS";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }


    //SSM Always On Offer
    public void SSMAlwaysOnLogic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        Map<String, Object> custInsightRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custInsightMapObject = (Map) custDimRowData;
        List<Map<String, String>> custInsightListMapObject = new LinkedList<>();
        custInsightListMapObject.add(custInsightMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightListMapObject));

        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eBK_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }


    //Visa Debit Interac Offer Batch Validation Logic
    public void VisaDebitInteracLogic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }



                // Validate NTC_F with Datasheet in CUST_DIM sheet field MCB_IND, ARRV_DT, and D2D Batch file
                strExpected = null;
                strActual = null;

                String strMCB_IND = (custDimRowData.get("MCB_IND") == null) ? "" : custDimRowData.get("MCB_IND").toString().trim(); //1
                String strARRV_DT = (custDimRowData.get("ARRV_DT") == null) ? "" : custDimRowData.get("ARRV_DT").toString().trim();
                String strOfferedOnDt = ihRecord.get(0).get("Offered on");

                /*** Generating ExpectedValue */
                if(strARRV_DT.equals("") || strOfferedOnDt.equals("") || strMCB_IND.equals("")){
                    strExpected = "N";
                }else{
                    String ArrvDatePattern = "yyyy-MM-dd";
                    String OfferedOnDatePattern = "M/d/yy h:m a";

                    SimpleDateFormat sdfArrvDt = new SimpleDateFormat(ArrvDatePattern);
                    Date dtArrvDt = sdfArrvDt.parse(strARRV_DT);

                    SimpleDateFormat sdfOfferedOnDate = new SimpleDateFormat(OfferedOnDatePattern);

                    Date dtOfferedOnDate = sdfOfferedOnDate.parse(strOfferedOnDt);

                    long iDaysSinceArrived = ((dtOfferedOnDate.getTime() - dtArrvDt.getTime())/1000)/86400;  //2



                    if(strMCB_IND.equals("Y") && iDaysSinceArrived <= (3 * 365))
                        strExpected = "Y";
                    else
                        strExpected = "N";

                }
                /*** */


                strActual = extractRecord.get(0).get("NTC_F").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  NTC_F is displayed as expected and it is not null - NTC_F :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " NTC_F is not displayed as expected  Actual(Extract)-NTC_F:- " + strActual +
                                        " and Expected(Database CUST_DIM)-NTC_F:- " + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "NTC_F is null and it should not be null Actual(Extract)-NTC_F:-" + strActual +
                                    "and Expected(Database CUST_DIM)-NTC_F:-" + strExpected);

                }




                // Validate GenZ_F with Datasheet in CUST_DIM sheet field INDV_BRTH_DT and D2D Batch file
                strExpected = "N";
                strActual = null;

                String strDOB = (custDimRowData.get("INDV_BRTH_DT") == null) ? "" : custDimRowData.get("INDV_BRTH_DT").toString().trim();

                if(strDOB.length() == 10) {
                    int birthYear = Integer.parseInt(strDOB.substring(0,4));

                    if(birthYear >= 1997 && birthYear <= 2012)
                        strExpected = "Y";
                }

                strActual = extractRecord.get(0).get("GenZ_F").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  GenZ is displayed as expected and it is not null - GenZ :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " GenZ is not displayed as expected  Actual(Extract)-GenZ:-" + strActual +
                                        "and Expected(Database CUST_DIM)-GenZ:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "GenZ is null and it should not be null Actual(Extract)-GenZ:-" + strActual +
                                    "and Expected(Database CUST_DIM)-GenZ:-" + strExpected);

                }




                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eBK_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }


    //ULOC CLI Offer Batch Validation Logic
    public void ULOC_CLI_Logic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = ihRecord.get(0).get("Lead End Date");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;

                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }


                //Logic to Validate that Mail Id is a string of length = 8 chars
                strExpected = null;
                strActual = null;
                //strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual != null && strActual.length() == 8) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected having 8 Characters - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- String with 8 Characters Length");
                }



                // Validate AcctNumber with Datasheet in ACCT_DIM Tab and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = accountDimtListMapObject.get(0).get("ACCT_NUM") == null ? "" : accountDimtListMapObject.get(0).get("ACCT_NUM").toString().trim();

                if(strExpected.length() > 13){
                    strExpected = strExpected.substring(strExpected.length()-13) + "000";

                    strExpected = strExpected.substring(0,4) + "****" + strExpected.substring(8,12) + "****";
                }


                strActual = extractRecord.get(0).get("AcctNumber").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Account Number is displayed as expected - AcctNumber :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Account Number is not displayed as expected  Actual(Extract)-AcctNumber:-" + strActual +
                                    "and Expected(Datasheet ACCT_DIM)-AcctNumber:-" + strExpected);

                }


                // Validate ApprovedCreditLimit with Datasheet in ACCT_DIM Tab and D2D Batch file
                strExpected = null;
                strActual = null;


                strExpected = String.valueOf((int)Double.parseDouble(String.valueOf(accountDimtListMapObject.get(0).get("CLI_APRVD_CR_LMT"))));

                strActual = extractRecord.get(0).get("ApprovedCreditLimit").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Approved Credit Limit is displayed as expected - ApprovedCreditLimit :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Approved Credit Limit is not displayed as expected  Actual(Extract)-ApprovedCreditLimit:-" + strActual +
                                    "and Expected(Datasheet ACCT_DIM)-ApprovedCreditLimit:-" + strExpected);

                }


                // Validate ProdCode with Datasheet in ACCT_DIM Tab and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = accountDimtListMapObject.get(0).get("SRC_SYS_PRD_CD") == null ? "" : accountDimtListMapObject.get(0).get("SRC_SYS_PRD_CD").toString().trim();
                strActual = extractRecord.get(0).get("ProdCode").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Prod Code is displayed as expected - ProdCode :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Prod Code is not displayed as expected  Actual(Extract)-ProdCode:-" + strActual +
                                    "and Expected(Datasheet ACCT_DIM)-ProdCode:-" + strExpected);

                }


                // Validate SubProdCode with Datasheet in ACCT_DIM Tab and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = accountDimtListMapObject.get(0).get("SRC_SYS_SUB_PRD_CD") == null ? "" : accountDimtListMapObject.get(0).get("SRC_SYS_SUB_PRD_CD").toString().trim();
                strActual = extractRecord.get(0).get("SubProdCode").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Sub Prod Code is displayed as expected - SubProdCode :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Sub Prod Code is not displayed as expected  Actual(Extract)-SubProdCode:-" + strActual +
                                    "and Expected(Datasheet ACCT_DIM)-SubProdCode:-" + strExpected);

                }


                // Validate CampaignNumber with Datasheet in CUST_DIM Tab and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CellGroup").trim() + "01";
                strActual = extractRecord.get(0).get("CampaignNumber").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Campaign Number is displayed as expected - CampaignNumber :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Campaign Number is not displayed as expected  Actual(Extract)-CampaignNumber:-" + strActual +
                                    "and Expected(Datasheet ACCT_DIM)-CampaignNumber:-" + strExpected);

                }




                // Validate CurrentCreditLimit with Datasheet in ACCT_DIM Tab and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = String.valueOf((int)Double.parseDouble(String.valueOf(accountDimtListMapObject.get(0).get("CR_CRD_LMT_AMT"))));

//                strExpected = accountDimtListMapObject.get(0).get("CR_CRD_LMT_AMT") == null ? "" : accountDimtListMapObject.get(0).get("CR_CRD_LMT_AMT").toString().trim();
                strActual = extractRecord.get(0).get("CurrentCreditLimit").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Current Credit Limit is displayed as expected - CurrentCreditLimit :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Current Credit Limit is not displayed as expected  Actual(Extract)-CurrentCreditLimit:-" + strActual +
                                    "and Expected(Datasheet ACCT_DIM)-CurrentCreditLimit:-" + strExpected);

                }




                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_LOC";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }


    //International Money Transfer Offer Batch Validation Logic
    public void International_Money_Transfer_Logic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Fetching CUST_INSIGHTS Records
        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));



        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").replaceAll("-", "M").trim() + "_" + offerCode;



                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }


                //Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eBK_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }


    //Accidental Death Insurance Offer Batch Validation Logic
    public void Accidental_Death_Insurance_Logic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Fetching CUST_INSIGHTS Records
//        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
//        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));

        //Fetching EXTERNAL_INPUT_FILE_LAYOUT Records
        List EXTERNAL_INPUT_FILE_LAYOUT_RowsData = database.readRows("Select * from " + strDBSchema +
                ".EXTERNAL_INPUT_FILE_LAYOUT where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******EXTERNAL_INPUT_FILE_LAYOUT Database table data******" + convertToJson(EXTERNAL_INPUT_FILE_LAYOUT_RowsData));



        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "") + "_" + offerCode;



                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }


                //Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (!(strActual.equals(strExpected))) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


// Validate Campaign Specific Text Prov_CD with Database in CUST_DIM table field PRIM_PROV_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_PROV_CD").toString().trim();
                strActual = extractRecord.get(0).get("Prov_CD").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Province Code is displayed as expected and it is not null - Prov_CD :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Province Code is not displayed as expected  Actual(Extract)-Prov_CD:-" + strActual +
                                        "and Expected(Database CUST_DIM)-PRIM_PROV_CD:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Province Code is null and it should not be null Actual(Extract)-Prov_CD:-" + strActual +
                                    "and Expected(Database CUST_DIM)-PRIM_PROV_CD:-" + strExpected);

                }



                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_INS";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
//        if (ihRecord.get(0).get("Control").equals("Y")) {
//            if (extractRecord.size() == 0) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
//                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
//                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
//                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
//            }
//        }
    }

    //Itrade Xsell Always on Cross Sell Offer Batch Validation Logic
    public void Itrade_Xsell_Always_on_Logic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Fetching CUST_INSIGHTS Records
        List custInsightsRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsRowsData));

        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").replaceAll("-", "M").trim() + "_" + offerCode;
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }


                //Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_ITR_F";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
//        if (ihRecord.get(0).get("Control").equals("Y")) {
//            if (extractRecord.size() == 0) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
//                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
//                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
//                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
//            }
//        }
    }




    //D2D Early Engagement iTrade Cross Sell Offer Batch Validation Logic
    public void D2DEarlyEngagementiTradeCrossSellLogic() throws ParseException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }






                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eBK_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }



    public void paULOCRetargetingLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        Map<String, Object> custAcctDimRowsData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> custaccountDimMapObject = (Map) custAcctDimRowsData;
        List<Map<String, String>> custaccountDimtListMapObject = new LinkedList<>();
        custaccountDimtListMapObject.add(custaccountDimMapObject);
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custaccountDimtListMapObject));

        Map<String, Object> custInsightsRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custInsightsMapObject = (Map) custInsightsRowData;
        List<Map<String, String>> custInsightsListMapObject = new LinkedList<>();
        custInsightsListMapObject.add(custInsightsMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custInsightsListMapObject));


        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID")).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and ULOCINS Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and ULOCINS Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and ULOCINS Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and ULOCINS Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and ULOCINS Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and ULOCINS batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and ULOCINS batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and ULOCINS batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and ULOCINS batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and ULOCINS batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
//                if (strExpected.startsWith("-")) {
//                    strExpected = "M" + strExpected.replace("-", "");
//                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }


                // Validate Insurance Status with Database Cust_Insights table and ULOCINS batch file
                strExpected = null;
                strActual = null;
                String InsStatus = custAcctDimRowsData.get("INS_STATUS_DESC").toString().trim();
                strActual = extractRecord.get(0).get("InsStatus").trim();
                switch (InsStatus) {
                    case "Waived":
                        strExpected = "0";
                        break;
                    case "Life Only":
                        strExpected = "1";
                        break;
                    case "Disability":
                        strExpected = "1";
                        break;
                    case "Disability and Life":
                        strExpected = "1";
                        break;
                    case "Disability, Job Loss":
                        strExpected = "1";
                        break;
                    case "Disability, Life and Critical Illness":
                        strExpected = "1";
                        break;
                    case "Life and CI":
                        strExpected = "1";
                        break;
                    case "Life, Disability and Job Loss":
                        strExpected = "1";
                        break;
                }
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Insurance Status is displayed as expected - Insurance Status:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Insurance Status is not displayed as expected  Actual(Extract)-Insurance Status:-" + strActual +
                                        "and Expected(Insurance Status):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Insurance Status is null and it should not be null Expected (Insurance Status Extract):-" + strExpected);
                }

                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_INS";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void paccLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> paCCRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> paCCMapObject = (Map) paCCRowData;
        List<Map<String, String>> paCCListMapObject = new LinkedList<>();
        custDimListMapObject.add(paCCMapObject);
        LoggingUtils.log("******PA_CCUL_CUSTOMER Database table data******" + convertToJson(paCCListMapObject));

        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and PA CC Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and PA CC Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and PA CC Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and PA CC Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and PA CC Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and PA CC batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and PA CC batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and PA CC batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and PA CC batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and PA CC batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and PA CC batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Mail ID with PA CC Database and PA CC batch file
                String mailIdDDR = getMailID();
                String mailIdExtract = extractRecord.get(0).get("MailID").trim();
                if (!mailIdExtract.equals("")) {
                    if (mailIdExtract.substring(0, 2).equals(mailIdDDR) && mailIdExtract.length() == 8 &&
                            patternMatcher(mailIdExtract, "^[A-Z0-9]*$")) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Mail Id is displayed as expected - Mail ID:-" + mailIdExtract);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Mail Id is not displayed as expected(It should be alphanumeric with 8 digits " +
                                        "2 characters from DDR table and 6 digits are random and all alphabet characters " +
                                        "to be in capital letters)  Actual(Extract)-Mail Id:-" + mailIdExtract);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is null and it should not be null Expected (Mail Id Extract):-" + mailIdDDR);
                }

                // Validate Campaign Number with PA CC Database and PA CC batch file
                strExpected = null;
                strActual = null;
                strExpected = paCCRowData.get("PRIMARY_CAMPAIGN_NUM").toString().trim();
                strActual = extractRecord.get(0).get("CampaignNumber").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign Number is displayed as expected and it is not null - Campaign Number:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign Number is not displayed as expected  Actual(Extract)-Campaign Number:-" + strActual +
                                        "and Expected(Test data)-Campaign Number:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign Number is null and it should not be null Actual(Extract)-Campaign Number:-" + strActual +
                                    "and Expected(Test data)-Campaign Number:-" + strExpected);
                }

                // Validate PA CC Limit with PA CC Database and PA CC batch file
                strExpected = null;
                strActual = null;
                strExpected = paCCRowData.get("PA_CC_LIMIT").toString().trim();
                strActual = extractRecord.get(0).get("CreditLimit").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Credit Limit is displayed as expected and it is not null - Credit Limit:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Credit Limit is not displayed as expected  Actual(Extract)-Credit Limit:-" + strActual +
                                        "and Expected(Test data)-Credit Limit:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Credit Limit is null and it should not be null Actual(Extract)-Credit Limit:-" + strActual +
                                    "and Expected(Test data)-Credit Limit:-" + strExpected);
                }

                // Validate Offer Mneumonic with PA CC Database and PA CC batch file
                strExpected = null;
                strActual = null;
                strExpected = paCCRowData.get("PRIMARY_CAMPAIGN_NUM").toString().trim();
                strActual = extractRecord.get(0).get("OfferMnemonic").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer Mneumonic is displayed as expected and it is not null - Offer Mneumonic:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer Mnemonic is not displayed as expected  Actual(Extract)-Offer Mneumonic:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Mneumonic is null and it should not be null Actual(Extract)-Offer Mneumonic:-" + strActual +
                                    "and Expected(Test data)-Offer Mneumonic:-" + strExpected);
                }

                // Validate Preference project data  and batch file
                strExpected = null;
                strActual = null;
                strExpected = "eCC_OFR";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void ODPAcquisitionLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));

        //        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
//                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
//                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strExpected = getWaveExpiryDate().replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }
                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

//                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
//                strExpected = null;
//                strActual = null;
//                strExpected = "";
//                strActual = extractRecord.get(0).get("MailID").trim();
//                strExpected = getMailID();
//                if (!strActual.equals("")) {
//                    if (strActual.substring(0, 2).equals(strExpected) && strActual.length() == 8 &&
//                            patternMatcher(strActual, "^[A-Z0-9]*$")) {
//                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                "*****Pass Statement*****  Mail Id is displayed as expected - Mail ID:-" + strActual);
//
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " Mail Id is not displayed as expected(It should be alphanumeric with 8 digits " +
//                                        "2 characters from DDR table and 6 digits are random and all alphabet characters " +
//                                        "to be in capital letters)  Actual(Extract)-Mail Id:-" + strActual);
//                    }
//                } else {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "Mail Id is null and it should not be null Expected (Mail Id Extract):-" + strExpected);
//                }

                // Validate ODP Limit with Database in CUST_DIM table field and  Batch file
                strActual = null;
                strActual = extractRecord.get(0).get("odplimit").trim();
                strExpected = ihRecord.get(0).get("Cell Group").trim();
                if (strExpected.equals("PAL")) {
                    strExpected = custDimRowData.get("PA_ODP_LIMIT").toString().trim();
                } else {
                    strExpected = custDimRowData.get("CR_RSK_IND").toString().trim();
                    switch (strExpected) {
                        case "A":
                            strExpected = "1000";
                            break;
                        case "B":
                            strExpected = "750";
                            break;
                        case "C":
                            strExpected = "500";
                            break;
                    }
                }
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  ODP Limit is displayed as expected  - ODP Limit :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " ODP Limit is not displayed as expected  Actual(Extract)-ODP Limit:-" + strActual +
                                        "and Expected(Database CUST_DIM)-ODP Limit:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "ODP Limit is null and it should not be null Actual(Extract)-ODP Limit:-" + strActual +
                                    "and Expected(Database CUST_DIM)-ODP Limit:-" + strExpected);
                }

                //Validate Masked Account Number from DB and CLI Batch file
                String acctNumDB = accountDimRowData.get("ACCT_NUM").toString().trim();
                if (acctNumDB.length() > 13) {
                    acctNumDB = acctNumDB.substring(acctNumDB.length() - 12);
                }
                String acctNumExtract = extractRecord.get(0).get("AccNum").trim();
                if (!acctNumExtract.equals("")) {
                    if (acctNumExtract.equals(acctNumDB)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement***** Account Number is displayed as expected and it is not null - Masked Account Number :-" + acctNumExtract);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Account Number is not displayed as expected  Actual(Extract)-Account Number:-" + acctNumExtract +
                                        "and Expected(Database ACCT_DIM)-Account Number:-" + acctNumDB);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Masked Account Number is null and it should not be null Actual(Extract)-Masked Account Number:-" + acctNumExtract +
                                    "and Expected(Database ACCT_DIM)-Account Number:-" + acctNumDB);

                }

                //Logic to Validate that Creative Version (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("creativeversion").trim();
                if (strActual.equals("A") || strActual.equals("B")) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Creative Version is displayed as expected - Creative Version:-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Version is not displayed as expected  Actual(Extract)-Creative Version:-" + strActual +
                                    "and Expected(Test data)-Creative Version:-" + (strExpected.equals("") ? "A or B" : strExpected));
                }
                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_LOC";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void mpsaWelcomeBonusLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));


        //Add Cust_Insights DB check logic here
        Map<String, Object> custInsightsRowsData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> custInsightsMapObject = (Map) custInsightsRowsData;
        List<Map<String, String>> custSightsListMapObject = new LinkedList<>();
        custSightsListMapObject.add(custInsightsMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custSightsListMapObject));


        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = custInsightsRowsData.get("EVENT_DATE").toString();
                strExpected = strExpected.replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet Batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }


                // Validate bonus interest rate from cust_insights table CURR_VAL  field and batch file
                strExpected = null;
                strActual = null;
                strExpected = custInsightsRowsData.get("CURR_VAL").toString();
                String decimalArray[] = strExpected.split("\\.");
                String value = decimalArray[0];
                String decimalvalue = decimalArray[1].substring(0, 2);
                strExpected = value + "." + decimalvalue;
                System.out.println(strExpected);
                strActual = extractRecord.get(0).get("bonus_interest_rate").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Bonus Interest Rate is displayed as expected and it is not null - Bonus Interest Rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Bonus Interest Rate  is not displayed as expected  Actual(Extract)-Bonus Interest Rate :-" + strActual +
                                        "and Expected(DB)-Bonus Interest Rate :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Bonus Interest Rate  is null and it should not be null Actual(Extract)-Bonus Interest Rate :-" + strActual +
                                    "and Expected(DB)-Bonus Interest Rate:-" + strExpected);
                }

                // Validate upto interest rate from cust_insights table CURR_VAL  field and batch file
                strExpected = null;
                strActual = null;
                strExpected = "4.25";
                strActual = extractRecord.get(0).get("upto_interest_rate").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Upto Interest Rate is displayed as expected and it is not null - Upto Interest Rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Upto Interest Rate  is not displayed as expected  Actual(Extract)-Upto Interest Rate :-" + strActual +
                                        "and Expected(DB)-Upto Interest Rate :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Upto Interest Rate  is null and it should not be null Actual(Extract)-Upto Interest Rate :-" + strActual +
                                    "and Expected(DB)-Upto Interest Rate:-" + strExpected);
                }


                // Validate acct opened date from acct_dim table ACCT_ODT  field and batch file
                strExpected = null;
                strActual = null;
                strExpected = accountDimRowData.get("ACCT_ODT").toString();
                strActual = extractRecord.get(0).get("account_open_date").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Account Opened Date is displayed as expected and it is not null - Account ODT :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Account Opened Date  is not displayed as expected  Actual(Extract)-Account Opened Date :-" + strActual +
                                        "and Expected(DB)-Account Opened Date :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Account Opened Date  is null and it should not be null Actual(Extract)-Account Opened Date :-" + strActual +
                                    "and Expected(DB)-Account Opened Date:-" + strExpected);
                }

                // Validate Preference project data  and batch file
                strExpected = null;
                strActual = null;
                strExpected = "eBK_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    public void mpsaCrossSellNewLogic() {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        //Add Cust_Insights DB check logic here
        Map<String, Object> custInsightsRowsData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> custInsightsMapObject = (Map) custInsightsRowsData;
        List<Map<String, String>> custSightsListMapObject = new LinkedList<>();
        custSightsListMapObject.add(custInsightsMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custSightsListMapObject));


        String strExpected = null;
        String strActual = null;


        List<Map<String, String>> ihRecord = getIhRecords().stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(getIhRecords()));
//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("CIS_CUST_ID").toString().trim();
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and Batch file
                strExpected = null;
                strActual = null;
                List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
                List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());
                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");
                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet Batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                if (strExpected.startsWith("-")) {
                    strExpected = "M" + strExpected.replace("-", "");
                }
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                //Logic to Validate that Mail Id is Blank (Hardcoded Static value)
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:-" + (strExpected.equals("") ? "NULL" : strExpected));
                }


                // Validate bonus interest rate from Pega DSS(from cust_dim sheet) and batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_bonus_interest").trim();
                strActual = extractRecord.get(0).get("bonus_interest").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Bonus Interest Rate is displayed as expected and it is not null - Bonus Interest Rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Bonus Interest Rate  is not displayed as expected  Actual(Extract)-Bonus Interest Rate :-" + strActual +
                                        "and Expected(DB)-Bonus Interest Rate :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Bonus Interest Rate  is null and it should not be null Actual(Extract)-Bonus Interest Rate :-" + strActual +
                                    "and Expected(DB)-Bonus Interest Rate:-" + strExpected);
                }

                // Validate upto interest rate from Pega DSS(from cust_dim sheet) and batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_upto_interest").trim();
                strActual = extractRecord.get(0).get("upto_interest").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Upto Interest Rate is displayed as expected and it is not null - Upto Interest Rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Upto Interest Rate  is not displayed as expected  Actual(Extract)-Upto Interest Rate :-" + strActual +
                                        "and Expected(DB)-Upto Interest Rate :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Upto Interest Rate  is null and it should not be null Actual(Extract)-Upto Interest Rate :-" + strActual +
                                    "and Expected(DB)-Upto Interest Rate:-" + strExpected);
                }


                // Validate Offer Months from Pega DSS(from cust_dim sheet) and batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_offer_months").trim();
                strActual = extractRecord.get(0).get("offer_months").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer Months is displayed as expected and it is not null - Account ODT :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Ofefr Months  is not displayed as expected  Actual(Extract)-Offer Months :-" + strActual +
                                        "and Expected(DB)-Account Opened Date :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Months  is null and it should not be null Actual(Extract)-Offer Months :-" + strActual +
                                    "and Expected(DB)-Offer Months:-" + strExpected);
                }


                // Validate regular_interest_rate with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Regular_Rate").trim();
                strActual = extractRecord.get(0).get("regular_interest_rate").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  regular_interest_rate is displayed as expected and it is not null - regular_interest_rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "regular_interest_rate is not displayed as expected  Actual(Extract)-regular_interest_rate:-" + strActual +
                                        "and Expected(Test data)- regular_interest_rate:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "regular_interest_rate is null and it should not be null Actual(Extract)- regular_interest_rate :-" + strActual +
                                    "and Expected(Test data)- regular_interest_rate:-" + strExpected);
                }


                // Validate premium_period_interest_rate with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Premium_Interest_Rate").trim();
                strActual = extractRecord.get(0).get("premium_period_interest_rate").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  premium_period_interest_rate is displayed as expected and it is not null - premium_period_interest_rate :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "premium_period_interest_rate is not displayed as expected  Actual(Extract)-premium_period_interest_rate:-" + strActual +
                                        "and Expected(Test data)- premium_period_interest_rate:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "premium_period_interest_rate is null and it should not be null Actual(Extract)- premium_period_interest_rate :-" + strActual +
                                    "and Expected(Test data)- premium_period_interest_rate:-" + strExpected);
                }


                // Validate offer_duration_days with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Offer_Days").trim();
                strActual = extractRecord.get(0).get("offer_duration_days").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  offer_duration_days is displayed as expected and it is not null - offer_duration_days :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "offer_duration_days is not displayed as expected  Actual(Extract)-offer_duration_days:-" + strActual +
                                        "and Expected(Test data)- offer_duration_days:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "offer_duration_days is null and it should not be null Actual(Extract)- offer_duration_days :-" + strActual +
                                    "and Expected(Test data)- offer_duration_days:-" + strExpected);
                }

                // Validate mass_offer_start_date with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Mass_Start_Date").trim();
                strActual = extractRecord.get(0).get("mass_offer_start_date").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  mass_offer_start_date is displayed as expected and it is not null - mass_offer_start_date :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "mass_offer_start_date is not displayed as expected  Actual(Extract)-mass_offer_start_date:-" + strActual +
                                        "and Expected(Test data)- mass_offer_start_date:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "mass_offer_start_date is null and it should not be null Actual(Extract)- mass_offer_start_date :-" + strActual +
                                    "and Expected(Test data)- mass_offer_start_date:-" + strExpected);
                }


                // Validate mass_offer_end_date with Test data and D2D batch file
                strExpected = null;
                strActual = null;

                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("DSS_MPSA_Xsell_Mass_End_Date").trim();
                strActual = extractRecord.get(0).get("mass_offer_end_date").trim();

                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  mass_offer_end_date is displayed as expected and it is not null - mass_offer_end_date :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "mass_offer_end_date is not displayed as expected  Actual(Extract)-mass_offer_end_date:-" + strActual +
                                        "and Expected(Test data)- mass_offer_end_date:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "mass_offer_end_date is null and it should not be null Actual(Extract)- mass_offer_end_date :-" + strActual +
                                    "and Expected(Test data)- mass_offer_end_date:-" + strExpected);
                }





                // Validate Preference project data  and batch file
                strExpected = null;
                strActual = null;
                strExpected = "eBK_OFR";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }


            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
        if (ihRecord.get(0).get("Control").equals("Y")) {
            if (extractRecord.size() == 0) {
                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }
    }

    //Deepthi
    public void D2DEarlyEngRemainder_Logic(String insight_Code_Pat_val,String insight_Code_Bill_val,String insight_Code_Pay_val) throws ParseException {
            String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
            String insight_Code_Pat = insight_Code_Pat_val;
            String insight_Code_Pay = insight_Code_Bill_val;
            String insight_Code_Bill = insight_Code_Pay_val;
            Database database = new Database();
            Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                    ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
            Map<String, String> custDimMapObject = (Map) custDimRowData;
            List<Map<String, String>> custDimListMapObject = new LinkedList<>();
            custDimListMapObject.add(custDimMapObject);
            LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

            Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                    ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
            Map<String, String> accountDimMapObject = (Map) accountDimRowData;
            List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
            accountDimtListMapObject.add(accountDimMapObject);
            LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

            List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                    ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                    StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
            LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> custInsightsRowsData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  INSIGHT_CD='" + insight_Code_Pat +"'");
        Map<String, String> custInsightsMapObject = (Map) custInsightsRowsData;
        List<Map<String, String>> custSightsListMapObject = new LinkedList<>();
        custSightsListMapObject.add(custInsightsMapObject);
        LoggingUtils.log("******CUST_INSIGHTS Database table data******" + convertToJson(custSightsListMapObject));


            String strExpected = null;
            String strActual = null;
            String value = null;

            String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

            List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
            LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

            //Fetching Details of Proposition Sheet
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
            List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
            if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
                if (extractRecord.size() == 1) {
                    // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = strCID;
                    strActual = extractRecord.get(0).get("CustomerID").trim();
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                        "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                    }

                    // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                    strActual = extractRecord.get(0).get("EmailAddress").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Email Address is displayed as expected " +
                                            "and it is not null- Email :-" + strActual);

                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                            "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }


                    // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                    strActual = extractRecord.get(0).get("IndividualTitle").trim();
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                    }

                    // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                    strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                            "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }


                    // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                    strExpected = null;
                    strActual = null;

                    strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                    strActual = extractRecord.get(0).get("IndividualLastName").trim();
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                    }

                    // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = custDimRowData.get("LANG_CD").toString().trim();
                    if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                            || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                        char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                        strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                        + strExpected);
                    }
                    strActual = extractRecord.get(0).get("LanguageCode").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                            "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                    }

                    // Validating Lead Start Date for IPT with Offered On Date from IH
                    String strOfferedOn = ihRecord.get(0).get("Offered on");
                    SimpleDateFormat format = new SimpleDateFormat("MM/dd/yy hh:mm a");

                    Date dateVal = null;
                    try {
                        dateVal = format.parse(strOfferedOn);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    SimpleDateFormat sfOutput = new SimpleDateFormat("yyyyMMdd");
                    String strExpectedLeadStartDate = sfOutput.format(dateVal);

                    String strActualLeadStartDate = ihRecord.get(0).get("Lead Start Date");

                    //  Verifying Actual Lead Start Date with Expected Lead Start Date
                    if (strActualLeadStartDate.equals(strExpectedLeadStartDate)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Lead Start Date is displayed as expected - Lead Start Date:-" + strActualLeadStartDate);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Lead Start Date is not displayed as expected - Actual Lead Start Date:- " + strActualLeadStartDate
                                        + " and Expected Lead Start Date:- " + strExpectedLeadStartDate);
                    }


                    //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                    // Validating Lead End Date for IPT with Offered On Date + Persistnace Days
                    //Fetching Offered On from IH
                    String strOfferedOnIH = ihRecord.get(0).get("Offered on");
                    SimpleDateFormat formatOfferedOn = new SimpleDateFormat("MM/dd/yy hh:mm a");

                    Date dtOfferedOn = null;
                    try {
                        dtOfferedOn = format.parse(strOfferedOnIH);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    Calendar calVal = Calendar.getInstance();
                    calVal.setTime(dtOfferedOn);

                    //Persistence days from proposition sheet
                    String strPersistenceDays = csvFileRecord.get(0).get("PersistenceDays");
                    int iPersistanceDays = 0;

                    try {
                        iPersistanceDays = Integer.parseInt(strPersistenceDays);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    calVal.add(Calendar.DAY_OF_MONTH, iPersistanceDays);

                    SimpleDateFormat formatLeadEndDate = new SimpleDateFormat("yyyyMMdd");
                    String strExpectedLeadEndDate = formatLeadEndDate.format(calVal.getTime());

                    String strActualLeadEndDate = ihRecord.get(0).get("Lead End Date");

                    //  Verifying Actual Lead End Date with Expected Lead End Date
                    if (strActualLeadEndDate.equals(strExpectedLeadEndDate)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Lead End Date is displayed as expected - Lead End Date:-" + strActualLeadEndDate);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Lead End Date is not displayed as expected - Actual Lead End Date:- " + strActualLeadEndDate
                                        + " and Expected Lead End Date:- " + strExpectedLeadEndDate);
                    }

                    // Validate Offer code with Proposition and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                    strActual = extractRecord.get(0).get("OfferID").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                            "and Expected(Proposition)-Offer code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }


                    // Validate Campaign code with Proposition and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                    strActual = extractRecord.get(0).get("CampaignCode").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                            "and Expected(Proposition)-Campaign code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }


                    // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                    strActual = extractRecord.get(0).get("CreativeID").trim();
                    if (!strActual.equals("")) {
                        if (strExpected.contains(strActual)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                            "and Expected(Test data)-Campaign code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }


                    // Validate pxInteractionID with IH and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                    strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                            "and Expected(IH)-Interaction ID :-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID:-" + strExpected);
                    }
                    // Validate Response tracking code with IH and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                    if (strExpected.startsWith("-")) {
                        strExpected = "M" + strExpected.replace("-", "");
                    }
                    strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                            "and Expected(IH)-Response tracking code :-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Interaction ID:-" + strExpected);
                    }


                    //Logic to Validate that Mail Id is a string of length = 8 chars
                    strExpected = null;
                    strActual = null;
                    //strExpected = "";
                    strActual = extractRecord.get(0).get("MailID").trim();
                    if ( strActual.length() == 0) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  MailID is displayed as expected having 0 Characters - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                        "and Expected(Test data)-Mail Id:- String with 8 Characters Length");
                    }



//                    // Validate AcctNumber with Datasheet in ACCT_DIM Tab and D2D Batch file
//                    strExpected = null;
//                    strActual = null;
//
//                    strExpected = accountDimtListMapObject.get(0).get("ACCT_NUM") == null ? "" : accountDimtListMapObject.get(0).get("ACCT_NUM").toString().trim();
//
//                    if(strExpected.length() > 13){
//                        strExpected = strExpected.substring(strExpected.length()-13) + "000";
//
//                        strExpected = strExpected.substring(0,4) + "****" + strExpected.substring(8,12) + "****";
//                    }
//
//
//                    strActual = extractRecord.get(0).get("AcctNumber").trim();
//                    if (strActual.equals(strExpected)) {
//                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                "*****Pass Statement*****  Account Number is displayed as expected - AcctNumber :-" + strActual);
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " Account Number is not displayed as expected  Actual(Extract)-AcctNumber:-" + strActual +
//                                        "and Expected(Datasheet ACCT_DIM)-AcctNumber:-" + strExpected);

//                    }


//                    // Validate ProdCode with Datasheet in ACCT_DIM Tab and D2D Batch file
//                    strExpected = null;
//                    strActual = null;
//
//                    strExpected = accountDimtListMapObject.get(0).get("SRC_SYS_PRD_CD") == null ? "" : accountDimtListMapObject.get(0).get("SRC_SYS_PRD_CD").toString().trim();
//                    strActual = extractRecord.get(0).get("ProdCode").trim();
//                    if (strActual.equals(strExpected)) {
//                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                "*****Pass Statement*****  Prod Code is displayed as expected - ProdCode :-" + strActual);
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " Prod Code is not displayed as expected  Actual(Extract)-ProdCode:-" + strActual +
//                                        "and Expected(Datasheet ACCT_DIM)-ProdCode:-" + strExpected);
//
//                    }


//                    // Validate SubProdCode with Datasheet in ACCT_DIM Tab and D2D Batch file
//                    strExpected = null;
//                    strActual = null;
//
//                    strExpected = accountDimtListMapObject.get(0).get("SRC_SYS_SUB_PRD_CD") == null ? "" : accountDimtListMapObject.get(0).get("SRC_SYS_SUB_PRD_CD").toString().trim();
//                    strActual = extractRecord.get(0).get("SubProdCode").trim();
//                    if (strActual.equals(strExpected)) {
//                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                "*****Pass Statement*****  Sub Prod Code is displayed as expected - SubProdCode :-" + strActual);
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " Sub Prod Code is not displayed as expected  Actual(Extract)-SubProdCode:-" + strActual +
//                                        "and Expected(Datasheet ACCT_DIM)-SubProdCode:-" + strExpected);
//
//                    }


//                    // Validate CampaignNumber with Datasheet in CUST_DIM Tab and D2D Batch file
//                    strExpected = null;
//                    strActual = null;
//
//                    strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CellGroup").trim() + "01";
//                    strActual = extractRecord.get(0).get("CampaignNumber").trim();
//                    if (strActual.equals(strExpected)) {
//                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                "*****Pass Statement*****  Campaign Number is displayed as expected - CampaignNumber :-" + strActual);
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " Campaign Number is not displayed as expected  Actual(Extract)-CampaignNumber:-" + strActual +
//                                        "and Expected(Datasheet ACCT_DIM)-CampaignNumber:-" + strExpected);
//
//                    }

//                    // @@@! Validate Email Specific Text with Datasheet in CUST_INSIGHTS Tab and D2D Batch file
//                    strExpected = null;
//                    strActual = null;
//                  Character strExpected_Curr_Val_Pat = null;
//                    strExpected_Curr_Val_Pat = StepDefinition.getCustInsightsInputTestDataInformation().get("CURR_VAL").trim() ;
//                    if (strExpected_Curr_Val_Pat.equals('0')) {
//                        strExpected_Curr_Val_Pat = "0";
//                    }else if (strExpected_Curr_Val_Pat.equals('1'){
//                        strExpected_Curr_Val_Pat = "0";
//                    }
//                    else {
//                        (strExpected_Curr_Val_Pat.
//                    }
//
//
//
//                    strActual = extractRecord.get(0).get("CampaignNumber").trim();
//                    if (strActual.equals(strExpected)) {
//                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                "*****Pass Statement*****  Campaign Number is displayed as expected - CampaignNumber :-" + strActual);
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " Campaign Number is not displayed as expected  Actual(Extract)-CampaignNumber:-" + strActual +
//                                        "and Expected(Datasheet ACCT_DIM)-CampaignNumber:-" + strExpected);
//
//                    }

                    // Validate Prod Code with DB and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();;
                    strActual = extractRecord.get(0).get("Account Product Code").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Prod code is displayed as expected and it is not null - Prod code:-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Prod code is not displayed as expected  Actual(Extract)-Prod code:-" + strActual +
                                            "and Expected(Proposition)-Prod code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Prod code is null and it should not be null Actual(Extract)-Prod code:-" + strActual +
                                        "and Expected(Proposition)-Prod code:-" + strExpected);
                    }

                    // Validate Pat Completed code with DB and D2D batch file
                    strExpected = null;
                    strActual = null;
                    value =null;
                    strExpected = custInsightsRowsData.get("CURR_VAL").toString().trim();
                    String decimalArray[] = strExpected.split("\\.");
                    value = decimalArray[0];
                   if(value.equalsIgnoreCase("0")){
                       value="0";}
                   else if (value.equalsIgnoreCase("1")) {
                       value="1";
                   } else  {
                        value="2";
                   }

                    strExpected = value;
                    System.out.println(strExpected);

                    strActual = extractRecord.get(0).get("PAT Completed").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  PAT Completed is displayed as expected and it is not null - PAT Completed:-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "PAT Completed is not displayed as expected  Actual(Extract)-PAT Completed:-" + strActual +
                                            "and Expected(Proposition)-PAT Completed:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "PAT Completed code is null and it should not be null Actual(Extract)-PAT Completed:-" + strActual +
                                        "and Expected(Proposition)-PAT Completed:-" + strExpected);
                    }

                    // Validate Bill Payment Completed with DB and D2D batch file
                    custInsightsRowsData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                            ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  INSIGHT_CD='" + insight_Code_Pay +"'");

                    strExpected = null;
                    strActual = null;
                    String value1 = null;
                    strExpected = custInsightsRowsData.get("CURR_VAL").toString().trim();
                    String decimalArray1[] = strExpected.split("\\.");
                    value1 = decimalArray1[0];
                    if(value1.equalsIgnoreCase("0")){
                        value1="0";}
                    else if (value1.equalsIgnoreCase("1")) {
                        value1="1";
                    } else  {
                        value1="1";
                    }

                    strExpected = value1;
                    System.out.println(strExpected);

                    strActual = extractRecord.get(0).get("Bill Payment Completed").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Bill Payment Completed code is displayed as expected and it is not null - Bill Payment Completed code:-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Bill Payment Completed code is not displayed as expected  Actual(Extract)-Bill Payment Completed code:-" + strActual +
                                            "and Expected(Proposition)-Preference code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Bill Payment Completed code is null and it should not be null Actual(Extract)-Bill Payment Completed code:-" + strActual +
                                        "and Expected(Proposition)-Bill Payment Completed code:-" + strExpected);
                    }

                    // Validate Payroll  Completed with DB and D2D batch file
                    custInsightsRowsData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                            ".CUST_INSIGHTS where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  INSIGHT_CD='" + insight_Code_Pay +"'");

                    strExpected = null;
                    strActual = null;
                    String value2 =  null;
                    strExpected = custInsightsRowsData.get("CURR_VAL").toString().trim();
                    String decimalArray2[] = strExpected.split("\\.");
                    value2= decimalArray2[0];
                    if(value2.equalsIgnoreCase("0")){
                        value2="0";}
                    else if (value2.equalsIgnoreCase("1")) {
                        value2="1";
                    } else  {
                        value2="1";
                    }

                    strExpected = value2;
                    System.out.println(strExpected);

                    strActual = extractRecord.get(0).get("Payroll Completed").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Payroll Completed code is displayed as expected and it is not null - Payroll Completed code:-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Payroll Completed code is not displayed as expected  Actual(Extract)-Payroll Completed:-" + strActual +
                                            "and Expected(Proposition)-Preference code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Payroll Completed is null and it should not be null Actual(Extract)-Payroll Completed:-" + strActual +
                                        "and Expected(Proposition)-Payroll Completed:-" + strExpected);
                    }

                    // Validate Preference project data  and batch file
                    //Review and Check if the hardcode can be removed
                    strExpected = null;
                    strActual = null;
                    strExpected = "eBK_INF";

                    strActual = extractRecord.get(0).get("PrefColumn").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                            "and Expected(IH)-Preference Column :-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                        "and Expected(IH)-Preference Column:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                    extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
                }
            }

            //Need to Review and Change to Fail TC if Control is Y
            if (ihRecord.get(0).get("Control").equals("Y")) {
                if (extractRecord.size() == 0) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
                                    "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
                                    "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
                                    " and Offer code:-" + extractRecord.get(0).get("OfferID"));
                }
            }
        }


        //Near Primacy D2D Bundle Xsell Anniversary Offer
        public void xsellAnniversaryLogic() throws ParseException, NullPointerException{
            String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
            Database database = new Database();
            String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
            Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                    ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
            Map<String, String> custDimMapObject = (Map) custDimRowData;
            List<Map<String, String>> custDimListMapObject = new LinkedList<>();
            custDimListMapObject.add(custDimMapObject);
            LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//            System.out.println("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

            Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                    ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
            Map<String, String> accountDimMapObject = (Map) accountDimRowData;
            List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
            accountDimtListMapObject.add(accountDimMapObject);
            LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));
//            System.out.println("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

            List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                    ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                    StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
            LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//            System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

            String strExpected = null;
            String strActual = null;

            String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

            List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
            LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));
//            System.out.println("******IH Records Data******" + convertToJson(ihRecord));

            //Fetching Details of Proposition Sheet
            List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
            List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
            List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
            if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
                if (extractRecord.size() == 1) {
                    // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = strCID;
                    strActual = extractRecord.get(0).get("CustomerID").trim();
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);
//                        System.out.println("*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                        "and Expected(Database CUST_DIM)-CID:-" + strExpected);
//                        System.out.println("Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
//                                "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                    }

                    // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                    strActual = extractRecord.get(0).get("EmailAddress").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Email Address is displayed as expected " +
                                            "and it is not null- Email :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
//                                    "and it is not null- Email :-" + strActual);

                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                            "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }


                    // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                    strActual = extractRecord.get(0).get("IndividualTitle").trim();
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Title:-" + strExpected);
//                        System.out.println(" Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                    }

                    // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                    strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
//                            System.out.println("*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                            "and Expected(Database CUST_DIM)-First Name:-" + strExpected);
//                            System.out.println(" First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
//                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);
//                        System.out.println("First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
//                                "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }


                    // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                    strExpected = null;
                    strActual = null;

                    strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                    strActual = extractRecord.get(0).get("IndividualLastName").trim();
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);
//                        System.out.println(" Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                    }

                    // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = custDimRowData.get("LANG_CD").toString().trim();
                    if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                            || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                        char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                        strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                        + strExpected);
//                        System.out.println(" Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
//                                + strExpected);
                    }
                    strActual = extractRecord.get(0).get("LanguageCode").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                            "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
//                            System.out.println(" Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
//                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
//                        System.out.println("Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                    }

                    //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                    strExpected = null;
                    strActual = null;

                    strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                    strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                    strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                        "and Expected(Proposition)-Expiry date:-" + strExpected);
//                        System.out.println("Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
//                                "and Expected(Proposition)-Expiry date:-" + strExpected);
                    }

                    // Validate Offer code with Proposition and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                    strActual = extractRecord.get(0).get("OfferID").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                            "and Expected(Proposition)-Offer code:-" + strExpected);
//                            System.out.println("Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
//                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
//                        System.out.println("Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
//                                "and Expected(Proposition)-Offer code:-" + strExpected);
                    }


                    // Validate Campaign code with Proposition and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                    strActual = extractRecord.get(0).get("CampaignCode").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
//                            System.out.println("*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                            "and Expected(Proposition)-Campaign code:-" + strExpected);
//                            System.out.println("Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
//                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
//                        System.out.println("Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
//                                "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }


                    // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                    strActual = extractRecord.get(0).get("CreativeID").trim();
                    if (!strActual.equals("")) {
                        if (strExpected.contains(strActual)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
//                            System.out.println("*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                            "and Expected(Test data)-Campaign code:-" + strExpected);
//                            System.out.println("Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
//                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
//                        System.out.println("Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
//                                "and Expected(Test data)-Campaign code:-" + strExpected);
                    }


                    // Validate pxInteractionID with IH and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                    strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                            "and Expected(IH)-Interaction ID :-" + strExpected);
//                            System.out.println("Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
//                                    "and Expected(IH)-Interaction ID :-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID:-" + strExpected);
//                        System.out.println("Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
//                                "and Expected(IH)-Interaction ID:-" + strExpected);
                    }

                    // Validate Response tracking code with IH and D2D batch file
                    strExpected = null;
                    strActual = null;
                    strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                    strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                            "and Expected(IH)-Response tracking code :-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Interaction ID:-" + strExpected);

                    }


////                Logic to Validate that Mail Id is blank
                    strExpected = null;
                    strActual = null;
                    strExpected = null;
                    strActual = extractRecord.get(0).get("MailID").trim();
                    if (!(strActual.equals(strExpected))) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                        "and Expected(Test data)-Mail Id:- NULL");
                    }


                    // Validate SRC_SYS_PRD_CD form acc_dim database and batch file
                    //strExpected = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                    strExpected = StepDefinition.getAcctDimInputTestDataInformation().get("SRC_SYS_PRD_CD").trim();
                    strActual = extractRecord.get(0).get("ProductCode").trim();
                    if (!strActual.equals("")) {
                        if (strExpected.equals(strActual)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + strActual);

                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + strActual +
                                            "and Expected(SRC Product Code):-" + strExpected);

                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + strExpected);
                    }

                    // Validate SRC_SYS_SUB_PRD_CD form acc_dim database and batch file
                    strExpected = StepDefinition.getAcctDimInputTestDataInformation().get("SRC_SYS_SUB_PRD_CD").trim();
                    strActual = extractRecord.get(0).get("SubProductCode").trim();
                    if (!strActual.equals("")) {
                        if (strExpected.equals(strActual)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  SRC Sub Product Code is displayed as expected - SRC Sub Product Code:-" + strActual);

                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " SRC Sub Product Code is not displayed as expected  Actual(Extract)-SRC Sub Product Code:-" + strActual +
                                            "and Expected(SRC Sub Product Code):-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "SRC Sub Product Code is null and it should not be null Expected (SRC Sub Product Code):-" + strExpected);
                    }


                    // Validate Anniversary date (CUST_OPND_DT fromm cust_dim database and batch file)
                    String custOpenDateStr = custDimRowData.get("CUST_OPND_DT").toString().trim();
                    LocalDate cDate = LocalDate.of(Integer.parseInt(custOpenDateStr.substring(0,4)),Integer.parseInt(custOpenDateStr.substring(5,7)),Integer.parseInt(custOpenDateStr.substring(8,10)));
                    //get current date
                    String todayDate = getSystemDateTimeForBatch("yyyy-MM-dd");
                    LocalDate aDate = LocalDate.of(Integer.parseInt(todayDate.substring(0,4)),Integer.parseInt(todayDate.substring(5,7)),Integer.parseInt(todayDate.substring(8,10)));
                    Period p = Period.between(aDate,cDate);

                    strExpected=Integer.toString(Math.abs(p.getYears()));
                    strActual = extractRecord.get(0).get("AnniversaryYear").trim();
                    if (!strActual.equals("")) {
                        if (strExpected.equals(strActual)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Anniversary Year is displayed as expected - Anniversary Year:-" + strActual);

                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    " Anniversary Year is not displayed as expected  Actual(Extract)-Anniversary Year:-" + strActual +
                                            "and Expected(Anniversary Year):-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))), "Anniversary Year is null and it should not be null Actual(Extract)-Anniversary Year :-" + strActual +
                                "and Expected(Anniversary Year):-" + strExpected);
                    }

                                // Validate Preference project data  and batch file
                    //Review and Check if the hardcode can be removed
                    strExpected = null;
                    strActual = null;
                    strExpected = "eBK_INF";
                    strActual = extractRecord.get(0).get("PrefColumn").trim();
                    if (!strActual.equals("")) {
                        if (strActual.equals(strExpected)) {
                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                        } else {
                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                            getScreenshot("Screenshot")))),
                                    "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                            "and Expected(IH)-Preference Column :-" + strExpected);
                        }
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                        "and Expected(IH)-Preference Column:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                    extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
                }
            }



            //Need to Review and Change to Fail TC if Control is Y
//        if (ihRecord.get(0).get("Control").equals("Y")) {
//            if (extractRecord.size() == 0) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
//                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
//                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
//                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
//            }
//        }
        }

    public void xsellSneakPeakLogic() throws ParseException, NullPointerException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//            System.out.println("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));
//            System.out.println("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        Map<String, Object> PACCRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PA_CCUL_CUSTOMER where CIS_CUST_ID = '" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> PACCRowMapObject = (Map) PACCRowData;
        List<Map<String, String>> PACCRowListMapObject = new LinkedList<>();
        PACCRowListMapObject.add(PACCRowMapObject);
        LoggingUtils.log("******PA_CCUL_CUSTOMER Database table data******" + convertToJson(PACCRowListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//            System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

//        List PACCRowData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
//                ".PA_CCUL_CUSTOMER where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
//        LoggingUtils.log("******PACCRowData Database table data******" + convertToJson(PACCRowData));

        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));
//            System.out.println("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());


//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);
//                        System.out.println("*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
//                        System.out.println("Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
//                                "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
//                                    "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);
//                        System.out.println(" Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
//                            System.out.println("*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);
//                            System.out.println(" First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
//                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);
//                        System.out.println("First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
//                                "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);
//                        System.out.println(" Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
//                        System.out.println(" Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
//                                + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
//                            System.out.println(" Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
//                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
//                        System.out.println("Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
//                        System.out.println("Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
//                                "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
//                            System.out.println("Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
//                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
//                        System.out.println("Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
//                                "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
//                            System.out.println("*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
//                            System.out.println("Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
//                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
//                        System.out.println("Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
//                                "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
//                            System.out.println("*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
//                            System.out.println("Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
//                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
//                        System.out.println("Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
//                                "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
//                            System.out.println("Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
//                                    "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
//                        System.out.println("Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
//                                "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);

                }


////                Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = null;
                strActual = extractRecord.get(0).get("MailID").trim();
                if (!(strActual.equals(strExpected))) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


                // Validate SRC_SYS_PRD_CD form acc_dim database and batch file
                //strExpected = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                strExpected = StepDefinition.getAcctDimInputTestDataInformation().get("SRC_SYS_PRD_CD").trim();
                strActual = extractRecord.get(0).get("ProductCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + strActual +
                                        "and Expected(SRC Product Code):-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + strExpected);
                }

                // Validate SRC_SYS_SUB_PRD_CD form acc_dim database and batch file
                strExpected = StepDefinition.getAcctDimInputTestDataInformation().get("SRC_SYS_SUB_PRD_CD").trim();
                strActual = extractRecord.get(0).get("SubProductCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Sub Product Code is displayed as expected - SRC Sub Product Code:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Sub Product Code is not displayed as expected  Actual(Extract)-SRC Sub Product Code:-" + strActual +
                                        "and Expected(SRC Sub Product Code):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Sub Product Code is null and it should not be null Expected (SRC Sub Product Code):-" + strExpected);
                }

                // Validate Ofr_instance_id from test data sheet and batch file
                String ofCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
                if(ofCode.equals("CIE6185"))
                {
                    strExpected="BXA01";
                } else if(ofCode.equals("CIE6186"))
                {
                    strExpected="BXB01";
                }
                else if(ofCode.equals("CIE6187"))
                {
                    strExpected="BXC01";
                }else
                {
                    strExpected="BXD01";
                }

                strActual = extractRecord.get(0).get("CampaignNumber").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  CampaignNumber is displayed as expected - CampaignNumber:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " CampaignNumber is not displayed as expected  Actual(Extract)-CampaignNumber:-" + strActual +
                                        "and Expected(PA Indicator):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "CampaignNumber is null and it should not be null Expected (CampaignNumber):-" + strExpected);
                }

                // Validate Credit Limit from database and batch file
                strExpected = null;
                strActual =null;
//                strExpected = ((String)PACCRowData.get("PA_CC_LIMIT")).trim();
                Integer pacclimit = (Integer)PACCRowData.get("PA_CC_LIMIT");
//                strExpected= pacclimit.toString().trim();
                strActual = extractRecord.get(0).get("CreditLimit").trim();
                String NPA_CC_indicator = extractRecord.get(0).get("PAIndicator").trim();
                if( NPA_CC_indicator.equals("NPA CC"))
                {
                    strExpected="0";
                }else{
                    strExpected= pacclimit.toString().trim();
                }
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  CreditLimit is displayed as expected " +
                                        "and it is not null- CreditLimit :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
//                                    "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " CreditLimit is not displayed as expected  Actual(Extract)-CreditLimit:-" + strActual +
                                        "and Expected(Database CreditLimit)-CreditLimit:-" + strExpected);
//                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " CreditLimit is null and it should not be null Actual(Extract)-CreditLimit:-" + strActual +
                                    "and Expected(Database CreditLimitT)-CreditLimit:-" + strExpected);
//                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }

                // Validate PA Indicator from test data sheet and batch file
                String PA_ind = ((StepDefinition.getCustDimInputTestDataInformation().get("CellGroup")).substring(0,1)).trim();
                if(PA_ind.equals("P"))
                {
                    strExpected="PA CC";
                }else{
                    strExpected="NPA CC";
                }
                strActual = extractRecord.get(0).get("PAIndicator").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  PA Indicator is displayed as expected - PA Indicator:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " PA Indicator is not displayed as expected  Actual(Extract)-PA Indicator:-" + strActual +
                                        "and Expected(PA Indicator):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "PA Indicator is null and it should not be null Expected (PA Indicator):-" + strExpected);
                }

                // Validate Priority Segment from database and batch file
                strExpected = null;
                strActual = null;
                String seg1 = StepDefinition.getCustDimInputTestDataInformation().get("SEGMENT").trim();
                if(seg1.equals("Early-Career"))
                {
                    strExpected="Early-Career";
                }else if(seg1.equals("Mid-Career"))
                {
                    strExpected="Mid-Career";
                }else if(seg1.equals("HENRY"))
                {
                    strExpected="HENRY";
                }else{
                    strExpected="Other";
                }
                strActual = extractRecord.get(0).get("PrioritySegment").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SEGMENT is displayed as expected " +
                                        "and it is not null- SEGMENT :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
//                                    "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SEGMENT is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database SEGMENT)-SEGMENT:-" + strExpected);
//                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " SEGMENT is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database SEGMENT)-SEGMENT:-" + strExpected);
//                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }

                // Validate Bundle Up To Value from database and batch file
                String offCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();

                if((offCode.equals("CIE6185")) || (offCode.equals("CIE6185")))
                {
                    strExpected="650";
                } else if((offCode.equals("CIE6186") )|| (offCode.equals("CIE6191")))
                {
                    strExpected="320";
                }else if((offCode.equals("CIE6187")) || (offCode.equals("CIE6192")))
                {
                    strExpected="1100";
                }else
                {
                    strExpected="875";
                }

                strActual = extractRecord.get(0).get("BundleUpToValue").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  BundleUpToValue is displayed as expected - BundleUpToValue:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " BundleUpToValue is not displayed as expected  Actual(Extract)-BundleUpToValue:-" + strActual +
                                        "and Expected(BundleUpToValue):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "BundleUpToValue is null and it should not be null Expected (BundleUpToValue):-" + strExpected);
                }

                // Validate Saving Calculator from database and batch file
                String CurBal = StepDefinition.getAcctDimInputTestDataInformation().get("CRNT_BAL_AMT").trim();
                int CurBalint = Integer.parseInt(CurBal);
                if(CurBalint>=100 && CurBalint<=2000)
                {
                    strExpected="2000";
                }else if(CurBalint>=2001 && CurBalint<=5000)
                {
                    strExpected="5000";
                }
                else if(CurBalint>=5001 && CurBalint<=10000)
                {
                    strExpected="10000";
                }else if(CurBalint>=10001 && CurBalint<=15000)
                {
                    strExpected="15000";
                }else{
                    strExpected="Generic";
                }
                strActual = extractRecord.get(0).get("SavingCalculator").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Saving Calculator is displayed as expected - Saving Calculator:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Saving Calculator is not displayed as expected  Actual(Extract)-Saving Calculator:-" + strActual +
                                        "and Expected(Saving Calculator):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Saving Calculator is null and it should not be null Expected (Saving Calculator):-" + strExpected);
                }


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eBK_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

    }

    public void xsellReminderLogic() throws ParseException, NullPointerException {
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));
//            System.out.println("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));
//            System.out.println("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        Map<String, Object> PACCRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".PA_CCUL_CUSTOMER where CIS_CUST_ID = '" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> PACCRowMapObject = (Map) PACCRowData;
        List<Map<String, String>> PACCRowListMapObject = new LinkedList<>();
        PACCRowListMapObject.add(PACCRowMapObject);
        LoggingUtils.log("******PA_CCUL_CUSTOMER Database table data******" + convertToJson(PACCRowListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));
//            System.out.println("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        Map<String, Object> mapPrioritizedCCAccount = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM in(Select ACCT_Num From "+ ConfigurationManager.getBundle().getPropertyValue("dbSchema")+".CUST_ACCT_RLTNP_DIM where cis_cust_id in ('" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "')" +
                " AND ACCT_SUBSYS_ID = 'KS' AND ACCT_ODT in (select max(acct_odt) From " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +".ACCT_DIM where ACCT_Num in(Select ACCT_Num From " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where cis_cust_id in ('" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") +"') and ACCT_SUBSYS_ID='KS')");


        String strExpected = null;
        String strActual = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));
//            System.out.println("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());


//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);
//                        System.out.println("*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
//                        System.out.println("Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
//                                "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
//                                    "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);
//                        System.out.println(" Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
//                            System.out.println("*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);
//                            System.out.println(" First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
//                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);
//                        System.out.println("First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
//                                "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);
//                        System.out.println(" Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
//                        System.out.println(" Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
//                                + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
//                            System.out.println(" Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
//                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
//                        System.out.println("Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
//                                "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);
//                        System.out.println("*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
//                        System.out.println("Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
//                                "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
//                            System.out.println("Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
//                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
//                        System.out.println("Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
//                                "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
//                            System.out.println("*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
//                            System.out.println("Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
//                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
//                        System.out.println("Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
//                                "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
//                            System.out.println("*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
//                            System.out.println("Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
//                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
//                        System.out.println("Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
//                                "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
//                            System.out.println("Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
//                                    "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
//                        System.out.println("Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
//                                "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").trim() + "_" + offerCode;
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);

                }


////                Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = null;
                strActual = extractRecord.get(0).get("MailID").trim();
                if (!(strActual.equals(strExpected))) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


                // Validate SRC_SYS_PRD_CD form acc_dim database and batch file
                //strExpected = accountDimRowData.get("SRC_SYS_PRD_CD").toString().trim();
                strExpected = StepDefinition.getAcctDimInputTestDataInformation().get("SRC_SYS_PRD_CD").trim();
                strActual = extractRecord.get(0).get("ProductCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Product Code is displayed as expected - SRC Product Code:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Product Code is not displayed as expected  Actual(Extract)-SRC Product Code:-" + strActual +
                                        "and Expected(SRC Product Code):-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Product Code is null and it should not be null Expected (SRC Product Code Extract):-" + strExpected);
                }

                // Validate SRC_SYS_SUB_PRD_CD form acc_dim database and batch file
                strExpected = StepDefinition.getAcctDimInputTestDataInformation().get("SRC_SYS_SUB_PRD_CD").trim();
                strActual = extractRecord.get(0).get("SubProductCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SRC Sub Product Code is displayed as expected - SRC Sub Product Code:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SRC Sub Product Code is not displayed as expected  Actual(Extract)-SRC Sub Product Code:-" + strActual +
                                        "and Expected(SRC Sub Product Code):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "SRC Sub Product Code is null and it should not be null Expected (SRC Sub Product Code):-" + strExpected);
                }

                // Validate Ofr_instance_id from test data sheet and batch file
                String cellgrp = StepDefinition.getCustDimInputTestDataInformation().get("CellGroup").trim();
                String ofCode = cellgrp.substring(cellgrp.length()-7);
                if(ofCode.equals("CIE6185"))
                {
                    strExpected="BXA01";
                } else if(ofCode.equals("CIE6186"))
                {
                    strExpected="BXB01";
                }
                else if(ofCode.equals("CIE6187"))
                {
                    strExpected="BXC01";
                }else
                {
                    strExpected="BXD01";
                }

                strActual = extractRecord.get(0).get("CampaignNumber").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  CampaignNumber is displayed as expected - CampaignNumber:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " CampaignNumber is not displayed as expected  Actual(Extract)-CampaignNumber:-" + strActual +
                                        "and Expected(PA Indicator):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "CampaignNumber is null and it should not be null Expected (CampaignNumber):-" + strExpected);
                }

                // Validate Credit Limit from database and batch file
                strExpected = null;
                strActual =null;
//                strExpected = ((String)PACCRowData.get("PA_CC_LIMIT")).trim();
                Integer pacclimit = (Integer)PACCRowData.get("PA_CC_LIMIT");
//                strExpected= pacclimit.toString().trim();
                strActual = extractRecord.get(0).get("CreditLimit").trim();
                String NPA_CC_indicator = extractRecord.get(0).get("PAIndicator").trim();
                if( NPA_CC_indicator.equals("NPA CC"))
                {
                    strExpected="0";
                }else{
                    strExpected= pacclimit.toString().trim();
                }
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  CreditLimit is displayed as expected " +
                                        "and it is not null- CreditLimit :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
//                                    "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " CreditLimit is not displayed as expected  Actual(Extract)-CreditLimit:-" + strActual +
                                        "and Expected(Database CreditLimit)-CreditLimit:-" + strExpected);
//                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " CreditLimit is null and it should not be null Actual(Extract)-CreditLimit:-" + strActual +
                                    "and Expected(Database CreditLimitT)-CreditLimit:-" + strExpected);
//                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }

                // Validate PA Indicator from test data sheet and batch file
                String PA_ind = ((StepDefinition.getCustDimInputTestDataInformation().get("CellGroup")).substring(0,1)).trim();
                if(PA_ind.equals("P"))
                {
                    strExpected="PA CC";
                }else{
                    strExpected="NPA CC";
                }
                strActual = extractRecord.get(0).get("PAIndicator").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  PA Indicator is displayed as expected - PA Indicator:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " PA Indicator is not displayed as expected  Actual(Extract)-PA Indicator:-" + strActual +
                                        "and Expected(PA Indicator):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "PA Indicator is null and it should not be null Expected (PA Indicator):-" + strExpected);
                }

                // Validate Priority Segment from database and batch file
                strExpected = null;
                strActual = null;
                String seg1 = StepDefinition.getCustDimInputTestDataInformation().get("SEGMENT").trim();
                if(seg1.equals("Early-Career"))
                {
                    strExpected="Early-Career";
                }else if(seg1.equals("Mid-Career"))
                {
                    strExpected="Mid-Career";
                }else if(seg1.equals("HENRY"))
                {
                    strExpected="HENRY";
                }else{
                    strExpected="Other";
                }
                strActual = extractRecord.get(0).get("PrioritySegment").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  SEGMENT is displayed as expected " +
                                        "and it is not null- SEGMENT :-" + strActual);
//                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
//                                    "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " SEGMENT is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database SEGMENT)-SEGMENT:-" + strExpected);
//                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " SEGMENT is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database SEGMENT)-SEGMENT:-" + strExpected);
//                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }

                // Validate Bundle Up To Value from database and batch file
//                String cellgrp = StepDefinition.getCustDimInputTestDataInformation().get("CellGroup").trim();
                String offCode = cellgrp.substring(cellgrp.length()-7);

                if(offCode.equals("CIE6185"))
                {
                    strExpected="650";
                } else if(offCode.equals("CIE6186") )
                {
                    strExpected="320";
                }else if(offCode.equals("CIE6187"))
                {
                    strExpected="1100";
                }else
                {
                    strExpected="875";
                }

                strActual = extractRecord.get(0).get("BundleUpToValue").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  BundleUpToValue is displayed as expected - BundleUpToValue:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " BundleUpToValue is not displayed as expected  Actual(Extract)-BundleUpToValue:-" + strActual +
                                        "and Expected(BundleUpToValue):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "BundleUpToValue is null and it should not be null Expected (BundleUpToValue):-" + strExpected);
                }

                // Validate Saving Calculator from database and batch file
                String CurBal = StepDefinition.getAcctDimInputTestDataInformation().get("CRNT_BAL_AMT").trim();
                int CurBalint = Integer.parseInt(CurBal);
                if(CurBalint>=100 && CurBalint<=2000)
                {
                    strExpected="2000";
                }else if(CurBalint>=2001 && CurBalint<=5000)
                {
                    strExpected="5000";
                }
                else if(CurBalint>=5001 && CurBalint<=10000)
                {
                    strExpected="10000";
                }else if(CurBalint>=10001 && CurBalint<=15000)
                {
                    strExpected="15000";
                }else{
                    strExpected="Generic";
                }
                strActual = extractRecord.get(0).get("SavingCalculator").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Saving Calculator is displayed as expected - Saving Calculator:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Saving Calculator is not displayed as expected  Actual(Extract)-Saving Calculator:-" + strActual +
                                        "and Expected(Saving Calculator):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Saving Calculator is null and it should not be null Expected (Saving Calculator):-" + strExpected);
                }

                // Validate Current Credit Card Product Code from database and batch file

//                String segmentID = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
//                if(segmentID.equals("6214102301"))
//                {
//                    strExpected = null;
//                    strActual = null;
//                    strExpected = mapPrioritizedCCAccount.get("SRC_SYS_PRD_CD").toString().trim();
//                    strActual = extractRecord.get(0).get("CurrentCreditCardProductCode").trim();
//                    if (!strActual.equals("")) {
//                        if (strActual.equals(strExpected)) {
//                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                            getScreenshot("Screenshot")))),
//                                    "*****Pass Statement*****  Current Credit Card Product Code is displayed as expected " +
//                                            "and it is not null- Current Credit Card Product Code :-" + strActual);
////                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
////                                    "and it is not null- Email :-" + strActual);
//
//                        } else {
//                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                            getScreenshot("Screenshot")))),
//                                    " Current Credit Card Product Code is not displayed as expected  Actual(Extract)-Current Credit Card Product Code:-" + strActual +
//                                            "and Expected(Database CUST_DIM)-Current Credit Card Product Code:-" + strExpected);
////                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//
//                        }
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " Current Credit Card Product Code is null and it should not be null Actual(Extract)-Current Credit Card Product Code:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-Current Credit Card Product Code:-" + strExpected);
////                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
////                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//
//                    }
//                }
//
//
//                // Validate Current Credit Card Sub Product Code from database and batch file
//                //String segmentID = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
//                if(segmentID.equals("6214102301"))
//                {
//                    strExpected = null;
//                    strActual = null;
//                    strExpected = mapPrioritizedCCAccount.get("SRC_SYS_SUB_PRD_CD").toString().trim();
//                    strActual = extractRecord.get(0).get("CurrentCreditCardSubProductCode").trim();
//                    if (!strActual.equals("")) {
//                        if (strActual.equals(strExpected)) {
//                            LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                            getScreenshot("Screenshot")))),
//                                    "*****Pass Statement*****  CurrentCreditCardSubProductCode is displayed as expected " +
//                                            "and it is not null- CurrentCreditCardSubProductCode :-" + strActual);
////                            System.out.println("*****Pass Statement*****  Email Address is displayed as expected " +
////                                    "and it is not null- Email :-" + strActual);
//
//                        } else {
//                            LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                            getScreenshot("Screenshot")))),
//                                    " CurrentCreditCardSubProductCode is not displayed as expected  Actual(Extract)-CurrentCreditCardSubProductCode:-" + strActual +
//                                            "and Expected(Database CUST_DIM)-CurrentCreditCardSubProductCode:-" + strExpected);
////                            System.out.println(" Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual + "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//
//                        }
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " CurrentCreditCardSubProductCode is null and it should not be null Actual(Extract)-Current Credit Card Product Code:-" + strActual +
//                                        "and Expected(Database CUST_DIM)-CurrentCreditCardSubProductCode:-" + strExpected);
////                        System.out.println(" Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
////                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);
//
//                    }
//                }


                // Validate Target Credit Card Product Code from database and batch file
//                String cellgrp = StepDefinition.getCustDimInputTestDataInformation().get("CellGroup").trim();
                String cellgp=cellgrp.substring(cellgrp.length()-7);
                if(cellgp.equals("CIE6185"))
                {
                    strExpected="AXG";
                } else if(cellgp.equals("CIE6186"))
                {
                    strExpected="VCL";
                }else if(offCode.equals("CIE6187"))
                {
                    strExpected="VFF";
                }else
                {
                    strExpected="VLR";
                }
                strActual = extractRecord.get(0).get("TargetCreditCardProductCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  TargetCreditCardProductCode is displayed as expected - TargetCreditCardProductCode:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " TargetCreditCardProductCode is not displayed as expected  Actual(Extract)-TargetCreditCardProductCode:-" + strActual +
                                        "and Expected(TargetCreditCardSubProductCode):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "TargetCreditCardProductCode is null and it should not be null Expected (TargetCreditCardProductCode):-" + strExpected);
                }

                // Validate Target Credit Card Sub Product Code from database and batch file
//                String cellgrp = StepDefinition.getCustDimInputTestDataInformation().get("CellGroup").trim();
//                String cellgp=cellgrp.substring(cellgrp.length()-7);
                if(cellgp.equals("CIE6185"))
                {
                    strExpected="GC";
                } else if(cellgp.equals("CIE6186"))
                {
                    strExpected="DM";
                }else if(offCode.equals("CIE6187"))
                {
                    strExpected="TR";
                }else
                {
                    strExpected="RG";
                }
                strActual = extractRecord.get(0).get("TargetCreditCardSubProductCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  TargetCreditCardSubProductCode is displayed as expected - TargetCreditCardSubProductCode:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " TargetCreditCardSubProductCode is not displayed as expected  Actual(Extract)-TargetCreditCardSubProductCode:-" + strActual +
                                        "and Expected(TargetCreditCardSubProductCode):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "TargetCreditCardSubProductCode is null and it should not be null Expected (TargetCreditCardSubProductCode):-" + strExpected);
                }


                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "eBK_INF";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

    }

    public void SSIFundsLogic() throws ParseException{
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String strExpected = null;
        String strActual = null;
        String provinceCodeDatabase = null;
        String provinceCodeExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcSubPrdCdDatabase = null;
        String srcSubPrdCdExtract = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").replaceAll("-", "M").trim() + "_" + offerCode;
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }


//                Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


                // Validate ACCT_NUM (last 4 digits) form acc_dim database and batch file
                String acct_num = accountDimRowData.get("ACCT_NUM").toString().trim();
                strExpected=acct_num.substring(acct_num.length()-4);
                strActual = extractRecord.get(0).get("accountnumber").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  accountnumber is displayed as expected - accountnumber:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " accountnumber is not displayed as expected  Actual(Extract)-accountnumber:-" + strActual +
                                        "and Expected(accountnumber):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "accountnumber is null and it should not be null Expected (accountnumber Extract):-" + strExpected);
                }

                // Validate PLN_ACCT_CD_MASTER form acc_dim database and batch file
                strExpected = accountDimRowData.get("PLN_ACCT_CD_MASTER").toString().trim();
                strActual = extractRecord.get(0).get("PlanCode").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  PlanCode is displayed as expected - PlanCode:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " PlanCode is not displayed as expected  Actual(Extract)-PlanCode:-" + strActual +
                                        "and Expected(PlanCode):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "PlanCode is null and it should not be null Expected (PlanCode):-" + strExpected);
                }

                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_INV";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Preference Column  :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
//        if (ihRecord.get(0).get("Control").equals("Y")) {
//            if (extractRecord.size() == 0) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
//                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
//                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
//                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
//            }
//        }
    }

    public void SSIAnnualReviewLogic() throws ParseException{
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String strExpected = null;
        String strActual = null;
        String provinceCodeDatabase = null;
        String provinceCodeExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcSubPrdCdDatabase = null;
        String srcSubPrdCdExtract = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").replaceAll("-", "M").trim() + "_" + offerCode;
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }


//                Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


                // Validate ACCT_NUM (last 4 digits) form acc_dim database and batch file
                String acct_num = accountDimRowData.get("ACCT_NUM").toString().trim();
                strExpected=acct_num.substring(acct_num.length()-4);
                strActual = extractRecord.get(0).get("accountnumber").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  accountnumber is displayed as expected - accountnumber:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " accountnumber is not displayed as expected  Actual(Extract)-accountnumber:-" + strActual +
                                        "and Expected(accountnumber):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "accountnumber is null and it should not be null Expected (accountnumber Extract):-" + strExpected);
                }

                // Validate PLN_ACCT_CD_MASTER form acc_dim database and batch file
//                strExpected = accountDimRowData.get("PLN_ACCT_CD_MASTER").toString().trim();
//                strActual = extractRecord.get(0).get("PlanCode").trim();
//                if (!strActual.equals("")) {
//                    if (strExpected.equals(strActual)) {
//                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                "*****Pass Statement*****  PlanCode is displayed as expected - PlanCode:-" + strActual);
//
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " PlanCode is not displayed as expected  Actual(Extract)-PlanCode:-" + strActual +
//                                        "and Expected(PlanCode):-" + strExpected);
//                    }
//                } else {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "PlanCode is null and it should not be null Expected (PlanCode):-" + strExpected);
//                }

                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_INV";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Preference Column  :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
//        if (ihRecord.get(0).get("Control").equals("Y")) {
//            if (extractRecord.size() == 0) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
//                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
//                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
//                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
//            }
//        }
    }

    public void SSIGoalsSetupLogic() throws ParseException{
        String offerCode = StepDefinition.getCustDimInputTestDataInformation().get("OfferCodes").trim();
        Database database = new Database();
        String strDBSchema = ConfigurationManager.getBundle().getPropertyValue("dbSchema");
//        String strCID = StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID");
        Map<String, Object> custDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "'");
        Map<String, String> custDimMapObject = (Map) custDimRowData;
        List<Map<String, String>> custDimListMapObject = new LinkedList<>();
        custDimListMapObject.add(custDimMapObject);
        LoggingUtils.log("******CUST_DIM Database table data******" + convertToJson(custDimListMapObject));

        Map<String, Object> accountDimRowData = database.readRow("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".ACCT_DIM where ACCT_NUM = '" + StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        Map<String, String> accountDimMapObject = (Map) accountDimRowData;
        List<Map<String, String>> accountDimtListMapObject = new LinkedList<>();
        accountDimtListMapObject.add(accountDimMapObject);
        LoggingUtils.log("******ACCT_DIM Database table data******" + convertToJson(accountDimtListMapObject));

        List custAcctDimRowsData = database.readRows("Select * from " + ConfigurationManager.getBundle().getPropertyValue("dbSchema") +
                ".CUST_ACCT_RLTNP_DIM where CIS_CUST_ID='" + StepDefinition.getCustDimInputTestDataInformation().get("CIS_CUST_ID") + "' AND  ACCT_NUM='" +
                StepDefinition.getAcctDimInputTestDataInformation().get("ACCT_NUM") + "'");
        LoggingUtils.log("******CUST_ACCT_RLTNP_DIM Database table data******" + convertToJson(custAcctDimRowsData));

        String strExpected = null;
        String strActual = null;
        String provinceCodeDatabase = null;
        String provinceCodeExtract = null;
        String srcPrdCdDatabase = null;
        String srcPrdCdExtract = null;
        String srcSubPrdCdDatabase = null;
        String srcSubPrdCdExtract = null;

        String strCID = custDimRowData.get("CIS_CUST_ID").toString().trim();

        List<Map<String, String>> ihRecord = new IhViaAPIbyCustomer().getIHTableDataViaAPI(strCID).stream().filter(x -> x.get("Proposition name").equals(offerCode) && x.get("Outcome").equals("IPT")).collect(Collectors.toList());
        LoggingUtils.log("******IH Records Data******" + convertToJson(ihRecord));

        //Fetching Details of Proposition Sheet
        List<Map<String, String>> csvFileRecords = readCSVFile("Proposition.csv");
        List<Map<String, String>> csvFileRecord = csvFileRecords.stream().filter(x -> x.get("pyName").equals(offerCode)).collect(Collectors.toList());



//        2022-04-20 - The next line is replaced by the subsequent line of code to make it generic.
//        List<Map<String, String>> extractRecord = StepDefinition.getTravelInsuranceCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        List<Map<String, String>> extractRecord = StepDefinition.getBatchFileCustomerOfferDetails().stream().filter(x -> x.get("OfferID").equals(offerCode.replace("CIE", ""))).collect(Collectors.toList());
        if (ihRecord.size() == 1 && ihRecord.get(0).get("Control").equals("N")) {
            if (extractRecord.size() == 1) {
                // Validate CID with Database in CUST_DIM table field CIS_CUST_ID and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = strCID;
                strActual = extractRecord.get(0).get("CustomerID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Customer ID(CID) is displayed as expected - CID:-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Customer ID(CID) is not displayed as expected  Actual(Extract)-CID:-" + strActual +
                                    "and Expected(Database CUST_DIM)-CID:-" + strExpected);
                }

                // Validate Email address with Database in CUST_DIM table field PRIM_EMAIL_ADDR and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("PRIM_EMAIL_ADDR").toString().trim();
                strActual = extractRecord.get(0).get("EmailAddress").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Email Address is displayed as expected " +
                                        "and it is not null- Email :-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Email Address is not displayed as expected  Actual(Extract)-Email:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Email Address is null and it should not be null Actual(Extract)-Email:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Email:-" + strExpected);

                }


                // Validate Title with Database in CUST_DIM table field INDV_TTL_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_TTL_NM") == null ? "" : custDimRowData.get("INDV_TTL_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualTitle").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Title is displayed as expected - Title :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Title is not displayed as expected  Actual(Extract)-Title:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Title:-" + strExpected);

                }

                // Validate First Name with Database in CUST_DIM table field INDV_FRST_NM and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("INDV_FRST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualFirstName").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  First Name is displayed as expected and it is not null - First Name :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " First Name is not displayed as expected  Actual(Extract)-First Name:-" + strActual +
                                        "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "First Name is null and it should not be null Actual(Extract)-First Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-First Name:-" + strExpected);

                }


                // Validate Last Name with Database in CUST_DIM table field INDV_LAST_NM and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = custDimRowData.get("INDV_LAST_NM") == null ? "" : custDimRowData.get("INDV_LAST_NM").toString().trim();
                strActual = extractRecord.get(0).get("IndividualLastName").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Last Name is displayed as expected - Last Name :-" + strActual);
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Last Name is not displayed as expected  Actual(Extract)-Last Name:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Last Name:-" + strExpected);

                }

                // Validate Language code with Database in CUST_DIM table field LANG_CD and D2D Batch file
                strExpected = null;
                strActual = null;
                strExpected = custDimRowData.get("LANG_CD").toString().trim();
                if (strExpected.equals("EN") || strExpected.equals("en") || strExpected.equals("E") || strExpected.equals("e")
                        || strExpected.equals("FR") || strExpected.equals("fr") || strExpected.equals("F") || strExpected.equals("f")) {
                    char languageCharacter = Character.toUpperCase(custDimRowData.get("LANG_CD").toString().trim().charAt(0));
                    strExpected = Character.toString(languageCharacter);
//                    LoggingUtils.log("Language code is displayed as :-" + strExpected + " So taking first character");
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            " Language code is not either 'E','EN','e','en','F','FR','f','fr' instead it is displaying as "
                                    + strExpected);
                }
                strActual = extractRecord.get(0).get("LanguageCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Language code is displayed as expected and it is upper case - Language code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " Language code is not displayed as expected  Actual(Extract)-Language code:-" + strActual +
                                        "and Expected(Database CUST_DIM)-Language code:-" + strExpected);

                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Language code is null and it should not be null Actual(Extract)-Language code:-" + strActual +
                                    "and Expected(Database CUST_DIM)-Language code:-" + strExpected);
                }

                //  Verifying offer expiry with proposition and D2D Batch file and D2D Batch file
                strExpected = null;
                strActual = null;

                strExpected = csvFileRecord.get(0).get("OfferExpireDate");
                strExpected = changeDateFormat(strExpected, "yyyy-MM-dd").replace("-", "");

                strActual = extractRecord.get(0).get("OfferExpirydate").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  Offer Expiry date is displayed as expected- Expiry date :-" + strActual);

                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer Expiry date is not displayed as expected  Actual(Extract)-Expiry date:-" + strActual +
                                    "and Expected(Proposition)-Expiry date:-" + strExpected);
                }

                // Validate Offer code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("OfferCode").replace("CIE", "").trim();
                strActual = extractRecord.get(0).get("OfferID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Offer code is displayed as expected and it is not null - Offer code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Offer code is not displayed as expected  Actual(Extract)-Offer code:-" + strActual +
                                        "and Expected(Proposition)-Offer code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Offer code is null and it should not be null Actual(Extract)-Offer code:-" + strActual +
                                    "and Expected(Proposition)-Offer code:-" + strExpected);
                }


                // Validate Campaign code with Proposition and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = csvFileRecord.get(0).get("CampaignCode").trim();
                strActual = extractRecord.get(0).get("CampaignCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Campaign code is displayed as expected and it is not null - Campaign code:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Campaign code is not displayed as expected  Actual(Extract)-Campaign code:-" + strActual +
                                        "and Expected(Proposition)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Campaign code is null and it should not be null Actual(Extract)-Campaign code:-" + strActual +
                                    "and Expected(Proposition)-Campaign code:-" + strExpected);
                }


                // Validate Creative Id with Test Datasheet and D2D payment methods batch file
                strExpected = null;
                strActual = null;
                strExpected = StepDefinition.getCustDimInputTestDataInformation().get("CreativeID").trim();
                strActual = extractRecord.get(0).get("CreativeID").trim();
                if (!strActual.equals("")) {
                    if (strExpected.contains(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Creative Id is displayed as expected and it is not null - Creative Id:-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Creative Id is not displayed as expected  Actual(Extract)-Creative Id:-" + strActual +
                                        "and Expected(Test data)-Campaign code:-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Creative Id is null and it should not be null Actual(Extract)-Creative Id:-" + strActual +
                                    "and Expected(Test data)-Campaign code:-" + strExpected);
                }


                // Validate pxInteractionID with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replace(",", "").trim();
                strActual = extractRecord.get(0).get("PegaInteractionID").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Interaction ID is displayed as expected and it is not null - Interaction ID :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Interaction ID  is not displayed as expected  Actual(Extract)-Interaction ID :-" + strActual +
                                        "and Expected(IH)-Interaction ID :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Interaction ID  is null and it should not be null Actual(Extract)-Interaction ID :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }

                // Validate Response tracking code with IH and D2D batch file
                strExpected = null;
                strActual = null;
                strExpected = ihRecord.get(0).get("pxInteractionID").replaceAll(",", "").replaceAll("-", "M").trim() + "_" + offerCode;
                strActual = extractRecord.get(0).get("PegaResponsetrackingCode").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Response tracking code is displayed as expected and it is not null - Response tracking code :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Response tracking code  is not displayed as expected  Actual(Extract)-Response tracking code :-" + strActual +
                                        "and Expected(IH)-Response tracking code :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Response tracking code  is null and it should not be null Actual(Extract)-Response tracking code :-" + strActual +
                                    "and Expected(IH)-Interaction ID:-" + strExpected);
                }


//                Logic to Validate that Mail Id is blank
                strExpected = null;
                strActual = null;
                strExpected = "";
                strActual = extractRecord.get(0).get("MailID").trim();
                if (strActual.equals(strExpected)) {
                    LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "*****Pass Statement*****  MailID is displayed as expected - MailID:-" + (strActual.equals("") ? "NULL" : strActual));
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Mail Id is not displayed as expected  Actual(Extract)-Mail Id:-" + (strActual.equals("") ? "NULL" : strActual) +
                                    "and Expected(Test data)-Mail Id:- NULL");
                }


                // Validate ACCT_NUM (last 4 digits) form acc_dim database and batch file
                String acct_num = accountDimRowData.get("ACCT_NUM").toString().trim();
                strExpected=acct_num.substring(acct_num.length()-4);
                strActual = extractRecord.get(0).get("accountnumber").trim();
                if (!strActual.equals("")) {
                    if (strExpected.equals(strActual)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  accountnumber is displayed as expected - accountnumber:-" + strActual);

                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                " accountnumber is not displayed as expected  Actual(Extract)-accountnumber:-" + strActual +
                                        "and Expected(accountnumber):-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "accountnumber is null and it should not be null Expected (accountnumber Extract):-" + strExpected);
                }

                // Validate PLN_ACCT_CD_MASTER form acc_dim database and batch file
//                strExpected = accountDimRowData.get("PLN_ACCT_CD_MASTER").toString().trim();
//                strActual = extractRecord.get(0).get("PlanCode").trim();
//                if (!strActual.equals("")) {
//                    if (strExpected.equals(strActual)) {
//                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                "*****Pass Statement*****  PlanCode is displayed as expected - PlanCode:-" + strActual);
//
//                    } else {
//                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                        getScreenshot("Screenshot")))),
//                                " PlanCode is not displayed as expected  Actual(Extract)-PlanCode:-" + strActual +
//                                        "and Expected(PlanCode):-" + strExpected);
//                    }
//                } else {
//                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                    getScreenshot("Screenshot")))),
//                            "PlanCode is null and it should not be null Expected (PlanCode):-" + strExpected);
//                }

                // Validate Preference project data  and batch file
                //Review and Check if the hardcode can be removed
                strExpected = null;
                strActual = null;
                strExpected = "ePD_INV";
                strActual = extractRecord.get(0).get("PrefColumn").trim();
                if (!strActual.equals("")) {
                    if (strActual.equals(strExpected)) {
                        LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "*****Pass Statement*****  Preference Column is displayed as expected and it is not null - Pref Column :-" + strActual);
                    } else {
                        LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                        getScreenshot("Screenshot")))),
                                "Preference Column  is not displayed as expected  Actual(Extract)-Preference Column  :-" + strActual +
                                        "and Expected(IH)-Preference Column :-" + strExpected);
                    }
                } else {
                    LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                    getScreenshot("Screenshot")))),
                            "Preference Column  is null and it should not be null Actual(Extract)-Preference Column :-" + strActual +
                                    "and Expected(IH)-Preference Column:-" + strExpected);
                }
            } else {
                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
                                getScreenshot("Screenshot")))),
                        "Customer offer details rows are present " + extractRecord.size() + "times Record details CID:-" +
                                extractRecord.get(0).get("CustomerID") + " and Offer code:-" + extractRecord.get(0).get("OfferID"));
            }
        }

        //Need to Review and Change to Fail TC if Control is Y
//        if (ihRecord.get(0).get("Control").equals("Y")) {
//            if (extractRecord.size() == 0) {
//                LoggingUtils.logSuccess((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "*****Pass Statement*****  When control is 'Y' Customer offer details rows are not present " +
//                                "in extract  CID:- " + custDimRowData.get("CIS_CUST_ID").toString().trim());
//            } else {
//                LoggingUtils.logFailure((new File((String) Objects.requireNonNull(BasePage.getExtentReportHelper().
//                                getScreenshot("Screenshot")))),
//                        "When control is 'Y' Customer offer details rows are present " + extractRecord.size() +
//                                "times in extract Record details CID:-" + extractRecord.get(0).get("CustomerID") +
//                                " and Offer code:-" + extractRecord.get(0).get("OfferID"));
//            }
//        }
    }
    }


